{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://projeto-war/./node_modules/gl-matrix/esm/common.js","webpack://projeto-war/./node_modules/gl-matrix/esm/mat4.js","webpack://projeto-war/./node_modules/gl-matrix/esm/vec3.js","webpack://projeto-war/./src/webgl/gl-util.js","webpack://projeto-war/./src/webgl/mesh.js","webpack://projeto-war/./src/view/image.js","webpack://projeto-war/./src/shaders/imageVert.js","webpack://projeto-war/./src/shaders/imageFrag.js","webpack://projeto-war/./src/webgl/half-edge.js","webpack://projeto-war/./src/webgl/indexed-mesh.js","webpack://projeto-war/./src/shaders/countryVert.js","webpack://projeto-war/./src/shaders/phongFrag.js","webpack://projeto-war/./src/view/canvasImage.js","webpack://projeto-war/./src/webgl/camera.js","webpack://projeto-war/./src/webgl/light.js","webpack://projeto-war/./src/webgl/scene.js","webpack://projeto-war/./src/main.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","export default class GLUtil{\r\n    static createShader(gl, type, source_code) {\r\n        const shader = gl.createShader(type);\r\n        gl.shaderSource(shader, source_code);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            const info = gl.getShaderInfoLog(shader);\r\n            throw new Error(\"Shader compilation error: \"+info);\r\n        }\r\n    \r\n        return shader;\r\n    }\r\n    \r\n    static createProgram(gl, vertexShader, fragmentShader) {\r\n        const program = gl.createProgram();\r\n    \r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const info = gl.getProgramInfoLog(program);\r\n            throw new Error('Could not compile WebGL program:' + info);\r\n        }\r\n    \r\n        return program;\r\n    }\r\n    \r\n    static createBuffer(gl, type, data) {\r\n        if (data.length == 0)\r\n          return null;\r\n    \r\n        if (!(data && data.buffer instanceof ArrayBuffer && data.byteLength !== undefined)) {\r\n          console.warn('Data is not an instance of ArrayBuffer');\r\n          return null;\r\n        }\r\n    \r\n        const buffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(type, buffer);\r\n        gl.bufferData(type, data, gl.STATIC_DRAW);\r\n\r\n        return buffer;\r\n    }\r\n    \r\n\r\n      // refazer essa depois\r\n    static createVAO(gl, ...attributes) {\r\n      if(!(gl instanceof WebGL2RenderingContext)) return;\r\n\r\n        const vao = gl.createVertexArray();\r\n    \r\n        gl.bindVertexArray(vao);\r\n\r\n        let size;\r\n        let type;\r\n    \r\n        for(let attribute of attributes){\r\n          if (attribute.loc != null && attribute.loc != undefined) {\r\n            gl.enableVertexAttribArray(attribute.loc);\r\n            size = attribute.dimension;\r\n            type = gl.FLOAT;\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, attribute.buffer);\r\n            gl.vertexAttribPointer(attribute.loc, size, type, false, 0, 0);\r\n          }\r\n        }\r\n    \r\n        return vao;\r\n    }\r\n}","import { vec3, mat4 } from \"gl-matrix\";\r\nimport GLUtil from \"./gl-util\";\r\n\r\nexport default class Mesh{\r\n    _gl;\r\n\r\n    position = [0.0, 0.0, 0.0];\r\n    rotation = [0.0, 0.0, 0.0];\r\n    scale = [1.0, 1.0, 1.0];\r\n\r\n    static #textureI = 0;\r\n\r\n    #modelMatrix = mat4.create();\r\n\r\n    #attributes = [];\r\n\r\n    #vertShader = null;\r\n    #fragShader = null;\r\n\r\n    _program = null;\r\n\r\n    _primitive;\r\n\r\n    #count;\r\n\r\n    _vaoLoc;\r\n\r\n    #uTexture;\r\n    #texture;\r\n\r\n    #vao_updated = false;\r\n\r\n    useDepthTest = false;\r\n    \r\n    get modelMatrix(){\r\n        this.updateModelMatrix();\r\n        return this.#modelMatrix;\r\n    }\r\n\r\n    addAttribute(name, info, pointDim = 4){\r\n        if(!(info instanceof Array))\r\n            throw new Error(\"The info parameter needs to be a Array.\");\r\n\r\n        info.forEach(val => {\r\n            if(typeof val !== \"number\") \r\n                throw new Error(\"The info array need to be numeric.\");\r\n        });\r\n\r\n        const count = info.length/pointDim;\r\n\r\n        if(!this.#count) this.#count = count;\r\n\r\n        else if(count !== this.#count) \r\n            throw new Error(\"The VBOs need to contain the same number of vertex.\");\r\n\r\n        const f32Array = new Float32Array(info);\r\n\r\n        this.#attributes.push({\r\n            loc: this._gl.getAttribLocation(this._program, name),\r\n            buffer: GLUtil.createBuffer(this._gl, this._gl.ARRAY_BUFFER,f32Array),\r\n            dimension: pointDim\r\n        })\r\n\r\n        this.#vao_updated = false;\r\n    }\r\n\r\n    constructor(gl, vertShaderSrc, fragShaderSrc, primitive){\r\n        this._primitive = primitive;\r\n        \r\n        this._gl = gl;\r\n        //restringir os tipos\r\n\r\n        this.#createShader(vertShaderSrc, fragShaderSrc);\r\n    }\r\n\r\n    #createShader(vertShaderSrc, fragShaderSrc) {\r\n        this.#vertShader = GLUtil.createShader(this._gl, this._gl.VERTEX_SHADER, vertShaderSrc);\r\n        this.#fragShader = GLUtil.createShader(this._gl, this._gl.FRAGMENT_SHADER, fragShaderSrc);\r\n        this._program = GLUtil.createProgram(this._gl, this.#vertShader, this.#fragShader);\r\n    \r\n        this._gl.useProgram(this._program);\r\n    }\r\n\r\n    #createVAO() {\r\n        this._vaoLoc = GLUtil.createVAO(this._gl, ...this.#attributes);\r\n    }\r\n\r\n    updateModelMatrix(){\r\n        mat4.identity(this.#modelMatrix);\r\n\r\n        mat4.translate(this.#modelMatrix, this.#modelMatrix, this.position);\r\n        mat4.rotateX(this.#modelMatrix, this.#modelMatrix, this.rotation[0]);\r\n        mat4.rotateY(this.#modelMatrix, this.#modelMatrix, this.rotation[1]);\r\n        mat4.rotateZ(this.#modelMatrix, this.#modelMatrix, this.rotation[2]);\r\n        mat4.scale(this.#modelMatrix, this.#modelMatrix, this.scale);\r\n    }\r\n\r\n    loadMVP(camera){\r\n        const modelLoc = this._gl.getUniformLocation(this._program, \"model\");\r\n        const mvLoc = this._gl.getUniformLocation(this._program, \"modelView\");\r\n        const mvpLoc = this._gl.getUniformLocation(this._program, \"mvp\");\r\n\r\n        const viewLoc = this._gl.getUniformLocation(this._program, \"view\");\r\n        const viewProjLoc = this._gl.getUniformLocation(this._program, \"viewProjection\");\r\n        const projectionLoc = this._gl.getUniformLocation(this._program, \"projection\");\r\n\r\n        if(modelLoc){\r\n            this._gl.uniformMatrix4fv(modelLoc, false, this.#modelMatrix);\r\n        }else if(mvLoc){\r\n            const mv = mat4.create();\r\n\r\n            if(camera)\r\n                mat4.multiply(mv, camera.viewMatrix, this.#modelMatrix);\r\n            else\r\n                mat4.copy(mv, this.#modelMatrix);\r\n            \r\n            this._gl.uniformMatrix4fv(mvLoc, false, mv);\r\n\r\n        }else if(mvpLoc){\r\n            const mvp = mat4.create();\r\n\r\n            if(camera)\r\n                mat4.multiply(mvp, camera.viewProjection, this.#modelMatrix);\r\n            else\r\n                mat4.copy(mvp, this.#modelMatrix);\r\n                \r\n            this._gl.uniformMatrix4fv(mvpLoc, false, mvp);\r\n        }\r\n\r\n        if(viewLoc)\r\n            this._gl.uniformMatrix4fv(modelLoc, false, camera.viewMatrix);\r\n\r\n        if(projectionLoc)\r\n            this._gl.uniformMatrix4fv(modelLoc, false, camera.projMatrix);\r\n    \r\n        if(viewProjLoc)\r\n            this._gl.uniformMatrix4fv(modelLoc, false, camera.viewProjection);\r\n    }\r\n\r\n    createTex(texData, textureName){\r\n        this.#uTexture = this._gl.getUniformLocation(this._program, textureName);\r\n        this.#texture = this._gl.createTexture();\r\n        this._gl.activeTexture(this._gl[`TEXTURE${Mesh.#textureI}`]);\r\n        this._gl.bindTexture(this._gl.TEXTURE_2D, this.#texture);\r\n\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.NEAREST);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.NEAREST);\r\n\r\n        this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA32F, this._gl.RGBA, this._gl.FLOAT, texData);\r\n\r\n        this._gl.useProgram(this._program);\r\n        this._gl.uniform1i(this.#uTexture, Mesh.#textureI);\r\n\r\n        Mesh.#textureI++;\r\n\r\n        return {tex: this.#texture, index: Mesh.#textureI - 1};\r\n    }\r\n\r\n    setUniformValue(name, value, type){\r\n        const uniformLoc = this._gl.getUniformLocation(this._program, name);\r\n        \r\n        if(uniformLoc === -1)\r\n            throw new Error(\"This uniform doesn't exist in the shader code.\");\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        if(type.startsWith(\"Matrix\"))\r\n            this._gl[\"uniform\"+type](uniformLoc, false, value);\r\n        else\r\n            this._gl[\"uniform\"+type](uniformLoc, value);\r\n    }\r\n\r\n    draw(cam){\r\n        if(!this.#vao_updated){\r\n            this.#vao_updated = true;\r\n            this.#createVAO();\r\n        }\r\n\r\n        this._gl.frontFace(this._gl.CCW);\r\n\r\n        this._gl.enable(this._gl.CULL_FACE);\r\n        this._gl.cullFace(this._gl.BACK);\r\n\r\n        if(this.useDepthTest){\r\n            this._gl.enable(this._gl.DEPTH_TEST);\r\n            this._gl.depthFunc(this._gl.LESS);\r\n        }\r\n\r\n        this.updateModelMatrix();\r\n\r\n        this._gl.bindVertexArray(this._vaoLoc);\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        this.loadMVP(cam);\r\n\r\n        this._gl.drawArrays(this._primitive, 0, this.#count);\r\n\r\n        this._gl.disable(this._gl.CULL_FACE);\r\n\r\n        if(this.useDepthTest)\r\n            this.gl.disable(this._gl.DEPTH_TEST);\r\n    }\r\n\r\n    static changeTex(gl, {tex, index}, texData){\r\n        gl.bindTexture(gl.TEXTURE_2D, tex);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, gl.RGBA, gl.FLOAT, texData);\r\n    }\r\n}\r\n","import Mesh from \"../webgl/mesh\";\r\nimport imgVert from \"../shaders/imageVert\";\r\nimport imgFrag from \"../shaders/imageFrag\";\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\n\r\nexport default class ImageGL{\r\n    #mesh;\r\n\r\n    #width;\r\n    #height;\r\n\r\n    set scaleX(x){\r\n        if(x<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[0] = x;\r\n    }\r\n\r\n    set scaleY(y){\r\n        if(y<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[1] = y; \r\n    }\r\n\r\n    set positionX(x){\r\n        this.#mesh.position[0] = x;\r\n    }\r\n\r\n    set positionY(y){\r\n        this.#mesh.position[1] = y;    \r\n    }\r\n\r\n    set depth(z){\r\n        this.#mesh.position[2] = z;\r\n    }\r\n\r\n    set rotation(theta){\r\n        this.#mesh.rotation[2] = theta    \r\n    }\r\n\r\n    set scale(vec){\r\n        if(!(vec instanceof Array) || vec.length !== 2)\r\n            throw new Error(\"scale need to be a vector with two positions.\");\r\n\r\n        this.#mesh.scale = vec3.fromValues(vec[0], vec[1], 1)\r\n    }\r\n\r\n    set opacity(alpha){\r\n        this.#mesh.setUniformValue(\"alpha\", alpha, \"1f\");\r\n    }\r\n\r\n    get positionX(){\r\n        return this.#mesh.position[0];\r\n    }\r\n    \r\n    get positionY(){\r\n        return this.#mesh.position[1];\r\n    }\r\n\r\n    async init(gl, src){\r\n        this.#mesh = new Mesh(gl, imgVert, imgFrag, gl.TRIANGLES);\r\n\r\n        const size = await this.#loadTex(src);\r\n\r\n        const data = this.#createRect(...size);\r\n\r\n        this.#mesh.addAttribute(\"position\", data.coords);\r\n        this.#mesh.addAttribute(\"texCoord\", data.texCoords, 2);\r\n\r\n        this.opacity = 1.0;\r\n    }\r\n\r\n    static async loadImage(url){\r\n        return new  Promise(resolve => {\r\n            const image = new Image();\r\n            image.addEventListener('load', () => {\r\n                resolve(image);\r\n            });\r\n            image.src = url; \r\n        });\r\n    }\r\n\r\n    async #loadTex(imgSrc){\r\n        const img = await ImageGL.loadImage(imgSrc);\r\n        await img.decode();\r\n        const imageBitmap = await createImageBitmap(img);\r\n\r\n        this._tex = this.#mesh.createTex(img, \"uTexture\");\r\n\r\n        return [imageBitmap.width, imageBitmap.height];\r\n    }\r\n\r\n    #createRect(width, height){\r\n        const proportion = width/height;\r\n\r\n        let newWidth = 1.0;\r\n        let newHeight = 1.0;\r\n\r\n        (proportion<1)? newWidth*=proportion: newHeight/=proportion;\r\n\r\n        this.#width = newWidth;\r\n        this.#height = newHeight;\r\n\r\n        const v1 = [-newWidth, -newHeight, 0.0, 1.0];\r\n        const v2 = [newWidth, -newHeight, 0.0, 1.0];\r\n        const v3 = [newWidth, newHeight, 0.0, 1.0];\r\n        const v4 = [-newWidth, newHeight, 0.0, 1.0];\r\n\r\n        const coords = [\r\n            ...v1, ...v2, ...v3,\r\n            ...v1, ...v3, ...v4\r\n        ]\r\n\r\n        const texCoords = [\r\n            0, 1, 1, 1, 1, 0,\r\n            0, 1, 1, 0, 0, 0\r\n        ]\r\n\r\n        return {\r\n            coords,\r\n            texCoords\r\n        }\r\n    }\r\n\r\n    pointCollision(x, y, camera){\r\n        const point = [x, y, 0, 1];\r\n\r\n        const mvp = mat4.create();\r\n        mat4.copy(mvp, this.#mesh.modelMatrix);\r\n\r\n        if(camera){\r\n            const viewProj = camera.viewProjection;\r\n            mat4.multiply(mvp, viewProj, mvp);\r\n        }\r\n\r\n        const inverse = mat4.create();\r\n\r\n        mat4.invert(inverse, mvp);\r\n\r\n        const pointT = multiplyMatWithVec(inverse, point);\r\n\r\n        return (Math.abs(pointT[0])<this.#width && Math.abs(pointT[1])<this.#height);\r\n    }\r\n\r\n    draw(camera){\r\n        if(this.#mesh) this.#mesh.draw(camera);\r\n    }\r\n}\r\n\r\nfunction multiplyMatWithVec(mat, vec){\r\n    const out = new Array(vec.length).fill(0);\r\n\r\n    if(Math.round(vec.length**2) !== mat.length)\r\n        return;\r\n\r\n    for(let i = 0; i<vec.length; i++)\r\n        for(let j = 0; j<mat.length; j+=4)\r\n            out[i]+=mat[j+i]*vec[j/4];\r\n\r\n    return out;\r\n}","export default `#version 300 es\r\n    precision highp float;\r\n\r\n    uniform mat4 mvp;\r\n\r\n    in vec4 position;\r\n    in vec2 texCoord;\r\n\r\n    out vec2 fTexCoord;\r\n\r\n    void main() {\r\n        gl_Position  = mvp * position;\r\n        fTexCoord = texCoord;\r\n    }\r\n`","export default `#version 300 es\r\n    precision highp float;\r\n    \r\n    in vec2 fTexCoord;\r\n\r\n    uniform sampler2D uTexture;\r\n    uniform float alpha;\r\n\r\n    out vec4 color;\r\n\r\n    void main() {\r\n        color = texture(uTexture, fTexCoord);\r\n\r\n        if(color.a < 0.2) discard;\r\n\r\n        color *= alpha;\r\n    }\r\n`","class Vertex{\r\n    attributes = new Map();\r\n    id;\r\n    hEdge;\r\n\r\n    constructor(id){\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass HalfEdge{\r\n    opositte;\r\n    next;\r\n    vertex;\r\n\r\n    constructor(vertex){\r\n        this.vertex = vertex;\r\n    }\r\n}\r\n\r\nclass Face{\r\n    hEdge;\r\n\r\n    constructor(hEdge){\r\n        this.hEdge = hEdge;\r\n    }\r\n}\r\n\r\nexport default class HalfEdgeDS{\r\n    #hEdges = [];\r\n    #vertices = [];\r\n    #faces = [];\r\n\r\n    constructor(indexes){\r\n        for(let i = 0; i < indexes.length; i += 3){\r\n            const i1 = indexes[i];\r\n            const i2 = indexes[i+1];\r\n            const i3 = indexes[i+2];\r\n\r\n            if(!this.#vertices[i1]) this.#vertices[i1] = new Vertex(i1);\r\n            if(!this.#vertices[i2]) this.#vertices[i2] = new Vertex(i2);\r\n            if(!this.#vertices[i3]) this.#vertices[i3] = new Vertex(i3);\r\n\r\n            const h1 = new HalfEdge(this.#vertices[i1]);\r\n            const h2 = new HalfEdge(this.#vertices[i2]);\r\n            const h3 = new HalfEdge(this.#vertices[i3]);\r\n\r\n            h1.next = h2;\r\n            h2.next = h3;\r\n            h3.next = h1;\r\n\r\n            const face = new Face(h1);\r\n\r\n            this.#hEdges[i] = h1;\r\n            this.#hEdges[i+1] = h2;\r\n            this.#hEdges[i+2] = h3;\r\n\r\n            this.#faces[Math.round(i/3)] = face;\r\n        }\r\n\r\n        this.setOposittes();\r\n    }\r\n\r\n    setOposittes(){\r\n        for(let hEdge of this.#hEdges){\r\n            const v0 = hEdge.vertex;\r\n            const v1 = hEdge.next.vertex;\r\n\r\n            if(!v0.hEdge) v0.hEdge = hEdge;\r\n\r\n            if(hEdge.opositte) continue;\r\n\r\n            for(let hEdge1 of this.#hEdges){\r\n                if(hEdge1.vertex === v1 && hEdge1.next.vertex === v0){\r\n                    hEdge.opositte = hEdge1;\r\n                    hEdge1.opositte = hEdge;\r\n                    break;    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setAttribute(values, vertlen, name){\r\n        if(values.length/vertlen!==this.#vertices.length)\r\n            throw new Error(`Mesh haves ${this.#vertices.length} vertices, but only ${values.length/vertlen} were given.`)\r\n\r\n        for(let i = 0; i<values.length; i+=vertlen){\r\n            const attrib = values.slice(i, i+vertlen);\r\n            this.#vertices[Math.round(i/vertlen)].attributes.set(name, attrib);\r\n        }\r\n    }\r\n\r\n    createVBOs(){\r\n        const attributes = new Map();\r\n        const indexes = [];\r\n\r\n        for(let vertex of this.#vertices){\r\n            for(let name of vertex.attributes.keys()){\r\n\r\n                if(!attributes.get(name)) attributes.set(name, []);\r\n\r\n                attributes.get(name).push(...vertex.attributes.get(name));\r\n            }\r\n        }\r\n\r\n        for(let hEdge of this.#hEdges){\r\n            indexes.push(hEdge.vertex.id);\r\n        }\r\n\r\n        return {attributes, indexes, count: this.#vertices.length};\r\n    }\r\n}\r\n","import ImageGL from \"../view/image\";\r\nimport GLUtil from \"./gl-util\";\r\nimport HalfEdgeDS from \"./half-edge\";\r\nimport Mesh from \"./mesh\";\r\nimport { mat4 } from \"gl-matrix\";\r\n\r\nexport default class IndexedMeshT extends Mesh{\r\n    #hEdge;\r\n    #indicesLoc = -1;\r\n    #border;\r\n\r\n    #vao_updated = false;\r\n\r\n    set border(border){\r\n        this.#border = border;\r\n    }\r\n\r\n    constructor(gl, vertShaderSrc, fragShaderSrc, indexes){\r\n        super(gl, vertShaderSrc, fragShaderSrc, gl.TRIANGLES);\r\n\r\n        this.#hEdge = new HalfEdgeDS(indexes);\r\n    }\r\n\r\n    addAttribute(name, info, pointDim = 4){\r\n        if(!(info instanceof Array))\r\n            throw new Error(\"The info parameter needs to be a Array.\");\r\n\r\n        info.forEach(val => {\r\n            if(typeof val !== \"number\") \r\n                throw new Error(\"The info array need to be numeric.\");\r\n        });\r\n\r\n        if(this._gl.getAttribLocation(this._program, name)===-1)\r\n            throw new Error(`the attribute ${name} doesn't exists in the shader code.`);\r\n\r\n\r\n        this.#hEdge.setAttribute(info, pointDim, name);  \r\n        \r\n        this.#vao_updated = false;\r\n    }\r\n\r\n    #createVAO() {\r\n        const vbos = this.#hEdge.createVBOs();\r\n\r\n        const attributes = Array.from(vbos.attributes.entries()).map(entry => {\r\n\r\n            return {\r\n                loc: this._gl.getAttribLocation(this._program, entry[0]),\r\n                buffer: GLUtil.createBuffer(this._gl, this._gl.ARRAY_BUFFER, new Float32Array(entry[1])),\r\n                dimension: Math.round(entry[1].length/vbos.count)\r\n            }\r\n        })\r\n\r\n        this._vaoLoc = GLUtil.createVAO(this._gl, ...attributes);\r\n        this.#indicesLoc = GLUtil.createBuffer(this._gl, this._gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(vbos.indexes));\r\n\r\n        this._count = vbos.indexes.length;\r\n        this.#vao_updated = true;\r\n    }\r\n\r\n    draw(cam){\r\n        if(!this.#vao_updated)    \r\n            this.#createVAO();\r\n\r\n        if(this.useDepthTest){\r\n            this._gl.enable(this._gl.DEPTH_TEST);\r\n            this._gl.depthFunc(this._gl.LESS);\r\n        }\r\n        \r\n        this._gl.frontFace(this._gl.CCW);\r\n\r\n        this._gl.enable(this._gl.CULL_FACE);\r\n        this._gl.cullFace(this._gl.BACK);\r\n\r\n        this._gl.bindVertexArray(this._vaoLoc);\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this.#indicesLoc);\r\n\r\n        const modelLoc = this._gl.getUniformLocation(this._program, \"model\");\r\n        const mvLoc = this._gl.getUniformLocation(this._program, \"modelView\");\r\n        const mvpLoc = this._gl.getUniformLocation(this._program, \"mvp\");\r\n\r\n        if(modelLoc){\r\n            this._gl.uniformMatrix4fv(modelLoc, false, this.modelMatrix);\r\n        }else if(mvLoc){\r\n            const mv = mat4.create();\r\n            mat4.multiply(mv, cam.viewMatrix, this.modelMatrix);\r\n            this._gl.uniformMatrix4fv(modelLoc, false, mv);\r\n        }else if(mvpLoc){\r\n            const mvp = mat4.create();\r\n            mat4.multiply(mvp, cam.viewProjection, this.modelMatrix);\r\n            this._gl.uniformMatrix4fv(modelLoc, false, mvp);\r\n        }\r\n        \r\n        this._gl.drawElements(this._primitive, this._count, this._gl.UNSIGNED_INT, 0);\r\n\r\n        this._gl.disable(this._gl.CULL_FACE);\r\n\r\n        if(this.useDepthTest)\r\n            this._gl.disable(this._gl.DEPTH_TEST);\r\n    }\r\n\r\n    pointCollision(x, y, camera){\r\n        //colocar o throw dps\r\n        if(!this.#border) return false;\r\n\r\n        return this.#border.pointCollision(x, y, camera, this);\r\n    }\r\n\r\n    get drawBorder(){\r\n        return this.#border.draw();\r\n    }\r\n\r\n    static async loadMeshFromObj(path, gl, vertShader, fragShader, texturePath){\r\n        const obj = await fetch(path);\r\n        const text = await obj.text();\r\n\r\n        const border = new Map();\r\n    \r\n        const lines = text.split(\"\\n\");\r\n\r\n        const vertices = [];\r\n        const normals = [];\r\n        const texCoords = [];\r\n        const indexes = [];\r\n\r\n        let borderIndex = 0;\r\n\r\n        for(let line of lines){\r\n            if(line.startsWith(\"vn\")){\r\n                const values = line.replace(\"vn \", \"\").split(\" \").map(Number.parseFloat);\r\n                normals.push(...values, 1);\r\n\r\n                const d = Math.sqrt(dotProduct(values, values));\r\n\r\n                if(Math.abs(dotProduct(values, [0, 0, 1])/d)<0.5){\r\n                    const key = values.join(\",\");\r\n                    if(!border.get(key)) border.set(key, borderIndex);\r\n                }\r\n\r\n                borderIndex++;\r\n            }else if(line.startsWith(\"vt\")){\r\n                const values = line.replace(\"vt \", \"\").split(\" \").map(Number.parseFloat);\r\n                texCoords.push(...values);\r\n            }else if(line.startsWith(\"v\")){\r\n                const values = line.replace(\"v \", \"\").split(\" \").map(Number.parseFloat);\r\n                vertices.push(...values, 1);\r\n            }else if(line.startsWith(\"f\")){\r\n                const values = line.replace(\"f \", \"\").split(\" \").map(val => {\r\n                    const init = val.indexOf(\"/\");\r\n                    const vIndex = val.slice(0, init);\r\n                    return Number.parseInt(vIndex)-1;\r\n                });\r\n                indexes.push(...values);\r\n            }\r\n\r\n        }\r\n\r\n        const border1 = new Border(border, vertices, gl);\r\n\r\n        const mesh = new IndexedMeshT(gl, vertShader, fragShader, indexes);\r\n        mesh.addAttribute(\"position\", vertices);\r\n        mesh.addAttribute(\"normal\", normals);\r\n\r\n        mesh.useDepthTest = true;\r\n\r\n        if(texCoords.length!==0){\r\n            if(!texturePath)\r\n                throw new Error(\"This mesh need to a texture path\");\r\n\r\n            mesh.addAttribute(\"texCoord\", texCoords, 3);\r\n\r\n            const image = await ImageGL.loadImage(texturePath);\r\n\r\n            mesh.createTex(image, \"uTexture\");\r\n        }\r\n\r\n        mesh.border = border1;\r\n\r\n        return mesh;\r\n    }\r\n}\r\n\r\nconst dotProduct = (v1, v2) =>{\r\n    return v1.reduce((ac, curr, i)=>ac+=curr*v2[i], 0);\r\n}\r\n\r\nclass Border{\r\n    #borderMap;\r\n    #coords;\r\n    #lastClick;\r\n    #min;\r\n    #max;\r\n\r\n    constructor(border, coords){\r\n        this.#borderMap = border;\r\n        this.#coords = coords;\r\n\r\n        let min = Infinity;\r\n        let max = -Infinity;\r\n\r\n        for(let i = 0; i<this.#coords.length; i+=4){\r\n            if(this.#coords[i+2]<min) min = this.#coords[i+2];\r\n            if(this.#coords[i+2]>max) max = this.#coords[i+2];\r\n        }\r\n\r\n        this.#min = min;\r\n        this.#max = max;\r\n    }\r\n\r\n    pointCollision(x, y, camera, mesh){\r\n        //return this.#pointCollision(x, y, 0, camera, mesh);\r\n\r\n        return this.#pointCollision(x, y, this.#min, camera, mesh) || \r\n            this.#pointCollision(x, y, this.#max, camera, mesh);\r\n    }\r\n\r\n    #pointCollision(x, y, z, camera, mesh){\r\n        const point = [x, y, z, 1];\r\n    \r\n        const mvp = mat4.create();\r\n        mat4.copy(mvp, mesh.modelMatrix);\r\n    \r\n        if(camera){\r\n            const viewProj = camera.viewMatrix;\r\n            mat4.multiply(mvp, viewProj, mvp);\r\n        }\r\n    \r\n        const inverse = mat4.create();\r\n    \r\n        mat4.invert(inverse, mvp);\r\n    \r\n        let pointT = Border.multiplyMatWithVec(inverse, point);\r\n\r\n        console.log(point, pointT);\r\n    \r\n        let collided = this.#collide(pointT);\r\n\r\n        if(collided) this.#lastClick = point;\r\n\r\n        return collided;\r\n    }\r\n\r\n    #collide(point){\r\n        let first;\r\n        let prev;\r\n\r\n        let intersecsCount = 0;\r\n        console.log(\"collide\");\r\n        console.log(point);\r\n\r\n        for(let entry of this.#borderMap.entries()){\r\n            const i = entry[1]*4;\r\n            const coord = [this.#coords[i], this.#coords[i+1], this.#coords[i+2]];\r\n\r\n            if(!first){\r\n                first = coord;\r\n                prev = coord;\r\n                continue;\r\n            }\r\n\r\n            const x = [coord[0], prev[0]];\r\n            x.sort();\r\n            const [minX, maxX] = x;\r\n            \r\n            const y = [coord[1], prev[1]];\r\n            y.sort();\r\n            const [minY, maxY] = y;\r\n\r\n            const ang = (minY-maxY)/(minX-maxX);\r\n            const coefLin = minY - minX*ang;\r\n\r\n            if(point[1] <= maxY && point[1] >= minY && point[0] <= (point[1] - coefLin)/ang) {\r\n                intersecsCount++;\r\n                console.log(prev, coord, (point[1]-coefLin)/ang);\r\n\r\n            }\r\n\r\n            prev = coord;\r\n        }\r\n\r\n        const maxX = Math.max(first[0], prev[0]);\r\n            \r\n        const y = [first[1], prev[1]];\r\n        y.sort();\r\n        const [minY, maxY] = y;\r\n\r\n        if(point[1] <= maxY && point[1] >= minY && point[0] <= maxX) intersecsCount++;\r\n\r\n        return (intersecsCount % 2 === 1);\r\n    }\r\n\r\n    draw(){\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = 1000;\r\n        canvas.height = 1000;\r\n        canvas.style.backgroundColor = \"rgb(100, 0, 0)\";\r\n\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.beginPath();\r\n\r\n        let first;\r\n\r\n        for(let entry of this.#borderMap.entries()){\r\n            const i = entry[1]*4;\r\n            const coord = [this.#coords[i], this.#coords[i+1], this.#coords[i+2]];\r\n\r\n            if(!first) {\r\n                first = coord;\r\n                ctx.moveTo(coord[0]*500+250, (-coord[1]+1.0)*500);\r\n            } else ctx.lineTo(coord[0]*500+250, (-coord[1]+1.0)*500);\r\n\r\n        }\r\n        ctx.lineTo(first[0]*500+250, (-first[1]+1.0)*500)\r\n        ctx.stroke();\r\n\r\n        if(this.#lastClick)\r\n            ctx.fillRect(this.#lastClick[0]*500+250, (-this.#lastClick[1]+1.0)*500, 5, 5);\r\n            \r\n\r\n        return canvas;\r\n    }\r\n\r\n    static multiplyMatWithVec(mat, vec){\r\n        const out = new Array(vec.length).fill(0);\r\n    \r\n        if(Math.round(vec.length**2) !== mat.length)\r\n            return;\r\n    \r\n        for(let i = 0; i<vec.length; i++)\r\n            for(let j = 0; j<mat.length; j+=4)\r\n                out[i]+=mat[j+i]*vec[j/4];\r\n\r\n        return out;\r\n    }\r\n}","export default \r\n    `#version 300 es\r\n    precision highp float;\r\n\r\n    uniform mat4 model;\r\n    uniform mat4 view;\r\n    uniform mat4 projection;\r\n    uniform vec4 color;\r\n\r\n    in vec4 position;\r\n    in vec4 normal;\r\n\r\n    out vec4 fPos;\r\n    out vec4 fColor;\r\n    out vec4 fNormal;\r\n\r\n    void main() {\r\n        gl_Position = (projection*view*model) * position;\r\n        gl_Position /= gl_Position.w;\r\n        fColor = color;\r\n        fPos = position;\r\n        fNormal = normal;\r\n    }\r\n`","export default \r\n    `#version 300 es\r\n    precision highp float;\r\n    \r\n    uniform mat4 model;\r\n    uniform mat4 view;\r\n    uniform mat4 projection;\r\n\r\n    uniform vec3 amb_c;\r\n    uniform vec3 dif_c;\r\n    uniform vec3 esp_c;\r\n    uniform vec3 pos;\r\n    uniform float amb_k;\r\n    uniform float dif_k;\r\n    uniform float esp_k;\r\n    uniform float esp_p;\r\n\r\n    in vec4 fColor;\r\n    in vec4 normal;\r\n    in vec4 fPos;\r\n    in vec4 fNormal;\r\n\r\n    out vec4 color;\r\n\r\n    void main() {\r\n        mat4 modelView = view*model;\r\n\r\n        vec3 lightPos = (view * vec4(pos, 1.0)).xyz;\r\n        vec3 pos = -(modelView * fPos).xyz;\r\n\r\n        vec3 vNormal = normalize(inverse(transpose(modelView)) * fNormal).xyz;\r\n        vec3 vDistance = normalize(pos - lightPos);\r\n\r\n        vec3 normalPos = normalize(pos);\r\n\r\n        vec3 halfVector= normalize(vDistance + normalPos);\r\n\r\n        vec3 amb = amb_k * amb_c;\r\n\r\n        vec3 diff = max(dot(vNormal, vDistance), 0.0) * dif_k * dif_c;\r\n\r\n        vec3 spec = max(pow(dot(vNormal, halfVector), esp_p), 0.0) * esp_c * esp_k;\r\n\r\n        vec3 color3 = vec3(fColor);\r\n        \r\n        color3 = 0.5*color3 + 0.5*(diff + amb + spec);\r\n\r\n        color = vec4(color3, 1.0);\r\n    }\r\n`","import Mesh from \"../webgl/mesh\";\r\nimport ImageGL from \"./image\";\r\n\r\nexport default class CanvasImage extends ImageGL{\r\n    #canvas;\r\n\r\n    async init(gl, canvasDimension = 1000){\r\n        const canvas = document.createElement(\"canvas\");\r\n        const image = canvas.toDataURL(\"image/png\");\r\n\r\n        [canvas.width, canvas.height] = [canvasDimension, canvasDimension];\r\n\r\n        await super.init(gl, image);\r\n        this.#canvas = canvas;\r\n    }\r\n\r\n    async update(drawCanvas = ()=>{}, gl){\r\n        const ctx = this.#canvas.getContext(\"2d\");\r\n\r\n        drawCanvas(ctx);\r\n\r\n        const image = this.#canvas.toDataURL(\"image/png\");\r\n        const imageElement = await ImageGL.loadImage(image);\r\n    \r\n        Mesh.changeTex(gl, this._tex, imageElement);\r\n    }\r\n\r\n}","import { mat4 } from \"gl-matrix\";\r\n\r\nexport default class Camera{\r\n    #view_matrix = mat4.create();\r\n    #proj_matrix = mat4.create();\r\n    #viewProjMatrix = mat4.create();\r\n\r\n    camPosition = [0,0,1];\r\n    lookDirection = [0,0,0];\r\n    upDirection = [0,1,0];\r\n\r\n    left = -4.0;\r\n    right = 4.0;\r\n    bottom = -4.0;\r\n    top = 4.0;\r\n    near = 1.0;\r\n    far = 9.0;\r\n\r\n    fovy = Math.PI/2;\r\n    aspect;\r\n\r\n    constructor(canvas){\r\n        this.aspect = canvas.width / canvas.height;\r\n    }\r\n\r\n    #typeOfProjection = \"perspective\";\r\n\r\n    set projectionType(type){\r\n        if(type !== \"orthogonal\" && type !== \"perspective\") \r\n            throw new Error(\"Invalid type of projection.\");\r\n\r\n        this.#typeOfProjection = type;\r\n    }\r\n\r\n    get viewMatrix(){\r\n        this.#updateViewMatrix();\r\n        return this.#view_matrix;\r\n    }\r\n\r\n    get projMatrix(){\r\n        this.#updateProjMatrix();\r\n        return this.#proj_matrix;\r\n    }\r\n\r\n    #updateViewMatrix(){\r\n        mat4.identity(this.#view_matrix);\r\n        mat4.lookAt(this.#view_matrix, this.camPosition, this.lookDirection, this.upDirection);\r\n    }\r\n\r\n    #updateProjMatrix(){\r\n        mat4.identity(this.#proj_matrix);\r\n        if(this.#typeOfProjection === \"perspective\")\r\n            mat4.perspective(this.#proj_matrix, this.fovy, this.aspect, this.near, this.far);\r\n        else\r\n            mat4.ortho(this.#proj_matrix, this.left*this.aspect, this.right*this.aspect, this.bottom, this.top, this.left, this.right);\r\n    }\r\n\r\n    get viewProjection(){\r\n        this.#updateViewMatrix();\r\n        this.#updateProjMatrix();\r\n        mat4.identity(this.#viewProjMatrix);\r\n        mat4.multiply(this.#viewProjMatrix, this.#proj_matrix, this.#view_matrix);\r\n\r\n        return this.#viewProjMatrix;\r\n    }\r\n}","export default class Light{\r\n    ambColor = [0.0, 0.0, 0.0];\r\n    ambK = 3.0;\r\n\r\n    difColor = [0.3, 0.3, 0.3];\r\n    difK = 4.0;\r\n\r\n    espColor = [1.0, 1.0, 1.0];\r\n    espK = 3.0;\r\n    espExp = 20.0;\r\n\r\n    pos;\r\n\r\n    constructor(pos){\r\n        this.pos = pos;\r\n    }\r\n\r\n    createUniforms(mesh){\r\n        mesh.setUniformValue(\"amb_c\", this.ambColor, \"3fv\");\r\n        mesh.setUniformValue(\"amb_k\", this.ambK, \"1f\");\r\n        mesh.setUniformValue(\"dif_c\", this.difColor, \"3fv\");\r\n        mesh.setUniformValue(\"dif_k\", this.difK, \"1f\");\r\n        mesh.setUniformValue(\"esp_c\", this.espColor, \"3fv\");\r\n        mesh.setUniformValue(\"esp_k\", this.espK, \"1f\");\r\n        mesh.setUniformValue(\"esp_p\", this.espExp, \"1f\");\r\n    }\r\n\r\n}","import Camera from \"./camera\";\r\nimport Light from \"./light\";\r\nimport Mesh from \"./mesh\";\r\n\r\nexport default class Scene{\r\n    #drawnables = [];\r\n    #light;\r\n    #camera;\r\n\r\n    get camera(){\r\n        return this.#camera;\r\n    }\r\n\r\n    constructor(gl, clearColor = [0.0, 0.0, 0.0, 1.0]){\r\n        if(!(gl instanceof WebGL2RenderingContext))\r\n            return;\r\n\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n        if(!clearColor || !clearColor.length || clearColor.length !== 4)\r\n            throw new Error(\"The clear color need to be a array with 4 floats\");\r\n\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        this.gl = gl;\r\n    }\r\n\r\n    createCamera(canvas){\r\n        this.#camera = new Camera(canvas);\r\n    }\r\n\r\n    createLight(position){\r\n        this.#light = new Light(position);\r\n    }\r\n\r\n    appendElement(...drawnables){\r\n        drawnables.forEach(drawnable => {\r\n            if(!drawnable.draw)\r\n                throw new Error(\"Element need to have a draw function\");\r\n\r\n            this.#drawnables.push(drawnable);\r\n\r\n            if(this.#light && drawnable instanceof Mesh) this.#light.createUniforms(drawnable);\r\n        });\r\n    }\r\n\r\n    draw(){\r\n        for(let element of this.#drawnables){\r\n            element.draw(this.#camera);\r\n        }\r\n    }\r\n\r\n}","import ImageGL from \"./view/image\";\r\nimport IndexedMeshT from \"./webgl/indexed-mesh\";\r\nimport countryVert from \"./shaders/countryVert\";\r\nimport phongFrag from \"./shaders/phongFrag\";\r\nimport CanvasImage from \"./view/canvasImage\";\r\nimport Scene from \"./webgl/scene\";\r\n\r\nclass Game{\r\n    #menuScene;\r\n    #gameScene;\r\n    #guiScene;\r\n\r\n    #scale = 4.5;\r\n\r\n    #inGame = false;\r\n\r\n    static async build(canvas){\r\n        const game = new Game();\r\n        await game.init(canvas);\r\n\r\n        return game;\r\n    }\r\n\r\n    async init(canvas){\r\n        this.gl = canvas.getContext(\"webgl2\");\r\n        await this.#createMenuScene();\r\n        //Depois talvez carregar o jogo apenas quando for dado o play\r\n        await this.#createGameScreen();\r\n    }\r\n\r\n    async #createMenuScene(){\r\n        this.#menuScene = new Scene(this.gl);\r\n\r\n        const background = new ImageGL();\r\n        await background.init(this.gl, \"./assets/menu/fundo.jpg\");\r\n\r\n        const logoWar = new ImageGL();\r\n        await logoWar.init(this.gl, \"./assets/menu/logo_war.png\");\r\n\r\n        const playButton = new ImageGL();\r\n        await playButton.init(this.gl, \"./assets/menu/play_button.png\");\r\n\r\n        const settingsButton = new ImageGL();\r\n        await settingsButton.init(this.gl, \"./assets/menu/settings_button.png\");\r\n        \r\n        const maxButton = new ImageGL();\r\n        await maxButton.init(this.gl, \"./assets/menu/max_button.png\");\r\n\r\n        //scales\r\n        background.scaleY = 1.85\r\n        logoWar.scale = [0.35, 0.56] \r\n        playButton.scale = [0.15, 0.26]\r\n        settingsButton.scale = [0.046, 0.08]  \r\n        maxButton.scale = [0.046, 0.08]  \r\n\r\n        //position\r\n        logoWar.positionY = 0.25\r\n        \r\n        playButton.positionY = -0.55\r\n        \r\n        settingsButton.positionX = 0.9\r\n        settingsButton.positionY = 0.8\r\n\r\n        this.#menuScene.appendElement(background, logoWar, playButton, settingsButton);\r\n\r\n        this.gl.canvas.addEventListener(\"click\", e=>{\r\n            // e.clientX e e.clientY são a posição do mouse\r\n    \r\n            const point = Game.mapClickInCanvas(e.clientX, e.clientY, this.gl.canvas);\r\n    \r\n            if(playButton.pointCollision(...point)){\r\n                this.#inGame = true;\r\n            }\r\n    \r\n        })\r\n    }\r\n\r\n    async #createGameScreen(){\r\n        //init\r\n        //const mapa = new ImageGL();\r\n        //await mapa.init(this.gl, \"./assets/mapa.jpg\");\r\n\r\n        //mapa.scale = [2.7, 2.7];\r\n\r\n        const gameScreen = new GameScreen();\r\n        await gameScreen.init(this.gl);\r\n\r\n        const show_cards = new ShowCards();\r\n        await show_cards.init(this.gl);\r\n\r\n        const fortify = new Fortify();\r\n        await fortify.init(this.gl);\r\n    \r\n        //South America\r\n        const brasil = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/south_america/brasil.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        brasil.scale = [this.#scale, this.#scale, 1];\r\n    \r\n        const argentina = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/south_america/argentina.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        argentina.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const chile = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/south_america/chile.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        chile.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const venezuela = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/south_america/venezuela.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        venezuela.scale = [this.#scale, this.#scale, 1];\r\n\r\n        //North America\r\n        const mexico = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/north_america/mexico.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        mexico.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const california = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/north_america/california.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        california.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const nova_york = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/north_america/nova_york.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        nova_york.scale = [this.#scale, this.#scale, 1];\r\n    \r\n        const ottawa = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/north_america/ottawa.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        ottawa.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const labrador = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/north_america/labrador.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        labrador.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const vancouver = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/north_america/vancouver.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        vancouver.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const alaska = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/north_america/alaska.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        alaska.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const mackenzie = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/north_america/mackenzie.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        mackenzie.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const groelandia = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/north_america/groelandia.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        groelandia.scale = [this.#scale, this.#scale, 1];\r\n\r\n        //Africa\r\n        const africa_sul = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/africa/africa_sul.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        africa_sul.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const argelia = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/africa/argelia.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        argelia.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const congo = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/africa/congo.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        congo.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const egito = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/africa/egito.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        egito.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const madagascar = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/africa/madagascar.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        madagascar.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const sudao = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/africa/sudao.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        sudao.scale = [this.#scale, this.#scale, 1];\r\n\r\n        //Oceania\r\n        const australia = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/oceania/australia.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        australia.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const borneu = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/oceania/borneu.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        borneu.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const nova_guine = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/oceania/nova_guine.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        nova_guine.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const sumatra = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/oceania/sumatra.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        sumatra.scale = [this.#scale, this.#scale, 1];\r\n\r\n        //Asia\r\n        const aral = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/aral.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        aral.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const china = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/china.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        china.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const dudinka = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/dudinka.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        dudinka.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const india = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/india.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        india.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const japao = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/japao.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        japao.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const mongolia = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/mongolia.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        mongolia.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const omek = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/omek.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        omek.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const oriente_medio = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/oriente_medio.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        oriente_medio.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const siberia = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/siberia.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        siberia.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const tchita = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/tchita.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        tchita.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const vietna = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/vietna.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        vietna.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const vladvostok = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/asia/vladvostok.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        vladvostok.scale = [this.#scale, this.#scale, 1];\r\n\r\n        //Europa\r\n        const alemanha = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/europa/alemanha.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        alemanha.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const franca = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/europa/franca.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        franca.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const inglaterra = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/europa/inglaterra.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        inglaterra.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const islandia = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/europa/islandia.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        islandia.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const moscou = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/europa/moscou.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        moscou.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const polonia = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/europa/polonia.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        polonia.scale = [this.#scale, this.#scale, 1];\r\n\r\n        const suecia = await IndexedMeshT.loadMeshFromObj(\r\n            \"./assets/meshes/europa/suecia.obj\", \r\n            this.gl, countryVert, phongFrag\r\n        );\r\n        suecia.scale = [this.#scale, this.#scale, 1];\r\n\r\n        this.#gameScene = new Scene(this.gl);\r\n        this.#gameScene.createCamera(canvas);\r\n        this.#gameScene.camera.camPosition[2] = 1.8;\r\n        this.#gameScene.camera.camPosition[1] = -0.3;\r\n        this.#gameScene.createLight([1.0, 0.0, 0.3]);\r\n\r\n        this.#guiScene = new Scene(this.gl);\r\n    \r\n        const cImage = new CanvasImage();\r\n        await cImage.init(this.gl);\r\n    \r\n        await cImage.update(ctx =>{\r\n            if (!(ctx instanceof CanvasRenderingContext2D)) return\r\n    \r\n            ctx.fillStyle = \"white\";\r\n    \r\n            ctx.ellipse(500, 500, 400, 500, 0, 0, Math.PI*2);\r\n    \r\n            ctx.lineWidth = 100;\r\n    \r\n            ctx.stroke();\r\n    \r\n            ctx.font = \"600px Arial\";\r\n            ctx.fillText(\"1\", 320, 600);\r\n        }, this.gl);\r\n    \r\n        cImage.scale = [0.1, 0.1];\r\n        cImage.positionY = 0.2;\r\n    \r\n        this.#gameScene.appendElement(brasil, argentina, chile, venezuela, mexico, california, nova_york, ottawa, labrador, vancouver, alaska, mackenzie, groelandia, africa_sul, argelia, congo, egito, madagascar, sudao, australia, borneu, nova_guine, sumatra, aral, china, dudinka, india, japao, mongolia, omek, oriente_medio, siberia, tchita, vietna, vladvostok, alemanha, franca, inglaterra, islandia, moscou, polonia, suecia);\r\n        this.#guiScene.appendElement(gameScreen, show_cards, fortify);\r\n    \r\n        //colocar a view e a projection\r\n        brasil.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        brasil.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        brasil.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n    \r\n        argentina.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        argentina.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        argentina.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        chile.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        chile.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        chile.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        venezuela.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        venezuela.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        venezuela.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        mexico.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        mexico.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        mexico.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        california.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        california.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        california.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        nova_york.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        nova_york.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        nova_york.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        ottawa.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        ottawa.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        ottawa.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        labrador.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        labrador.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        labrador.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        vancouver.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        vancouver.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        vancouver.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        alaska.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        alaska.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        alaska.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        mackenzie.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        mackenzie.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        mackenzie.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        groelandia.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        groelandia.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        groelandia.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        africa_sul.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        africa_sul.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        africa_sul.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        argelia.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        argelia.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        argelia.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        congo.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        congo.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        congo.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        egito.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        egito.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        egito.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        madagascar.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        madagascar.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        madagascar.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        sudao.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        sudao.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        sudao.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        australia.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        australia.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        australia.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        borneu.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        borneu.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        borneu.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        nova_guine.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        nova_guine.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        nova_guine.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        sumatra.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        sumatra.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        sumatra.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        aral.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        aral.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        aral.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        china.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        china.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        china.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        dudinka.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        dudinka.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        dudinka.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        india.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        india.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        india.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        japao.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        japao.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        japao.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        mongolia.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        mongolia.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        mongolia.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        omek.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        omek.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        omek.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        oriente_medio.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        oriente_medio.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        oriente_medio.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        siberia.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        siberia.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        siberia.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        tchita.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        tchita.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        tchita.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        vietna.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        vietna.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        vietna.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        vladvostok.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        vladvostok.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        vladvostok.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        alemanha.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        alemanha.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        alemanha.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        franca.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        franca.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        franca.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        inglaterra.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        inglaterra.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        inglaterra.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        islandia.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        islandia.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        islandia.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        moscou.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        moscou.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        moscou.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        polonia.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        polonia.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        polonia.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n\r\n        suecia.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n        suecia.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n        suecia.setUniformValue(\"color\", [0.0, 0.0, 1.0, 1.0], \"4fv\");\r\n        this.gl.canvas.addEventListener(\"click\", e=>{\r\n            // e.clientX e e.clientY são a posição do mouse\r\n    \r\n            if(!this.#inGame) return;\r\n\r\n            const point = Game.mapClickInCanvas(e.clientX, e.clientY, this.gl.canvas);\r\n\r\n            if(argentina.pointCollision(...point)){\r\n                alert(\"argentina\");\r\n            }\r\n    \r\n        })\r\n    }\r\n\r\n    draw(){\r\n        if(this.#inGame){\r\n            this.#gameScene.draw();\r\n            this.#guiScene.draw();\r\n        }\r\n        else{\r\n            this.#menuScene.draw();\r\n        }\r\n    }\r\n\r\n    run(){\r\n        const run_aux = ()=>{\r\n            this.draw();\r\n            requestAnimationFrame(run_aux);\r\n        }\r\n\r\n        run_aux();\r\n    }\r\n\r\n    static mapClickInCanvas(x, y, canvas){\r\n        const mappedOnCenter = [\r\n            (x - canvas.offsetLeft) - canvas.width/2, \r\n            (canvas.height/2) - (y - canvas.offsetTop)\r\n        ];\r\n\r\n        return [mappedOnCenter[0]*2/canvas.width, mappedOnCenter[1]*2/canvas.height];\r\n    }\r\n}\r\n\r\nclass GameScreen{\r\n    async init(gl){\r\n        this.settingsButton = new ImageGL();\r\n        await this.settingsButton.init(gl, \"./assets/menu/settings_button.png\");\r\n        this.settingsButton.scale = [0.046, 0.08]; \r\n        GameScreen.setInitialPosition(0.9, 0.8, 0.2, this.settingsButton);\r\n\r\n        this.card_button = new ImageGL();\r\n        await this.card_button.init(gl, \"./assets/game/card_button.png\");\r\n        this.card_button.scale = [0.08, 0.15]; \r\n        GameScreen.setInitialPosition(0.76, -0.85, 0.2, this.card_button);\r\n\r\n        this.objective_button = new ImageGL();\r\n        await this.objective_button.init(gl, \"./assets/game/objective_button.png\");\r\n        this.objective_button.scale = [0.065, 0.11]; \r\n        GameScreen.setInitialPosition(0.92, -0.85, 0.2, this.objective_button);\r\n\r\n        this.current_player = new ImageGL();\r\n        await this.current_player.init(gl, \"./assets/game/current_player.png\");\r\n        this.current_player.scale = [0.4, 0.6]; \r\n        GameScreen.setInitialPosition(0, -0.85, 0.2, this.current_player);\r\n\r\n        this.show_players = new ImageGL();\r\n        await this.show_players.init(gl, \"./assets/game/show_players.png\");\r\n        this.show_players.scale = [0.065, 0.115]; \r\n        GameScreen.setInitialPosition(-0.92, -0.85, 0.2, this.show_players);\r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amountY){\r\n        this.card_button.positionY += amountY;\r\n        this.objective_button._tex.positionY += amountY;\r\n        this.current_player.positionY += amountY;\r\n    }\r\n\r\n    draw(camera){\r\n        this.settingsButton.draw(camera);\r\n        this.card_button.draw(camera);\r\n        this.objective_button.draw(camera);\r\n        this.current_player.draw(camera);\r\n        this.show_players.draw(camera);\r\n    }\r\n\r\n\r\n}\r\n\r\nclass ShowCards{\r\n    async init(gl){\r\n        this.show_cards = new ImageGL();\r\n        await this.show_cards.init(gl, \"./assets/game/show_cards.png\");\r\n        this.show_cards.scale = [0.4, 0.7];\r\n        ShowCards.setInitialPosition(this.show_cards.positionX, -0.85 - 1, 0.3, this.show_cards);\r\n        \r\n        this.cancel_button = new ImageGL();\r\n        await this.cancel_button.init(gl, \"./assets/game/cancel_button.png\");\r\n        this.cancel_button.scale = [0.046, 0.083];\r\n        ShowCards.setInitialPosition(-0.34, -0.81 - 1, 0.4, this.cancel_button);\r\n\r\n        this.ok_button = new ImageGL();\r\n        await this.ok_button.init(gl, \"./assets/game/ok_button.png\");\r\n        this.ok_button.scale = [0.046, 0.083];\r\n        ShowCards.setInitialPosition(0.34, -0.81 - 1, 0.4, this.ok_button);\r\n\r\n        this.cards_info = new ImageGL();\r\n        await this.cards_info.init(gl, \"assets/game/cards_info.png\");\r\n        this.cards_info.scale = [0.2, 0.35];\r\n        ShowCards.setInitialPosition(0.832 + 1, this.cards_info.positionY, 0.3, this.cards_info); \r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amountX, amountY){\r\n        this.show_cards.positionY += amountY;\r\n        this.cancel_button.positionY += amountY;\r\n        this.ok_button.positionY += amountY;\r\n        this.cards_info.positionX += amountX\r\n    }\r\n\r\n    draw(camera){\r\n        this.show_cards.draw(camera);\r\n        this.cancel_button.draw(camera);\r\n        this.ok_button.draw(camera);\r\n        this.cards_info.draw(camera);\r\n    }\r\n\r\n}\r\n\r\nclass Fortify{\r\n    async init(gl){\r\n        this.fortify = new ImageGL();\r\n        await this.fortify.init(gl, \"./assets/game/fortify.png\");\r\n        this.fortify.scale = [0.4, 0.7];\r\n        Fortify.setInitialPosition(this.fortify.positionX, -0.825 - 1, 0.3, this.fortify);\r\n\r\n        this.cancel_button = new ImageGL();\r\n        await this.cancel_button.init(gl, \"./assets/game/cancel_button.png\");\r\n        this.cancel_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(-0.34, -0.81 - 1, 0.4, this.cancel_button);\r\n\r\n        this.ok_button = new ImageGL();\r\n        await this.ok_button.init(gl, \"./assets/game/ok_button.png\");\r\n        this.ok_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(0.34, -0.81 - 1, 0.4, this.ok_button);\r\n\r\n        this.plus_button = new ImageGL();\r\n        await this.plus_button.init(gl, \"./assets/game/plus_button.png\");\r\n        this.plus_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(0.168, -0.86 - 1, 0.4, this.plus_button);\r\n\r\n        this.minus_button = new ImageGL();\r\n        await this.minus_button.init(gl, \"./assets/game/minus_button.png\");\r\n        this.minus_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(-0.168, -0.86 - 1, 0.4, this.minus_button);\r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amount){\r\n        this.fortify.positionY += amount;\r\n        this.cancel_button.positionY += amount;\r\n        this.ok_button.positionY += amount;\r\n        this.plus_button.positionY += amount;\r\n        this.minus_button.positionY += amount;\r\n    }\r\n\r\n    draw(camera){\r\n        this.fortify.draw(camera);\r\n        this.cancel_button.draw(camera);\r\n        this.ok_button.draw(camera);\r\n        this.plus_button.draw(camera);\r\n        this.minus_button.draw(camera);\r\n    }\r\n}\r\n\r\nconst canvas = document.querySelector(\"#game-screen\");\r\n\r\nGame.build(canvas).then(game => {\r\n    game.run();\r\n});\r\n"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","create","out","copy","a","identity","invert","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","multiply","b","b0","b1","b2","b3","Math","random","PI","hypot","y","i","arguments","length","sqrt","GLUtil","static","gl","type","source_code","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","getShaderInfoLog","Error","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","data","buffer","ArrayBuffer","undefined","byteLength","console","warn","createBuffer","bindBuffer","bufferData","STATIC_DRAW","attributes","WebGL2RenderingContext","vao","createVertexArray","size","bindVertexArray","attribute","loc","enableVertexAttribArray","dimension","FLOAT","ARRAY_BUFFER","vertexAttribPointer","Mesh","_gl","position","rotation","scale","_program","_primitive","_vaoLoc","useDepthTest","modelMatrix","this","updateModelMatrix","addAttribute","name","pointDim","forEach","val","count","f32Array","push","getAttribLocation","constructor","vertShaderSrc","fragShaderSrc","primitive","VERTEX_SHADER","FRAGMENT_SHADER","useProgram","createVAO","v","x","z","rad","s","sin","c","cos","loadMVP","camera","modelLoc","getUniformLocation","mvLoc","mvpLoc","viewLoc","viewProjLoc","projectionLoc","uniformMatrix4fv","mv","viewMatrix","mvp","viewProjection","projMatrix","createTex","texData","textureName","createTexture","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA32F","RGBA","uniform1i","tex","index","setUniformValue","value","uniformLoc","startsWith","draw","cam","frontFace","CCW","enable","CULL_FACE","cullFace","BACK","DEPTH_TEST","depthFunc","LESS","drawArrays","disable","ImageGL","scaleX","scaleY","positionX","positionY","depth","theta","vec","opacity","alpha","async","src","TRIANGLES","coords","texCoords","url","Promise","resolve","image","Image","addEventListener","imgSrc","img","loadImage","decode","imageBitmap","createImageBitmap","_tex","width","height","proportion","newWidth","newHeight","v1","v2","v3","v4","pointCollision","point","inverse","pointT","mat","fill","round","j","multiplyMatWithVec","abs","Vertex","Map","id","hEdge","HalfEdge","opositte","next","vertex","Face","HalfEdgeDS","indexes","i1","i2","i3","h1","h2","h3","face","setOposittes","v0","hEdge1","setAttribute","values","vertlen","attrib","slice","set","createVBOs","keys","get","IndexedMeshT","border","super","vbos","from","entries","map","entry","ELEMENT_ARRAY_BUFFER","Uint32Array","_count","drawElements","UNSIGNED_INT","drawBorder","path","vertShader","fragShader","texturePath","obj","fetch","text","lines","split","vertices","normals","borderIndex","line","replace","Number","parseFloat","d","dotProduct","key","join","init","indexOf","vIndex","parseInt","border1","Border","mesh","reduce","ac","curr","min","Infinity","max","log","collided","first","prev","intersecsCount","coord","sort","minX","maxX","minY","maxY","ang","coefLin","canvas","document","createElement","style","backgroundColor","ctx","getContext","beginPath","lineTo","moveTo","stroke","fillRect","CanvasImage","canvasDimension","toDataURL","drawCanvas","imageElement","changeTex","Camera","camPosition","lookDirection","upDirection","left","right","bottom","top","near","far","fovy","aspect","projectionType","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","nf","f","tan","lr","bt","Light","ambColor","ambK","difColor","difK","espColor","espK","espExp","pos","createUniforms","Scene","clearColor","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","createCamera","createLight","appendElement","drawnables","drawnable","element","Game","game","background","logoWar","playButton","settingsButton","maxButton","e","mapClickInCanvas","clientX","clientY","gameScreen","GameScreen","show_cards","ShowCards","fortify","Fortify","brasil","loadMeshFromObj","countryVert","phongFrag","argentina","chile","venezuela","mexico","california","nova_york","ottawa","labrador","vancouver","alaska","mackenzie","groelandia","africa_sul","argelia","congo","egito","madagascar","sudao","australia","borneu","nova_guine","sumatra","aral","china","dudinka","india","japao","mongolia","omek","oriente_medio","siberia","tchita","vietna","vladvostok","alemanha","franca","inglaterra","islandia","moscou","polonia","suecia","cImage","update","CanvasRenderingContext2D","fillStyle","ellipse","lineWidth","font","fillText","alert","run","run_aux","requestAnimationFrame","mappedOnCenter","offsetLeft","offsetTop","setInitialPosition","card_button","objective_button","current_player","show_players","widget","moveAll","amountY","cancel_button","ok_button","cards_info","amountX","plus_button","minus_button","amount","querySelector","build","then"],"sourceRoot":""}
