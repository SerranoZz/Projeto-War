{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://projeto-war/./node_modules/gl-matrix/esm/common.js","webpack://projeto-war/./node_modules/gl-matrix/esm/mat4.js","webpack://projeto-war/./node_modules/gl-matrix/esm/vec3.js","webpack://projeto-war/./src/webgl/gl-util.js","webpack://projeto-war/./src/webgl/mesh.js","webpack://projeto-war/./src/view/image.js","webpack://projeto-war/./src/shaders/imageVert.js","webpack://projeto-war/./src/shaders/imageFrag.js","webpack://projeto-war/./src/webgl/half-edge.js","webpack://projeto-war/./src/webgl/indexed-mesh.js","webpack://projeto-war/./src/model/map/territories/country.js","webpack://projeto-war/./src/shaders/countryVert.js","webpack://projeto-war/./src/shaders/phongFrag.js","webpack://projeto-war/./src/webgl/camera.js","webpack://projeto-war/./src/webgl/light.js","webpack://projeto-war/./src/webgl/scene.js","webpack://projeto-war/./src/model/tools/dice.js","webpack://projeto-war/./src/model/player/player.js","webpack://projeto-war/./src/model/map/territories/continent.js","webpack://projeto-war/./src/model/map/territories/territory-controller.js","webpack://projeto-war/./src/model/player/turns_manager.js","webpack://projeto-war/./src/events/events_manager.js","webpack://projeto-war/./src/view/canvasImage.js","webpack://projeto-war/./src/view/troopsView.js","webpack://projeto-war/./src/model/tools/goal.js","webpack://projeto-war/./src/main.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","export default class GLUtil{\r\n    static createShader(gl, type, source_code) {\r\n        const shader = gl.createShader(type);\r\n        gl.shaderSource(shader, source_code);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            const info = gl.getShaderInfoLog(shader);\r\n            throw new Error(\"Shader compilation error: \"+info);\r\n        }\r\n    \r\n        return shader;\r\n    }\r\n    \r\n    static createProgram(gl, vertexShader, fragmentShader) {\r\n        const program = gl.createProgram();\r\n    \r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const info = gl.getProgramInfoLog(program);\r\n            throw new Error('Could not compile WebGL program:' + info);\r\n        }\r\n    \r\n        return program;\r\n    }\r\n    \r\n    static createBuffer(gl, type, data) {\r\n        if (data.length == 0)\r\n          return null;\r\n    \r\n        if (!(data && data.buffer instanceof ArrayBuffer && data.byteLength !== undefined)) {\r\n          console.warn('Data is not an instance of ArrayBuffer');\r\n          return null;\r\n        }\r\n    \r\n        const buffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(type, buffer);\r\n        gl.bufferData(type, data, gl.STATIC_DRAW);\r\n\r\n        return buffer;\r\n    }\r\n    \r\n\r\n      // refazer essa depois\r\n    static createVAO(gl, ...attributes) {\r\n      if(!(gl instanceof WebGL2RenderingContext)) return;\r\n\r\n        const vao = gl.createVertexArray();\r\n    \r\n        gl.bindVertexArray(vao);\r\n\r\n        let size;\r\n        let type;\r\n    \r\n        for(let attribute of attributes){\r\n          if (attribute.loc != null && attribute.loc != undefined) {\r\n            gl.enableVertexAttribArray(attribute.loc);\r\n            size = attribute.dimension;\r\n            type = gl.FLOAT;\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, attribute.buffer);\r\n            gl.vertexAttribPointer(attribute.loc, size, type, false, 0, 0);\r\n          }\r\n        }\r\n    \r\n        return vao;\r\n    }\r\n}","import { vec3, mat4 } from \"gl-matrix\";\r\nimport GLUtil from \"./gl-util\";\r\n\r\nexport default class Mesh{\r\n    _gl;\r\n\r\n    position = [0.0, 0.0, 0.0];\r\n    rotation = [0.0, 0.0, 0.0];\r\n    scale = [1.0, 1.0, 1.0];\r\n\r\n    static #textureI = 0;\r\n\r\n    #modelMatrix = mat4.create();\r\n\r\n    #attributes = [];\r\n\r\n    #vertShader = null;\r\n    #fragShader = null;\r\n\r\n    _program = null;\r\n\r\n    _primitive;\r\n\r\n    #count;\r\n\r\n    _vaoLoc;\r\n\r\n    #uTexture;\r\n    #texture;\r\n\r\n    #vao_updated = false;\r\n\r\n    useDepthTest = false;\r\n    \r\n    get modelMatrix(){\r\n        this.updateModelMatrix();\r\n        return this.#modelMatrix;\r\n    }\r\n\r\n    addAttribute(name, info, pointDim = 4){\r\n        if(!(info instanceof Array))\r\n            throw new Error(\"The info parameter needs to be a Array.\");\r\n\r\n        info.forEach(val => {\r\n            if(typeof val !== \"number\") \r\n                throw new Error(\"The info array need to be numeric.\");\r\n        });\r\n\r\n        const count = info.length/pointDim;\r\n\r\n        if(!this.#count) this.#count = count;\r\n\r\n        else if(count !== this.#count) \r\n            throw new Error(\"The VBOs need to contain the same number of vertex.\");\r\n\r\n        const f32Array = new Float32Array(info);\r\n\r\n        this.#attributes.push({\r\n            loc: this._gl.getAttribLocation(this._program, name),\r\n            buffer: GLUtil.createBuffer(this._gl, this._gl.ARRAY_BUFFER,f32Array),\r\n            dimension: pointDim\r\n        })\r\n\r\n        this.#vao_updated = false;\r\n    }\r\n\r\n    constructor(gl, vertShaderSrc, fragShaderSrc, primitive){\r\n        this._primitive = primitive;\r\n        \r\n        this._gl = gl;\r\n        //restringir os tipos\r\n\r\n        this.#createShader(vertShaderSrc, fragShaderSrc);\r\n    }\r\n\r\n    #createShader(vertShaderSrc, fragShaderSrc) {\r\n        this.#vertShader = GLUtil.createShader(this._gl, this._gl.VERTEX_SHADER, vertShaderSrc);\r\n        this.#fragShader = GLUtil.createShader(this._gl, this._gl.FRAGMENT_SHADER, fragShaderSrc);\r\n        this._program = GLUtil.createProgram(this._gl, this.#vertShader, this.#fragShader);\r\n    \r\n        this._gl.useProgram(this._program);\r\n    }\r\n\r\n    #createVAO() {\r\n        this._vaoLoc = GLUtil.createVAO(this._gl, ...this.#attributes);\r\n    }\r\n\r\n    updateModelMatrix(){\r\n        mat4.identity(this.#modelMatrix);\r\n\r\n        mat4.translate(this.#modelMatrix, this.#modelMatrix, this.position);\r\n        mat4.rotateX(this.#modelMatrix, this.#modelMatrix, this.rotation[0]);\r\n        mat4.rotateY(this.#modelMatrix, this.#modelMatrix, this.rotation[1]);\r\n        mat4.rotateZ(this.#modelMatrix, this.#modelMatrix, this.rotation[2]);\r\n        mat4.scale(this.#modelMatrix, this.#modelMatrix, this.scale);\r\n    }\r\n\r\n    loadMVP(camera){\r\n        const modelLoc = this._gl.getUniformLocation(this._program, \"model\");\r\n        const mvLoc = this._gl.getUniformLocation(this._program, \"modelView\");\r\n        const mvpLoc = this._gl.getUniformLocation(this._program, \"mvp\");\r\n\r\n        const viewLoc = this._gl.getUniformLocation(this._program, \"view\");\r\n        const viewProjLoc = this._gl.getUniformLocation(this._program, \"viewProjection\");\r\n        const projectionLoc = this._gl.getUniformLocation(this._program, \"projection\");\r\n\r\n        if(modelLoc){\r\n            this._gl.uniformMatrix4fv(modelLoc, false, this.#modelMatrix);\r\n        }else if(mvLoc){\r\n            const mv = mat4.create();\r\n\r\n            if(camera)\r\n                mat4.multiply(mv, camera.viewMatrix, this.#modelMatrix);\r\n            else\r\n                mat4.copy(mv, this.#modelMatrix);\r\n            \r\n            this._gl.uniformMatrix4fv(mvLoc, false, mv);\r\n\r\n        }else if(mvpLoc){\r\n            const mvp = mat4.create();\r\n\r\n            if(camera)\r\n                mat4.multiply(mvp, camera.viewProjection, this.#modelMatrix);\r\n            else\r\n                mat4.copy(mvp, this.#modelMatrix);\r\n                \r\n            this._gl.uniformMatrix4fv(mvpLoc, false, mvp);\r\n        }\r\n\r\n        if(viewLoc)\r\n            this._gl.uniformMatrix4fv(modelLoc, false, camera.viewMatrix);\r\n\r\n        if(projectionLoc)\r\n            this._gl.uniformMatrix4fv(modelLoc, false, camera.projMatrix);\r\n    \r\n        if(viewProjLoc)\r\n            this._gl.uniformMatrix4fv(modelLoc, false, camera.viewProjection);\r\n    }\r\n\r\n    createTex(texData, textureName){\r\n        this.#uTexture = this._gl.getUniformLocation(this._program, textureName);\r\n        this.#texture = this._gl.createTexture();\r\n        this._gl.activeTexture(this._gl[`TEXTURE${Mesh.#textureI}`]);\r\n        this._gl.bindTexture(this._gl.TEXTURE_2D, this.#texture);\r\n\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.NEAREST);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.NEAREST);\r\n\r\n        this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA32F, this._gl.RGBA, this._gl.FLOAT, texData);\r\n\r\n        this._gl.useProgram(this._program);\r\n        this._gl.uniform1i(this.#uTexture, Mesh.#textureI);\r\n\r\n        Mesh.#textureI++;\r\n\r\n        return {tex: this.#texture, index: Mesh.#textureI - 1};\r\n    }\r\n\r\n    setUniformValue(name, value, type){\r\n        const uniformLoc = this._gl.getUniformLocation(this._program, name);\r\n        \r\n        if(uniformLoc === -1)\r\n            throw new Error(\"This uniform doesn't exist in the shader code.\");\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        if(type.startsWith(\"Matrix\"))\r\n            this._gl[\"uniform\"+type](uniformLoc, false, value);\r\n        else\r\n            this._gl[\"uniform\"+type](uniformLoc, value);\r\n    }\r\n\r\n    draw(cam){\r\n        if(!this.#vao_updated){\r\n            this.#vao_updated = true;\r\n            this.#createVAO();\r\n        }\r\n\r\n        this._gl.frontFace(this._gl.CCW);\r\n\r\n        this._gl.enable(this._gl.CULL_FACE);\r\n        this._gl.cullFace(this._gl.BACK);\r\n\r\n        if(this.useDepthTest){\r\n            this._gl.enable(this._gl.DEPTH_TEST);\r\n            this._gl.depthFunc(this._gl.LESS);\r\n        }\r\n\r\n        this.updateModelMatrix();\r\n\r\n        this._gl.bindVertexArray(this._vaoLoc);\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        this.loadMVP(cam);\r\n\r\n        this._gl.drawArrays(this._primitive, 0, this.#count);\r\n\r\n        this._gl.disable(this._gl.CULL_FACE);\r\n\r\n        if(this.useDepthTest)\r\n            this.gl.disable(this._gl.DEPTH_TEST);\r\n    }\r\n\r\n    static changeTex(gl, {tex, index}, texData){\r\n        gl.bindTexture(gl.TEXTURE_2D, tex);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, gl.RGBA, gl.FLOAT, texData);\r\n    }\r\n}\r\n","import Mesh from \"../webgl/mesh\";\r\nimport imgVert from \"../shaders/imageVert\";\r\nimport imgFrag from \"../shaders/imageFrag\";\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\n\r\nexport default class ImageGL{\r\n    #mesh;\r\n\r\n    #width;\r\n    #height;\r\n\r\n    get width(){\r\n        return this.#width;\r\n    }\r\n\r\n    get height(){\r\n        return this.#height;\r\n    }\r\n\r\n    set scaleX(x){\r\n        if(x<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[0] = x;\r\n    }\r\n\r\n    set scaleY(y){\r\n        if(y<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[1] = y; \r\n    }\r\n\r\n    set positionX(x){\r\n        this.#mesh.position[0] = x;\r\n    }\r\n\r\n    set positionY(y){\r\n        this.#mesh.position[1] = y;    \r\n    }\r\n\r\n    set depth(z){\r\n        this.#mesh.position[2] = z;\r\n    }\r\n\r\n    set rotation(theta){\r\n        this.#mesh.rotation[2] = theta    \r\n    }\r\n\r\n    set scale(vec){\r\n        if(!(vec instanceof Array) || vec.length !== 2)\r\n            throw new Error(\"scale need to be a vector with two positions.\");\r\n\r\n        this.#mesh.scale = vec3.fromValues(vec[0], vec[1], 1)\r\n    }\r\n\r\n    set opacity(alpha){\r\n        this.#mesh.setUniformValue(\"alpha\", alpha, \"1f\");\r\n    }\r\n\r\n    get positionX(){\r\n        return this.#mesh.position[0];\r\n    }\r\n    \r\n    get positionY(){\r\n        return this.#mesh.position[1];\r\n    }\r\n\r\n    async init(gl, src){\r\n        this.#mesh = new Mesh(gl, imgVert, imgFrag, gl.TRIANGLES);\r\n\r\n        const size = await this.#loadTex(src);\r\n\r\n        const data = this.#createRect(...size);\r\n\r\n        this.#mesh.addAttribute(\"position\", data.coords);\r\n        this.#mesh.addAttribute(\"texCoord\", data.texCoords, 2);\r\n\r\n        this.opacity = 1.0;\r\n    }\r\n\r\n    static async loadImage(url){\r\n        return new  Promise(resolve => {\r\n            const image = new Image();\r\n            image.addEventListener('load', () => {\r\n                resolve(image);\r\n            });\r\n            image.src = url; \r\n        });\r\n    }\r\n\r\n    async #loadTex(imgSrc){\r\n        const img = await ImageGL.loadImage(imgSrc);\r\n        await img.decode();\r\n        const imageBitmap = await createImageBitmap(img);\r\n\r\n        this._tex = this.#mesh.createTex(img, \"uTexture\");\r\n\r\n        return [imageBitmap.width, imageBitmap.height];\r\n    }\r\n\r\n    #createRect(width, height){\r\n        const proportion = width/height;\r\n\r\n        let newWidth = 1.0;\r\n        let newHeight = 1.0;\r\n\r\n        (proportion<1)? newWidth*=proportion: newHeight/=proportion;\r\n\r\n        this.#width = newWidth;\r\n        this.#height = newHeight;\r\n\r\n        const v1 = [-newWidth, -newHeight, 0.0, 1.0];\r\n        const v2 = [newWidth, -newHeight, 0.0, 1.0];\r\n        const v3 = [newWidth, newHeight, 0.0, 1.0];\r\n        const v4 = [-newWidth, newHeight, 0.0, 1.0];\r\n\r\n        const coords = [\r\n            ...v1, ...v2, ...v3,\r\n            ...v1, ...v3, ...v4\r\n        ]\r\n\r\n        const texCoords = [\r\n            0, 1, 1, 1, 1, 0,\r\n            0, 1, 1, 0, 0, 0\r\n        ]\r\n\r\n        return {\r\n            coords,\r\n            texCoords\r\n        }\r\n    }\r\n\r\n    useDepthTest(){\r\n        this.#mesh.useDepthTest = true;\r\n    }\r\n\r\n    pointCollision(x, y, camera){\r\n        const point = [x, y, 0, 1];\r\n\r\n        const mvp = mat4.create();\r\n        mat4.copy(mvp, this.#mesh.modelMatrix);\r\n\r\n        if(camera){\r\n            const viewProj = camera.viewProjection;\r\n            mat4.multiply(mvp, viewProj, mvp);\r\n        }\r\n\r\n        const inverse = mat4.create();\r\n\r\n        mat4.invert(inverse, mvp);\r\n\r\n        const near = (camera)?camera.near: 1;\r\n        const far = (camera)?camera.far: 1;\r\n\r\n        const p1 = multiplyMatWithVec(inverse, [x, y, near, 1]);\r\n        const p2 = multiplyMatWithVec(inverse, [x, y, far, 1]);\r\n\r\n        const p1Norm = scalarMulti(p1, 1/p1[3]);\r\n        const p2Norm = scalarMulti(p2, 1/p2[3]);\r\n\r\n        const line = new Line(p2Norm, p1Norm);\r\n\r\n        const pointT = line.pointWhenZIs(0);\r\n\r\n        return (Math.abs(pointT[0])<this.#width && Math.abs(pointT[1])<this.#height);\r\n    }\r\n\r\n    draw(camera){\r\n        if(this.#mesh) this.#mesh.draw(camera);\r\n    }\r\n}\r\n\r\nfunction scalarMulti(vector, scalar){\r\n    return vector.map(coord => coord*scalar);\r\n}\r\n\r\nfunction multiplyMatWithVec(mat, vec){\r\n    const out = new Array(vec.length).fill(0);\r\n\r\n    if(Math.round(vec.length**2) !== mat.length)\r\n        return;\r\n\r\n    for(let i = 0; i<vec.length; i++)\r\n        for(let j = 0; j<mat.length; j+=4)\r\n            out[i]+=mat[j+i]*vec[j/4];\r\n\r\n    return out;\r\n}\r\n\r\nclass Line{\r\n    #origin;\r\n    #direction;\r\n\r\n    constructor(extreme, origin){\r\n        const vDir = this.#getDirection(extreme, origin);\r\n\r\n        this.#direction = vDir;\r\n        this.#origin = origin;\r\n    }\r\n\r\n    getPoint(t){\r\n        return this.#origin.map((coord, index) => coord+t*this.#direction[index]);\r\n    }\r\n\r\n    pointWhenZIs(z){\r\n        const t = (this.#direction[2])?(z - this.#origin[2])/this.#direction[2] : 0;\r\n\r\n        return this.getPoint(t);\r\n    }\r\n\r\n    #getDirection(extreme, origin){\r\n        const v = extreme.map((coord, index)=>coord-origin[index]);\r\n\r\n        const size = Math.sqrt(v.reduce((ac, coord) => ac+coord**2, 0));\r\n\r\n        const vDir = (size)?v.map(val=> val/size):v;\r\n\r\n        return vDir;\r\n    }\r\n}","export default `#version 300 es\r\n    precision highp float;\r\n\r\n    uniform mat4 mvp;\r\n\r\n    in vec4 position;\r\n    in vec2 texCoord;\r\n\r\n    out vec2 fTexCoord;\r\n\r\n    void main() {\r\n        gl_Position  = mvp * position;\r\n        fTexCoord = texCoord;\r\n    }\r\n`","export default `#version 300 es\r\n    precision highp float;\r\n    \r\n    in vec2 fTexCoord;\r\n\r\n    uniform sampler2D uTexture;\r\n    uniform float alpha;\r\n\r\n    out vec4 color;\r\n\r\n    void main() {\r\n        color = texture(uTexture, fTexCoord);\r\n\r\n        if(color.a < 0.2) discard;\r\n\r\n        color *= alpha;\r\n    }\r\n`","class Vertex{\r\n    attributes = new Map();\r\n    id;\r\n    hEdge;\r\n\r\n    constructor(id){\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass HalfEdge{\r\n    opositte;\r\n    next;\r\n    vertex;\r\n\r\n    constructor(vertex){\r\n        this.vertex = vertex;\r\n    }\r\n}\r\n\r\nclass Face{\r\n    hEdge;\r\n\r\n    constructor(hEdge){\r\n        this.hEdge = hEdge;\r\n    }\r\n}\r\n\r\nexport default class HalfEdgeDS{\r\n    #hEdges = [];\r\n    #vertices = [];\r\n    #faces = [];\r\n\r\n    constructor(indexes){\r\n        for(let i = 0; i < indexes.length; i += 3){\r\n            const i1 = indexes[i];\r\n            const i2 = indexes[i+1];\r\n            const i3 = indexes[i+2];\r\n\r\n            if(!this.#vertices[i1]) this.#vertices[i1] = new Vertex(i1);\r\n            if(!this.#vertices[i2]) this.#vertices[i2] = new Vertex(i2);\r\n            if(!this.#vertices[i3]) this.#vertices[i3] = new Vertex(i3);\r\n\r\n            const h1 = new HalfEdge(this.#vertices[i1]);\r\n            const h2 = new HalfEdge(this.#vertices[i2]);\r\n            const h3 = new HalfEdge(this.#vertices[i3]);\r\n\r\n            h1.next = h2;\r\n            h2.next = h3;\r\n            h3.next = h1;\r\n\r\n            const face = new Face(h1);\r\n\r\n            this.#hEdges[i] = h1;\r\n            this.#hEdges[i+1] = h2;\r\n            this.#hEdges[i+2] = h3;\r\n\r\n            this.#faces[Math.round(i/3)] = face;\r\n        }\r\n\r\n        this.setOposittes();\r\n    }\r\n\r\n    setOposittes(){\r\n        for(let hEdge of this.#hEdges){\r\n            const v0 = hEdge.vertex;\r\n            const v1 = hEdge.next.vertex;\r\n\r\n            if(!v0.hEdge) v0.hEdge = hEdge;\r\n\r\n            if(hEdge.opositte) continue;\r\n\r\n            for(let hEdge1 of this.#hEdges){\r\n                if(hEdge1.vertex === v1 && hEdge1.next.vertex === v0){\r\n                    hEdge.opositte = hEdge1;\r\n                    hEdge1.opositte = hEdge;\r\n                    break;    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setAttribute(values, vertlen, name){\r\n        if(values.length/vertlen!==this.#vertices.length)\r\n            throw new Error(`Mesh haves ${this.#vertices.length} vertices, but only ${values.length/vertlen} were given.`)\r\n\r\n        for(let i = 0; i<values.length; i+=vertlen){\r\n            const attrib = values.slice(i, i+vertlen);\r\n            this.#vertices[Math.round(i/vertlen)].attributes.set(name, attrib);\r\n        }\r\n    }\r\n\r\n    createVBOs(){\r\n        const attributes = new Map();\r\n        const indexes = [];\r\n\r\n        for(let vertex of this.#vertices){\r\n            for(let name of vertex.attributes.keys()){\r\n\r\n                if(!attributes.get(name)) attributes.set(name, []);\r\n\r\n                attributes.get(name).push(...vertex.attributes.get(name));\r\n            }\r\n        }\r\n\r\n        for(let hEdge of this.#hEdges){\r\n            indexes.push(hEdge.vertex.id);\r\n        }\r\n\r\n        return {attributes, indexes, count: this.#vertices.length};\r\n    }\r\n}\r\n","import ImageGL from \"../view/image\";\r\nimport GLUtil from \"./gl-util\";\r\nimport HalfEdgeDS from \"./half-edge\";\r\nimport Mesh from \"./mesh\";\r\nimport { mat4 } from \"gl-matrix\";\r\n\r\nexport default class IndexedMeshT extends Mesh{\r\n    #hEdge;\r\n    #indicesLoc = -1;\r\n    #border;\r\n\r\n    #vao_updated = false;\r\n\r\n    set border(border){\r\n        this.#border = border;\r\n    }\r\n\r\n    constructor(gl, vertShaderSrc, fragShaderSrc, indexes){\r\n        super(gl, vertShaderSrc, fragShaderSrc, gl.TRIANGLES);\r\n\r\n        this.#hEdge = new HalfEdgeDS(indexes);\r\n    }\r\n\r\n    addAttribute(name, info, pointDim = 4){\r\n        if(!(info instanceof Array))\r\n            throw new Error(\"The info parameter needs to be a Array.\");\r\n\r\n        info.forEach(val => {\r\n            if(typeof val !== \"number\") \r\n                throw new Error(\"The info array need to be numeric.\");\r\n        });\r\n\r\n        if(this._gl.getAttribLocation(this._program, name)===-1)\r\n            throw new Error(`the attribute ${name} doesn't exists in the shader code.`);\r\n\r\n\r\n        this.#hEdge.setAttribute(info, pointDim, name);  \r\n        \r\n        this.#vao_updated = false;\r\n    }\r\n\r\n    #createVAO() {\r\n        const vbos = this.#hEdge.createVBOs();\r\n\r\n        const attributes = Array.from(vbos.attributes.entries()).map(entry => {\r\n\r\n            return {\r\n                loc: this._gl.getAttribLocation(this._program, entry[0]),\r\n                buffer: GLUtil.createBuffer(this._gl, this._gl.ARRAY_BUFFER, new Float32Array(entry[1])),\r\n                dimension: Math.round(entry[1].length/vbos.count)\r\n            }\r\n        })\r\n\r\n        this._vaoLoc = GLUtil.createVAO(this._gl, ...attributes);\r\n        this.#indicesLoc = GLUtil.createBuffer(this._gl, this._gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(vbos.indexes));\r\n\r\n        this._count = vbos.indexes.length;\r\n        this.#vao_updated = true;\r\n    }\r\n\r\n    draw(cam){\r\n        if(!this.#vao_updated)    \r\n            this.#createVAO();\r\n\r\n        if(this.useDepthTest){\r\n            this._gl.enable(this._gl.DEPTH_TEST);\r\n            this._gl.depthFunc(this._gl.LESS);\r\n        }\r\n        \r\n        this._gl.frontFace(this._gl.CCW);\r\n\r\n        this._gl.enable(this._gl.CULL_FACE);\r\n        this._gl.cullFace(this._gl.BACK);\r\n\r\n        this._gl.bindVertexArray(this._vaoLoc);\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this.#indicesLoc);\r\n\r\n        const modelLoc = this._gl.getUniformLocation(this._program, \"model\");\r\n        const mvLoc = this._gl.getUniformLocation(this._program, \"modelView\");\r\n        const mvpLoc = this._gl.getUniformLocation(this._program, \"mvp\");\r\n\r\n        if(modelLoc){\r\n            this._gl.uniformMatrix4fv(modelLoc, false, this.modelMatrix);\r\n        }else if(mvLoc){\r\n            const mv = mat4.create();\r\n            mat4.multiply(mv, cam.viewMatrix, this.modelMatrix);\r\n            this._gl.uniformMatrix4fv(modelLoc, false, mv);\r\n        }else if(mvpLoc){\r\n            const mvp = mat4.create();\r\n            mat4.multiply(mvp, cam.viewProjection, this.modelMatrix);\r\n            this._gl.uniformMatrix4fv(modelLoc, false, mvp);\r\n        }\r\n        \r\n        this._gl.drawElements(this._primitive, this._count, this._gl.UNSIGNED_INT, 0);\r\n\r\n        this._gl.disable(this._gl.CULL_FACE);\r\n\r\n        if(this.useDepthTest)\r\n            this._gl.disable(this._gl.DEPTH_TEST);\r\n    }\r\n\r\n    pointCollision(x, y, camera){\r\n        //colocar o throw dps\r\n        if(!this.#border) return false;\r\n\r\n        return this.#border.pointCollision(x, y, camera, this);\r\n    }\r\n\r\n    get center(){\r\n        return this.#border.center;\r\n    }\r\n\r\n    get drawBorder(){\r\n        return this.#border.draw();\r\n    }\r\n\r\n    static async loadMeshFromObj(path, gl, vertShader, fragShader, texturePath){\r\n        const obj = await fetch(path);\r\n        const text = await obj.text();\r\n\r\n        const border = new Map();\r\n    \r\n        const lines = text.split(\"\\n\");\r\n\r\n        const vertices = [];\r\n        const normals = [];\r\n        const texCoords = [];\r\n        const indexes = [];\r\n\r\n        let borderIndex = 0;\r\n\r\n        for(let line of lines){\r\n            if(line.startsWith(\"vn\")){\r\n                const values = line.replace(\"vn \", \"\").split(\" \").map(Number.parseFloat);\r\n                normals.push(...values, 1);\r\n\r\n                const d = Math.sqrt(dotProduct(values, values));\r\n\r\n                if(Math.abs(dotProduct(values, [0, 0, 1])/d)<0.5){\r\n                    const key = values.join(\",\");\r\n                    if(!border.get(key)) border.set(key, borderIndex);\r\n                }\r\n\r\n                borderIndex++;\r\n            }else if(line.startsWith(\"vt\")){\r\n                const values = line.replace(\"vt \", \"\").split(\" \").map(Number.parseFloat);\r\n                texCoords.push(...values);\r\n            }else if(line.startsWith(\"v\")){\r\n                const values = line.replace(\"v \", \"\").split(\" \").map(Number.parseFloat);\r\n                vertices.push(...values, 1);\r\n            }else if(line.startsWith(\"f\")){\r\n                const values = line.replace(\"f \", \"\").split(\" \").map(val => {\r\n                    const init = val.indexOf(\"/\");\r\n                    const vIndex = val.slice(0, init);\r\n                    return Number.parseInt(vIndex)-1;\r\n                });\r\n                indexes.push(...values);\r\n            }\r\n\r\n        }\r\n\r\n        const border1 = new Border(border, vertices, gl);\r\n\r\n        const mesh = new IndexedMeshT(gl, vertShader, fragShader, indexes);\r\n        mesh.addAttribute(\"position\", vertices);\r\n        mesh.addAttribute(\"normal\", normals);\r\n\r\n        mesh.useDepthTest = true;\r\n\r\n        if(texCoords.length!==0){\r\n            if(!texturePath)\r\n                throw new Error(\"This mesh need to a texture path\");\r\n\r\n            mesh.addAttribute(\"texCoord\", texCoords, 3);\r\n\r\n            const image = await ImageGL.loadImage(texturePath);\r\n\r\n            mesh.createTex(image, \"uTexture\");\r\n        }\r\n\r\n        mesh.border = border1;\r\n\r\n        return mesh;\r\n    }\r\n}\r\n\r\nconst dotProduct = (v1, v2) =>{\r\n    return v1.reduce((ac, curr, i)=>ac+=curr*v2[i], 0);\r\n}\r\n\r\nclass Border{\r\n    #borderMap;\r\n    #coords;\r\n    #lastClickMin;\r\n    #lastClickMax;\r\n    #min;\r\n    #max;\r\n\r\n    constructor(border, coords){\r\n        this.#borderMap = border;\r\n        this.#coords = coords;\r\n\r\n        let min = Infinity;\r\n        let max = -Infinity;\r\n\r\n        let minX = Infinity;\r\n        let maxX = -Infinity;\r\n\r\n        let minY = Infinity;\r\n        let maxY = -Infinity;\r\n\r\n        for(let i = 0; i<this.#coords.length; i+=4){\r\n            if(this.#coords[i+2]<min) min = this.#coords[i+2];\r\n            if(this.#coords[i+2]>max) max = this.#coords[i+2];\r\n\r\n            if(this.#coords[i]<minX) minX = this.#coords[i];\r\n            if(this.#coords[i]>maxX) maxX = this.#coords[i];\r\n\r\n            if(this.#coords[i+1]<minY) minY = this.#coords[i+1];\r\n            if(this.#coords[i+1]>maxY) maxY = this.#coords[i+1];\r\n        }\r\n\r\n        this.#min = min;\r\n        this.#max = max;\r\n\r\n        this.center = [(maxX+minX)/2, (minY + maxY)/2];\r\n    }\r\n\r\n    pointCollision(x, y, camera, mesh){\r\n        /*let init = this.#min;\r\n        const distance = (this.#max - this.#min)/100;\r\n\r\n        while(init<this.#max){\r\n\r\n        }\r\n        */\r\n        this.#lastClickMin = null;\r\n        this.#lastClickMax = null;\r\n\r\n        return this.#pointCollision(x, y, this.#min, camera, mesh) || \r\n            this.#pointCollision(x, y, this.#max, camera, mesh);\r\n\r\n        //return this.#pointCollision(x, y, 0, camera, mesh);\r\n    }\r\n\r\n    #pointCollision(x, y, z, camera, mesh){\r\n    \r\n        const mvp = mat4.create();\r\n        mat4.copy(mvp, mesh.modelMatrix);\r\n    \r\n        if(camera){\r\n            const viewProj = camera.viewProjection;\r\n            mat4.multiply(mvp, viewProj, mvp);\r\n        }\r\n    \r\n        const inverse = mat4.create();\r\n    \r\n        mat4.invert(inverse, mvp);\r\n    \r\n        const near = (camera)?camera.near: 1;\r\n        const far = (camera)?camera.far: 1;\r\n\r\n        const p1 = Border.multiplyMatWithVec(inverse, [x, y, near, 1]);\r\n        const p2 = Border.multiplyMatWithVec(inverse, [x, y, far, 1]);\r\n\r\n        const p1Norm = Border.scalarMulti(p1, 1/p1[3]);\r\n        const p2Norm = Border.scalarMulti(p2, 1/p2[3]);\r\n\r\n        const line = new Line(p2Norm, p1Norm);\r\n\r\n        const pointT = line.pointWhenZIs(z);\r\n\r\n        if(!this.#lastClickMin) this.#lastClickMin = pointT;\r\n        else this.#lastClickMax = pointT;\r\n    \r\n        let collided = this.#collideAlt(pointT);\r\n\r\n        return collided;\r\n    }\r\n\r\n    #collideAlt(point){\r\n        let [minX, minY] = [Infinity, Infinity];\r\n        \r\n        let [maxX, maxY] = [-Infinity, -Infinity];\r\n\r\n\r\n        for(let entry of this.#borderMap.entries()){\r\n            const i = entry[1]*4;\r\n            const coord = [this.#coords[i], this.#coords[i+1]];\r\n\r\n            if(coord[0]<minX) minX = coord[0];\r\n            if(coord[1]<minY) minY = coord[1];\r\n\r\n            if(coord[0]>maxX) maxX = coord[0];\r\n            if(coord[1]>maxY) maxY = coord[1];\r\n        }\r\n\r\n        //console.log(minX, maxX, minY, maxY, point);\r\n\r\n        return (point[0]>=minX && point[0]<=maxX && point[1]>=minY && point[1]<=maxY);\r\n    }\r\n\r\n    #collide(point){\r\n        let first;\r\n        let prev;\r\n\r\n        let intersecsCount = 0;\r\n\r\n        for(let entry of this.#borderMap.entries()){\r\n            const i = entry[1]*4;\r\n            const coord = [this.#coords[i], this.#coords[i+1]];\r\n\r\n            if(!first){\r\n                first = coord;\r\n                prev = coord;\r\n                continue;\r\n            }\r\n\r\n            const compare = this.leftToEdge(point, prev, coord);\r\n\r\n            if(compare === 2) return true;\r\n\r\n            if(compare) {\r\n                intersecsCount++;\r\n            }\r\n\r\n            prev = coord;\r\n        }\r\n\r\n        if(this.leftToEdge(point, prev, first)) intersecsCount++;\r\n\r\n        //console.log(intersecsCount);\r\n\r\n        return (intersecsCount % 2 === 1);\r\n    }\r\n\r\n    leftToEdge(point, prev, coord){\r\n        if(coord[0] === point[0] && coord[1] === point[1]) return true;\r\n        if(prev[0] === point[0] && prev[1] === point[1]) return true;\r\n\r\n        const y = [coord[1], prev[1]];\r\n        y.sort();\r\n        const [minY, maxY] = y;\r\n\r\n        if(point[1]>=maxY || point[1]<=minY) return false;\r\n\r\n        const deltaX = prev[0]-coord[0];\r\n\r\n        if(!deltaX) return point[0]<=prev[0];\r\n\r\n        const ang = (prev[1]-coord[1])/deltaX;\r\n        \r\n        const coefLin = prev[0] - prev[0]*ang;\r\n\r\n        return (point[0] <= (point[1]-coefLin)/ang);\r\n    }\r\n\r\n    draw(){\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = 1000;\r\n        canvas.height = 1000;\r\n        canvas.style.backgroundColor = \"rgb(100, 0, 0)\";\r\n\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.beginPath();\r\n\r\n        let first;\r\n\r\n        for(let entry of this.#borderMap.entries()){\r\n            const i = entry[1]*4;\r\n            const coord = [this.#coords[i], this.#coords[i+1], this.#coords[i+2]];\r\n\r\n            if(!first) {\r\n                first = coord;\r\n                ctx.moveTo(coord[0]*500+250, (-coord[1]+1.0)*500);\r\n            } else ctx.lineTo(coord[0]*500+250, (-coord[1]+1.0)*500);\r\n\r\n        }\r\n        ctx.lineTo(first[0]*500+250, (-first[1]+1.0)*500)\r\n        ctx.stroke();\r\n\r\n        if(this.#lastClickMin)\r\n            ctx.fillRect(this.#lastClickMin[0]*500+250, (-this.#lastClickMin[1]+1.0)*500, 5, 5);\r\n            \r\n        if(this.#lastClickMax)\r\n            ctx.fillRect(this.#lastClickMax[0]*500+250, (-this.#lastClickMax[1]+1.0)*500, 5, 5);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    static multiplyMatWithVec(mat, vec){\r\n        const out = new Array(vec.length).fill(0);\r\n    \r\n        if(Math.round(vec.length**2) !== mat.length)\r\n            return;\r\n    \r\n        for(let i = 0; i<vec.length; i++)\r\n            for(let j = 0; j<mat.length; j+=4)\r\n                out[i]+=mat[j+i]*vec[j/4];\r\n\r\n        return out;\r\n    }\r\n\r\n    static scalarMulti(vector, scalar){\r\n        return vector.map(coord => coord*scalar);\r\n    }\r\n}\r\n\r\nclass Line{\r\n    #origin;\r\n    #direction;\r\n\r\n    constructor(extreme, origin){\r\n        const vDir = this.#getDirection(extreme, origin);\r\n\r\n        this.#direction = vDir;\r\n        this.#origin = origin;\r\n    }\r\n\r\n    getPoint(t){\r\n        return this.#origin.map((coord, index) => coord+t*this.#direction[index]);\r\n    }\r\n\r\n    pointWhenZIs(z){\r\n        const t = (z - this.#origin[2])/this.#direction[2];\r\n\r\n        return this.getPoint(t);\r\n    }\r\n\r\n    #getDirection(extreme, origin){\r\n        const v = extreme.map((coord, index)=>coord-origin[index]);\r\n\r\n        const size = Math.sqrt(v.reduce((ac, coord) => ac+coord**2, 0));\r\n\r\n        const vDir = v.map(val=> val/size);\r\n\r\n        return vDir;\r\n    }\r\n}","import countryVert from \"../../../shaders/countryVert\";\r\nimport phongFrag from \"../../../shaders/phongFrag\";\r\nimport CanvasImage from \"../../../view/canvasImage\";\r\nimport IndexedMeshT from \"../../../webgl/indexed-mesh\";\r\n\r\nexport default class Country {\r\n    #name;\r\n    #path;\r\n    #neighbors;\r\n    #owner;\r\n    #continent;\r\n    #soldiers;\r\n    #mesh;\r\n\r\n    constructor(name, path, continent, neighbors) {\r\n        this.#name = name;\r\n        this.#path = path;\r\n        this.#neighbors = neighbors;\r\n        this.#owner = null;\r\n        this.#continent = null;\r\n        this.continent = continent;\r\n        this.#soldiers = 1;\r\n    }\r\n    \r\n    get name() {\r\n        return this.#name;\r\n    }\r\n    \r\n    get path() {\r\n        return this.#path;\r\n    }\r\n    \r\n    get neighbors() {\r\n        return this.#neighbors;\r\n    }\r\n    \r\n    get owner() {\r\n        return this.#owner;\r\n    }\r\n    \r\n    get continent() {\r\n        return this.#continent;\r\n    }\r\n\r\n    get soldiers() {\r\n        return this.#soldiers;\r\n    }\r\n    \r\n    get mesh(){\r\n        return this.#mesh;\r\n    }\r\n    \r\n    set continent(continent) {\r\n        this.#continent = continent;\r\n        continent.addCountry(this);\r\n    }\r\n\r\n    set owner(newOwner) {\r\n        this.#owner = newOwner;\r\n    }\r\n\r\n    set soldiers(soldiers) {\r\n        this.#soldiers = soldiers;\r\n    }\r\n\r\n    //Retorna o indíce do vizinho, se tiver e se não tiver retorna -1\r\n    findNeighbor(name) {\r\n        for(let i = 0; i < this.#neighbors.length; i++) {\r\n            if(this.#neighbors[i] == name) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    async loadMesh(path, gl, scale){\r\n        this.#mesh = await IndexedMeshT.loadMeshFromObj(path, gl, countryVert, phongFrag);\r\n        this.#mesh.scale = [scale, scale, 1];\r\n\r\n        const center = this.#mesh.center;\r\n\r\n        //this.soldiersView = new SoldiersView();\r\n        //await this.soldiersView.init(center[0]*scale, center[1]*scale, this.#soldiers, gl);\r\n    }\r\n\r\n    draw(camera){\r\n        this.#mesh.draw(camera);\r\n        //this.soldiersView.draw(camera);\r\n    }\r\n}\r\n\r\nclass SoldiersView{\r\n    #image;\r\n\r\n    async init(x, y, soldiers, gl){\r\n        const cImage = new CanvasImage();\r\n        await cImage.init(gl);\r\n\r\n        cImage.positionX = x;\r\n        cImage.positionY = y;\r\n    \r\n        await cImage.update(ctx =>{\r\n            if (!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n            ctx.font = \"100px Arial\";\r\n            ctx.fillText(soldiers.toString(), 320, 600);\r\n        }, gl);\r\n\r\n        this.#image = cImage;\r\n    }\r\n\r\n    draw(camera){\r\n        this.#image.draw(camera);\r\n    }\r\n}","export default \r\n    `#version 300 es\r\n    precision highp float;\r\n\r\n    uniform mat4 model;\r\n    uniform mat4 view;\r\n    uniform mat4 projection;\r\n    uniform vec4 color;\r\n\r\n    in vec4 position;\r\n    in vec4 normal;\r\n\r\n    out vec4 fPos;\r\n    out vec4 fColor;\r\n    out vec4 fNormal;\r\n\r\n    void main() {\r\n        gl_Position = (projection*view*model) * position;\r\n        gl_Position /= gl_Position.w;\r\n        fColor = color;\r\n        fPos = position;\r\n        fNormal = normal;\r\n    }\r\n`","export default \r\n    `#version 300 es\r\n    precision highp float;\r\n    \r\n    uniform mat4 model;\r\n    uniform mat4 view;\r\n    uniform mat4 projection;\r\n\r\n    uniform vec3 amb_c;\r\n    uniform vec3 dif_c;\r\n    uniform vec3 esp_c;\r\n    uniform vec3 pos;\r\n    uniform float amb_k;\r\n    uniform float dif_k;\r\n    uniform float esp_k;\r\n    uniform float esp_p;\r\n\r\n    in vec4 fColor;\r\n    in vec4 normal;\r\n    in vec4 fPos;\r\n    in vec4 fNormal;\r\n\r\n    out vec4 color;\r\n\r\n    void main() {\r\n        mat4 modelView = view*model;\r\n\r\n        vec3 lightPos = (view * vec4(pos, 1.0)).xyz;\r\n        vec3 pos = -(modelView * fPos).xyz;\r\n\r\n        vec3 vNormal = normalize(inverse(transpose(modelView)) * fNormal).xyz;\r\n        vec3 vDistance = normalize(pos - lightPos);\r\n\r\n        vec3 normalPos = normalize(pos);\r\n\r\n        vec3 halfVector= normalize(vDistance + normalPos);\r\n\r\n        vec3 amb = amb_k * amb_c;\r\n\r\n        vec3 diff = max(dot(vNormal, vDistance), 0.0) * dif_k * dif_c;\r\n\r\n        vec3 spec = max(pow(dot(vNormal, halfVector), esp_p), 0.0) * esp_c * esp_k;\r\n\r\n        vec3 color3 = vec3(fColor);\r\n        \r\n        color3 = 0.5*color3 + 0.5*(diff + amb + spec);\r\n\r\n        color = vec4(color3, 1.0);\r\n    }\r\n`","import { mat4 } from \"gl-matrix\";\r\n\r\nexport default class Camera{\r\n    #view_matrix = mat4.create();\r\n    #proj_matrix = mat4.create();\r\n    #viewProjMatrix = mat4.create();\r\n\r\n    camPosition = [0,0,1];\r\n    lookDirection = [0,0,0];\r\n    upDirection = [0,1,0];\r\n\r\n    left = -4.0;\r\n    right = 4.0;\r\n    bottom = -4.0;\r\n    top = 4.0;\r\n    near = 1.0;\r\n    far = 9.0;\r\n\r\n    fovy = Math.PI/2;\r\n    aspect;\r\n\r\n    constructor(canvas){\r\n        this.aspect = canvas.width / canvas.height;\r\n    }\r\n\r\n    #typeOfProjection = \"perspective\";\r\n\r\n    set projectionType(type){\r\n        if(type !== \"orthogonal\" && type !== \"perspective\") \r\n            throw new Error(\"Invalid type of projection.\");\r\n\r\n        this.#typeOfProjection = type;\r\n    }\r\n\r\n    get viewMatrix(){\r\n        this.#updateViewMatrix();\r\n        return this.#view_matrix;\r\n    }\r\n\r\n    get projMatrix(){\r\n        this.#updateProjMatrix();\r\n        return this.#proj_matrix;\r\n    }\r\n\r\n    #updateViewMatrix(){\r\n        mat4.identity(this.#view_matrix);\r\n        mat4.lookAt(this.#view_matrix, this.camPosition, this.lookDirection, this.upDirection);\r\n    }\r\n\r\n    #updateProjMatrix(){\r\n        mat4.identity(this.#proj_matrix);\r\n        if(this.#typeOfProjection === \"perspective\")\r\n            mat4.perspective(this.#proj_matrix, this.fovy, this.aspect, this.near, this.far);\r\n        else\r\n            mat4.ortho(this.#proj_matrix, this.left*this.aspect, this.right*this.aspect, this.bottom, this.top, this.left, this.right);\r\n    }\r\n\r\n    get viewProjection(){\r\n        this.#updateViewMatrix();\r\n        this.#updateProjMatrix();\r\n        mat4.identity(this.#viewProjMatrix);\r\n        mat4.multiply(this.#viewProjMatrix, this.#proj_matrix, this.#view_matrix);\r\n\r\n        return this.#viewProjMatrix;\r\n    }\r\n}","export default class Light{\r\n    ambColor = [0.0, 0.0, 0.0];\r\n    ambK = 0.5;\r\n\r\n    difColor = [0.3, 0.3, 0.3];\r\n    difK = 0.4;\r\n\r\n    espColor = [1.0, 1.0, 1.0];\r\n    espK = 0.1;\r\n    espExp = 20.0;\r\n\r\n    pos;\r\n\r\n    constructor(pos){\r\n        this.pos = pos;\r\n    }\r\n\r\n    createUniforms(mesh){\r\n        mesh.setUniformValue(\"amb_c\", this.ambColor, \"3fv\");\r\n        mesh.setUniformValue(\"amb_k\", this.ambK, \"1f\");\r\n        mesh.setUniformValue(\"dif_c\", this.difColor, \"3fv\");\r\n        mesh.setUniformValue(\"dif_k\", this.difK, \"1f\");\r\n        mesh.setUniformValue(\"esp_c\", this.espColor, \"3fv\");\r\n        mesh.setUniformValue(\"esp_k\", this.espK, \"1f\");\r\n        mesh.setUniformValue(\"esp_p\", this.espExp, \"1f\");\r\n    }\r\n\r\n}","import Country from \"../model/map/territories/country\";\r\nimport Camera from \"./camera\";\r\nimport Light from \"./light\";\r\nimport Mesh from \"./mesh\";\r\n\r\nexport default class Scene{\r\n    #drawnables = [];\r\n    #light;\r\n    #camera;\r\n\r\n    #fadeLight;\r\n\r\n    #fadeMode = false;\r\n\r\n    get camera(){\r\n        return this.#camera;\r\n    }\r\n\r\n    get light(){\r\n        return this.#light;\r\n    }\r\n\r\n    constructor(gl, clearColor = [0.0, 0.0, 0.0, 1.0]){\r\n        if(!(gl instanceof WebGL2RenderingContext))\r\n            return;\r\n\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n        if(!clearColor || !clearColor.length || clearColor.length !== 4)\r\n            throw new Error(\"The clear color need to be a array with 4 floats\");\r\n\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        this.gl = gl;\r\n    }\r\n\r\n    createCamera(canvas){\r\n        this.#camera = new Camera(canvas);\r\n    }\r\n\r\n    createLight(position){\r\n        this.#light = new Light(position);\r\n        this.#fadeLight = new Light(position);\r\n\r\n        this.#fadeLight.ambK = 0.3;\r\n        this.#fadeLight.difK = 0.4;\r\n        this.#fadeLight.espK = 0.3;\r\n\r\n        this.#fadeLight.ambColor = [0.5, 0.5, 0.5]; \r\n    }\r\n\r\n    appendElement(...drawnables){\r\n        drawnables.forEach(drawnable => {\r\n            if(!drawnable.draw)\r\n                throw new Error(\"Element need to have a draw function\");\r\n\r\n            this.#drawnables.push(drawnable);\r\n\r\n            if(this.#light && drawnable instanceof Mesh) this.#light.createUniforms(drawnable);\r\n            \r\n            if(this.#light && drawnable instanceof Country) this.#light.createUniforms(drawnable.mesh);\r\n        });\r\n    }\r\n\r\n    switchLight(){\r\n        if(!this.#light) \r\n            throw new Error(\"there is no lights to be switched.\");\r\n\r\n            this.#fadeMode = !this.#fadeMode;\r\n\r\n        const light = (this.#fadeMode)? this.#fadeLight: this.#light;\r\n\r\n        this.#drawnables.forEach(drawnable =>{\r\n            if(drawnable instanceof Mesh)\r\n                light.createUniforms(drawnable);\r\n\r\n            if(drawnable instanceof Country)\r\n                light.createUniforms(drawnable.mesh);\r\n        });\r\n    }\r\n\r\n    draw(){\r\n        for(let element of this.#drawnables){\r\n            element.draw(this.#camera);\r\n        }\r\n    }\r\n\r\n}","export default class Dice{\r\n    static rollDice(numDice) {\r\n        const diceRolls = [];\r\n        for (let i = 0; i < numDice; i++) {\r\n            diceRolls.push(Math.floor(Math.random() * 6) + 1);\r\n        }\r\n        return diceRolls;\r\n    }\r\n}","//FASE DE ATAQUE\r\n// escolher o territorio que ele deseja utilizar para atacar\r\n// escolher o territorio inimigo que ele deseja atacar\r\n// verificar o territorio inimigo \r\n// calcular se o ataque foi vencedor\r\n// se vencedor, o jogador recebe um novo continente\r\n// se perdedor atualiza o n de tropas \r\n// verificar se o jogador ainda possui tropas para fazer outro ataque\r\n// passa para o proximo jogador\r\n//Perguntar ao Bruno como importar o json de maneira correta***\r\n\r\nimport Dice from \"../tools/dice.js\";\r\n\r\nclass Attack {\r\n    attackPlayer(countryAttack, countryDefense) {\r\n        /*if(!this.isValidCountry(countryAttack) || !this.isValidCountry(countryDefense)) {\r\n            throw new Error(\"Invalid countries\");\r\n        }*/\r\n    \r\n        const dicesAttack =  this.calcDices(countryAttack, true);\r\n        const dicesDefense = this.calcDices(countryDefense, false);\r\n\r\n        if(dicesAttack === 0) return alert(\"Ataque invalido\");\r\n    \r\n        const attackDiceRolls = Dice.rollDice(dicesAttack);\r\n        const defendDiceRolls = Dice.rollDice(dicesDefense);\r\n\r\n\r\n        let attackWins = 0;\r\n        let defenseWins = 0;\r\n    \r\n        attackDiceRolls.sort().reverse();\r\n        defendDiceRolls.sort().reverse();\r\n\r\n        console.log(attackDiceRolls);\r\n        console.log(defendDiceRolls);\r\n\r\n        for (let i = 0; i < Math.min(dicesAttack, dicesDefense); i++) {\r\n            if (attackDiceRolls[i] > defendDiceRolls[i]) {\r\n                attackWins++;\r\n            } else {\r\n                defenseWins++;\r\n            }\r\n        }\r\n\r\n        console.log(`vitórias do ataque: ${attackWins}, vitórias da defesa: ${defenseWins}`);\r\n\r\n        countryAttack.soldiers -= defenseWins;\r\n        countryDefense.soldiers -= attackWins;\r\n    }\r\n\r\n    calcDices(country, isAttack) {\r\n        if(isAttack) {\r\n            var dice = country.soldiers-1;\r\n            if(dice > 3) dice = 3;\r\n            return dice;\r\n        }\r\n\r\n        var dice = country.soldiers;\r\n        if(dice > 3) dice = 3;\r\n        return dice;\r\n    }\r\n\r\n    getCountryObject(country) {\r\n        return this.countries.find((c) => c.name === country);\r\n    }\r\n\r\n    isValidCountry(country) {\r\n        return this.countries.includes(country);\r\n    }\r\n}\r\n\r\nexport class Player {\r\n    #name;\r\n    #color;\r\n    #territoriesOwned;\r\n    #continentsOwned;\r\n    #goal;\r\n    #freeTroops;\r\n\r\n    constructor(name, color, goal) {\r\n      this.#name = name;\r\n      this.#color = color; // pode ser usado como ID \r\n      this.#territoriesOwned = [];\r\n      this.#continentsOwned = [];\r\n      this.#goal = goal;\r\n      this.#freeTroops = 0;\r\n    }\r\n  \r\n    conquestTerritory(territorio) {\r\n      this.#territoriesOwned.push(territorio);\r\n    }\r\n    \r\n\r\n    receiveTroop(){\r\n\r\n        //calcula a quantidade de tropas a ser recebida devio a quantidade de territorios        \r\n        const qtdreceivedTroops = Math.floor(this.#territoriesOwned.length / 2);\r\n\r\n        //calcula a quantidade de tropas a ser recebida devio aos bonus de continente\r\n        \r\n        //a fazer\r\n\r\n        this.#freeTroops = qtdreceivedTroops;\r\n    }\r\n\r\n\r\n    addTroops(country,qtdTroops){\r\n        if(qtdTroops <=  this.#freeTroops){\r\n            country.soldiers = country.soldiers + qtdTroops;\r\n            this.#freeTroops -= qtdTroops;\r\n        }\r\n    }\r\n\r\n    attack(base, to){\r\n        const att = new Attack();\r\n        att.attackPlayer(base, to);\r\n        console.log(base.soldiers, to.soldiers);\r\n    }\r\n    \r\n    \r\n    get name(){\r\n        return this.#name;\r\n    }\r\n\r\n    get color(){\r\n        return this.#color;\r\n    }\r\n\r\n    get freeTroops(){\r\n        return this.#freeTroops;\r\n    }\r\n\r\n    get territoriesOwned(){\r\n        return this.#territoriesOwned.length;\r\n    }\r\n\r\n    get vetTerritoriesOwned(){\r\n        return this.#territoriesOwned;\r\n    }\r\n\r\n    get continentsOwned(){\r\n        return this.#continentsOwned.length;\r\n    }\r\n\r\n    get vetContinentsOwned(){\r\n        return this.#continentsOwned;\r\n    }\r\n\r\n    get goal(){\r\n        return this.#goal.goal;\r\n    }\r\n\r\n    get goalId(){\r\n        return this.#goal.id;\r\n    }\r\n}\r\n","import Country from \"./country\";\r\n\r\nexport default class Continent {\r\n    #name;\r\n    #countries;\r\n    #bonus;\r\n    #owner;\r\n\r\n    constructor(name, bonus) {\r\n        this.#name = name;\r\n        this.#countries = [];\r\n        this.#bonus = bonus;\r\n        this.#owner = null;\r\n    }\r\n\r\n    addCountry(country) {\r\n        this.#countries.push(country);\r\n    }\r\n\r\n    get name() {\r\n        return this.#name;\r\n    }\r\n\r\n    get countries() {\r\n        return this.#countries;\r\n    }\r\n\r\n    get bonus() {\r\n        return this.#bonus;\r\n    }\r\n\r\n    get owner(){\r\n        return this.#owner;\r\n    }\r\n\r\n    set owner(owner){\r\n        this.#owner = owner;\r\n    }\r\n}","import Continent from \"./continent.js\";\r\nimport Country from \"./country\";\r\n\r\nexport default class TerritoryController {\r\n    #continents;\r\n    #countries;\r\n\r\n    /*constructor() {\r\n        this.#continents = [];\r\n        this.#countries = [];\r\n        \r\n        this.loadContinents();\r\n        this.loadCountries();\r\n    }*/\r\n\r\n    async init(gl, scale){\r\n\r\n        this.#continents = [];\r\n        this.#countries = [];\r\n        \r\n        await this.loadContinents();\r\n        await this.loadCountries(gl, scale);\r\n    }\r\n\r\n    async loadContinents() {\r\n        const json = await fetch(\"./assets/data/continent-constructor.json\");\r\n        const continents = await json.json();\r\n\r\n        for(let i = 0; i < continents.data.length; i++) {\r\n            let newContinent = new Continent(continents.data[i].name, continents.data[i].bonus);\r\n            this.#continents.push(newContinent);\r\n        }\r\n    }\r\n\r\n    async loadCountries(gl, scale) {\r\n        const countriesJson = await fetch(\"./assets/data/country-constructor.json\");\r\n        const countries = await countriesJson.json();\r\n\r\n        for(let i = 0; i < countries.data.length; i++) {\r\n            const continent = this.#continents.find(value => value.name === countries.data[i].continent);\r\n\r\n            let newCountry = new Country(countries.data[i].name, countries.data[i].path, continent, countries.data[i].neighbors);\r\n            await newCountry.loadMesh(countries.data[i].path, gl, scale);\r\n\r\n            this.#countries.push(newCountry);\r\n        }\r\n    }\r\n\r\n    conquerCountry(country, newOwner) {\r\n        countryFound = this.findCountry(country);\r\n        if(!countryFound) {\r\n            countryFound.owner = newOwner;\r\n        }\r\n    }\r\n\r\n    findCountry(country) {\r\n        for(let i = 0; i < this.#countries; i++) {\r\n            if(this.#countries[i].name == country) {\r\n                return this.#countries[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    get continents() {\r\n        return this.#continents;\r\n    }\r\n\r\n    get countries() {\r\n        return this.#countries;\r\n    }\r\n\r\n    troop_reassignment(base, destiny, qtd){\r\n        if(!(base instanceof(Country)) || !(destiny instanceof(Country)) || !(qtd instanceof int)){\r\n            throw new Error(\"Parametro invalido\");       \r\n        }\r\n        if(base.findNeighbor(destiny)){\r\n            if(!(base.soldier > qtd)){\r\n                throw new Error(\"quantidade de tropas invalidas\");\r\n            }\r\n            base.soldier -= qtd;\r\n            destiny.soldier += qtd;\r\n        }\r\n    }\r\n    //verificar se precisa retornar alguma coisa\r\n\r\n    clickedCountry(x, y, camera){\r\n        for(let country of this.#countries){\r\n            if(country.mesh.pointCollision(x, y, camera))\r\n                return country;\r\n        }\r\n    \r\n        return null;\r\n    }\r\n}","export default class TurnsManager{\r\n    #state;\r\n    #currPlayerIndex;\r\n    #players;\r\n\r\n    static DISTRIBUCTION = 0;\r\n    static ATTACK = 1;\r\n    static REASSIGNMENT = 2;\r\n    static EXCHANGE_CARDS = 3;\r\n    static FREEZE = 4; // freeze events until next player be provided\r\n\r\n    constructor(players){\r\n        this.#players = players;\r\n        this.#currPlayerIndex = 0;\r\n        this.#state = TurnsManager.DISTRIBUCTION;\r\n        this.#players[this.#currPlayerIndex].receiveTroop();\r\n    }\r\n\r\n    nextPlayer(){\r\n        this.#currPlayerIndex = (this.#currPlayerIndex+1)%this.#players.length;\r\n        this.#state = TurnsManager.DISTRIBUCTION;\r\n        this.#players[this.#currPlayerIndex].receiveTroop();\r\n    }\r\n\r\n    get player(){\r\n        return this.#players[this.#currPlayerIndex];\r\n    }\r\n\r\n    get state(){\r\n        return this.#state;\r\n    }\r\n\r\n    nextState(){\r\n        if(this.#state < TurnsManager.FREEZE)\r\n            this.#state++;\r\n    }\r\n}","import TurnsManager from \"../model/player/turns_manager\";\r\nimport { Player } from \"../model/player/player\";\r\n\r\nexport default class CountryEventsHandler{\r\n    #country = null;\r\n\r\n    constructor(game){\r\n\r\n        //this.#country = territoryController.countries.find(c => c.name===\"México\");\r\n\r\n        game.gl.canvas.addEventListener(\"click\", e=>{\r\n            //if(game.turnsManager.state === TurnsManager.FREEZE) return;\r\n\r\n            console.log(game.inGame, game.turnsManager.state);\r\n\r\n            if(!game.inGame) return;\r\n    \r\n            const point = CountryEventsHandler.mapClickInCanvas(e.clientX, e.clientY, game.gl.canvas);\r\n    \r\n            const country = game.territoryController.clickedCountry(...point, game.gameScene.camera);\r\n\r\n            if(country)\r\n                alert(country.name);\r\n\r\n            // country events é um dicionário de funções, onde as chaves são os estados\r\n            // essa linha chama uma função de acordo com o estado do jogo atual\r\n\r\n            //if(country) countryEvents.get(game.turnsManager.state)(game, country);\r\n            if(country) countryEvents.get(TurnsManager.ATTACK)(game, country);\r\n\r\n            this.#country = country;\r\n\r\n            this.#country.mesh.pointCollision(...point, game.gameScene.camera);\r\n        });\r\n\r\n        let child;\r\n\r\n        document.body.addEventListener(\"keydown\", e=>{\r\n            if(e.key===\"d\" && this.#country) {\r\n                child = this.#country.mesh.drawBorder;\r\n                document.body.appendChild(child);\r\n            }\r\n\r\n            if(e.key === \"s\"){\r\n                document.body.removeChild(child);\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    static mapClickInCanvas(x, y, canvas){\r\n        const mappedOnCenter = [\r\n            (x - canvas.offsetLeft) - canvas.width/2, \r\n            (canvas.height/2) - (y - canvas.offsetTop)\r\n        ];\r\n    \r\n        return [mappedOnCenter[0]*2/canvas.width, mappedOnCenter[1]*2/canvas.height];\r\n    }\r\n}\r\n\r\nconst countryEvents = new Map();\r\n\r\nconst attack = {}\r\n\r\nconst distribuction = null;\r\n\r\ncountryEvents.set(TurnsManager.ATTACK, (game, country)=>{\r\n    const player = game.turnsManager.player;\r\n    const territoryController = game.territoryController;\r\n    \r\n    //console.log(country.owner, player);\r\n\r\n    if(!attack.base) {\r\n\r\n        if(country.owner === player){\r\n            alert(\"entrou\");\r\n\r\n            const neighbors = territoryController.countries.filter(c =>{\r\n                if(country.neighbors.indexOf(c.name) !== -1 && c.owner !== country.owner)\r\n                    return c;\r\n            })\r\n\r\n            if(neighbors.length === 0) return;\r\n\r\n            game.gameScene.switchLight();\r\n\r\n            attack.base = country;\r\n            country.mesh.position[2] = 0.03;\r\n            country.mesh.scale[2] = 2;\r\n\r\n            game.gameScene.light.createUniforms(country.mesh);\r\n\r\n            neighbors.forEach(neighbor => {\r\n                if(neighbor.owner === player) return;\r\n\r\n                neighbor.mesh.position[2] = 0.03;\r\n                neighbor.mesh.scale[2] = 2;\r\n\r\n                game.gameScene.light.createUniforms(neighbor.mesh);\r\n            });\r\n\r\n            console.log(neighbors);\r\n            //country.mesh.scale[2] = 3;\r\n\r\n            attack.neighbors = neighbors;\r\n        }\r\n    }else{\r\n        if(attack.neighbors.indexOf(country) === -1) return;\r\n\r\n        alert(`from ${attack.base.name} to ${country.name}`);\r\n\r\n        player.attack(attack.base, country);\r\n\r\n        game.gameScene.switchLight();\r\n\r\n        attack.neighbors.forEach(neighbor => {\r\n            if(neighbor.owner === player) return;\r\n\r\n            neighbor.mesh.position[2] = 0.0;\r\n            neighbor.mesh.scale[2] = 1;\r\n\r\n            game.gameScene.light.createUniforms(neighbor.mesh);\r\n        });\r\n        \r\n        attack.base.mesh.position[2] = 0.0;\r\n        attack.base.mesh.scale[2] = 1;\r\n\r\n        attack.base = null;\r\n        attack.neighbors = null;\r\n        game.tView.update();\r\n    }\r\n})\r\n\r\ncountryEvents.set(TurnsManager.DISTRIBUCTION, (game, country)=>{\r\n    console.log(\"dist\", distribuction);\r\n    if(!distribuction && country.owner === game.turnsManager.player){\r\n        game.gameScene.switchLight();\r\n\r\n        attack.base = country;\r\n        country.mesh.position[2] = 0.03;\r\n        country.mesh.scale[2] = 2;\r\n\r\n        game.gameScene.light.createUniforms(country.mesh);\r\n\r\n        console.log(game.fortify);\r\n\r\n        game.fortify.up();\r\n\r\n        distribuction = country;\r\n\r\n    }\r\n})\r\n\r\ncountryEvents.set(TurnsManager.REASSIGNMENT, (turnsManager, country)=>{\r\n\r\n})\r\n\r\n","import Mesh from \"../webgl/mesh\";\r\nimport ImageGL from \"./image\";\r\n\r\nexport default class CanvasImage extends ImageGL{\r\n    #canvas;\r\n\r\n    async init(gl, canvasDimension = 1000){\r\n        const canvas = document.createElement(\"canvas\");\r\n        const image = canvas.toDataURL(\"image/png\");\r\n\r\n        [canvas.width, canvas.height] = [canvasDimension, canvasDimension];\r\n\r\n        await super.init(gl, image);\r\n        this.#canvas = canvas;\r\n    }\r\n\r\n    async update(drawCanvas = ()=>{}, gl){\r\n        const ctx = this.#canvas.getContext(\"2d\");\r\n\r\n        drawCanvas(ctx);\r\n\r\n        const image = this.#canvas.toDataURL(\"image/png\");\r\n        const imageElement = await ImageGL.loadImage(image);\r\n    \r\n        Mesh.changeTex(gl, this._tex, imageElement);\r\n    }\r\n\r\n}","import CanvasImage from \"./canvasImage\";\r\n\r\nexport default class TroopsView{\r\n    #image;\r\n    #countries;\r\n    #gl;\r\n    #cImage\r\n\r\n    async init(countries, scale, gl){\r\n        this.#countries = countries;\r\n        this.#gl = gl;\r\n        this.#cImage = new CanvasImage();\r\n        await this.#cImage.init(gl);\r\n\r\n        this.#cImage.scale = [2.5, 5.0];\r\n\r\n        this.#cImage.depth = 0.1;\r\n    \r\n        await this.update();\r\n\r\n        this.#image = this.#cImage;\r\n    }\r\n\r\n    async update() {\r\n\r\n        await this.#cImage.update(ctx =>{\r\n            ctx.clearRect(0, 0, this.#gl.canvas.width, this.#gl.canvas.height);\r\n            if (!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n            this.#countries.forEach(country => {\r\n                const center = country.mesh.center;\r\n\r\n                ctx.fillStyle = \"white\";\r\n                \r\n                ctx.font = \"30px Arial\";\r\n                ctx.fillText(country.soldiers+\"\", (center[0] + 0.5)*1000 - 10, (-center[1]+0.5)*1000)+10;\r\n            });\r\n\r\n        }, this.#gl);\r\n    }\r\n\r\n    draw(camera){\r\n        this.#image.draw(camera);\r\n    }\r\n}\r\n","import { Player } from \"../player/player\";\r\n//Carregar os objetivos\r\n//Atribuir um objetivo para cada jogador ao inicio da partida\r\n\r\nexport default class Goal{\r\n    #goals = []; //vetor de objetivos\r\n    #goalCount; //numero de objetivos no vetor\r\n    #goalToReturn //objetivo a ser retornado\r\n    \r\n    get getGoal(){\r\n        return this.#goalToReturn;\r\n    }\r\n\r\n    async loadGoals(){\r\n        const json = await fetch(\"./assets/data/goals.json\");\r\n        const goals = await json.json();\r\n        \r\n        this.#goalCount = goals.data.length;\r\n        \r\n        for(let i = 0; i < this.#goalCount; i++) {\r\n            let goal = goals.data[i]\r\n            this.#goals.push(goal);\r\n        }\r\n    }\r\n    \r\n    async sortGoal(player, color) {\r\n        const colorName = this.colorName(color);\r\n        let index = Math.floor(Math.random() * this.#goalCount);\r\n        \r\n        if(this.#goals[index].owner == \"\"){\r\n            if(\r\n                (this.#goals[index].id == 8  && colorName == 'azul')     ||\r\n                (this.#goals[index].id == 9  && colorName == 'amarelo')  ||\r\n                (this.#goals[index].id == 10  && colorName == 'vermelho')||\r\n                (this.#goals[index].id == 11  && colorName == 'preto')   ||\r\n                (this.#goals[index].id == 12  && colorName == 'branco')  ||\r\n                (this.#goals[index].id == 13  && colorName == 'verde') \r\n            \r\n            ){\r\n                this.sortGoal(player, color);\r\n            }else{\r\n                this.#goals[index].owner = player;\r\n                this.#goalToReturn = this.#goals[index];\r\n            }\r\n        }else{\r\n            this.sortGoal(player, color);\r\n        }\r\n    }\r\n\r\n    \r\n    //se o objetivo do jogador estiver entre 8 e 13 chamar essa função.\r\n    verifyDestroy(player, vetPlayer){\r\n        let colorName;\r\n        switch(player.goalId) {\r\n            case 8:\r\n                colorName = \"azul\";\r\n                break;\r\n            case 9:\r\n                colorName = \"amarelo\";\r\n                break;\r\n            case 10:\r\n                colorName = \"vermelho\";\r\n                break;\r\n            case 11:\r\n                colorName = \"preto\";\r\n                break;\r\n            case 12:\r\n                colorName = \"branco\";\r\n                break;\r\n            case 13:\r\n                colorName = \"verde\";\r\n                break;\r\n            default:\r\n                colorName = \"\";\r\n                break;\r\n        }\r\n\r\n        if(colorName == \"\") return false;\r\n\r\n        for(let i = 0; i < 6; i++){\r\n            let playerColor = this.colorName(vetPlayer[i].color);\r\n            \r\n            if(playerColor == colorName){\r\n                if(vetPlayer[i].continentsOwned != 0){\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    //se o objetivo do jogador estiver entre 0 e 5 chamar essa função\r\n    verifyContinent(player){\r\n        let continentCount;\r\n        let continents = [];\r\n        let verify = false;\r\n\r\n        switch(player.goalId){\r\n            case 0:\r\n                continentCount = 3;\r\n                continents = [\"Europa\", \"Oceania\"];\r\n                break;\r\n            case 1:\r\n                continentCount = 2;\r\n                continents = [\"Ásia\", \"América do Sul\"];\r\n                break;\r\n            case 2:\r\n                continentCount = 3;\r\n                continents = [\"Europa\", \"América do Sul\"];\r\n                break;\r\n            case 3:\r\n                continentCount = 2;\r\n                continents = [\"Ásia\", \"África\"];\r\n                break;\r\n            case 4:\r\n                continentCount = 2;\r\n                continents = [\"América do Norte\", \"África\"];\r\n                break;\r\n            case 5:\r\n                continentCount = 2;\r\n                continents = [\"América do Norte\", \"Oceania\"];\r\n                break;\r\n        }\r\n\r\n        if(player.continentsOwned >= continentCount){\r\n            verify = continents.every(continent => player.vetContinentsOwned.includes(continent));\r\n        }\r\n       \r\n        return verify\r\n        \r\n    }\r\n\r\n    //se o objetivo do jogador for o 6 ou 7;\r\n    verifyTerritory(player){\r\n        let territoryCount;\r\n        let territoryTroops;\r\n        let verify;\r\n\r\n        switch(player.goalId){\r\n            case 6:\r\n                territoryCount = 18;\r\n                territoryTroops = 2;\r\n                break;\r\n            case 7:\r\n                territoryCount = 24;\r\n                territoryTroops = 1;\r\n                break;\r\n        }\r\n\r\n        if(player.territoriesOwned >= territoryCount){\r\n            for(let i = 0; i < player.territoriesOwned; i++){\r\n                if(player.vetTerritoriesOwned[i].soldiers >= territoryTroops){\r\n                    verify = true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return verify;\r\n    }\r\n\r\n    \r\n    colorName(color){\r\n        if(`${color}` == '0,0,1,1'){\r\n            return 'azul';\r\n        }else if(`${color}` == '1,1,0,1'){\r\n            return 'amarelo';\r\n        }else if(`${color}` == '1,0,0,1'){\r\n            return 'vermelho';\r\n        }else if(`${color}` == '1,1,1,1'){\r\n            return 'preto';\r\n        }else if(`${color}` == '0,0,0,1'){\r\n            return 'branco';\r\n        }else if(`${color}` == '0,0.4,0,1'){\r\n            return 'verde';\r\n        }\r\n    }\r\n}","import ImageGL from \"./view/image\";\r\nimport Scene from \"./webgl/scene\";\r\nimport { Player } from \"./model/player/player\";\r\nimport TerritoryController from \"./model/map/territories/territory-controller\";\r\nimport TurnsManager from \"./model/player/turns_manager\";\r\nimport CountryEventsHandler from \"./events/events_manager\";\r\nimport TroopsView from \"./view/troopsView\";\r\nimport Goal from \"./model/tools/goal\";\r\n\r\nclass Game{\r\n    #menuScene;\r\n    #gameScene;\r\n    #guiScene;\r\n    #background;\r\n    #tView;\r\n\r\n    #territoryController;\r\n\r\n    #scale = 4.5;\r\n\r\n    #inGame = false;\r\n    #toGame = false;\r\n\r\n    #players = [];\r\n    #turnsManager;\r\n\r\n    #countryEvents;\r\n\r\n    #fortify;\r\n\r\n    #goal;\r\n    #goal_path;\r\n\r\n    get tView(){\r\n        return this.#tView;\r\n    }\r\n\r\n    get inGame(){\r\n        return this.#inGame;\r\n    }\r\n\r\n    get gameScene(){\r\n        return this.#gameScene;\r\n    }\r\n    \r\n    get turnsManager(){\r\n        return this.#turnsManager;\r\n    }\r\n\r\n    get territoryController(){\r\n        return this.#territoryController;\r\n    }\r\n\r\n    get fortify(){\r\n        return this.#fortify;\r\n    }\r\n\r\n    static async build(canvas){\r\n        const game = new Game();\r\n        await game.init(canvas);\r\n\r\n        return game;\r\n    }\r\n\r\n    async init(canvas){\r\n        this.gl = canvas.getContext(\"webgl2\");\r\n        await this.#createMenuScene();\r\n        //Depois talvez carregar o jogo apenas quando for dado o play\r\n        \r\n\r\n        const names = [\"Player 1\", \"Player 2\", \"Player 3\", \"Player 4\", \"Player 5\", \"Player 6\"];\r\n\r\n        \r\n        //azul, amarelo, vermelho, preto, verde\r\n        const colors = [\r\n            [0.0, 0.0, 1.0, 1.0],\r\n            [1.0, 1.0, 0.0, 1.0],\r\n            [1.0, 0.0, 0.0, 1.0],\r\n            [1.0, 1.0, 1.0, 1.0],\r\n            [0.0, 0.0, 0.0, 1.0],\r\n            [0.0, 0.4, 0.0, 1.0]\r\n        ];\r\n        \r\n        const goal = new Goal();\r\n        await goal.loadGoals();\r\n        \r\n        for(let i = 0; i < 6; i++){\r\n            const index = Math.floor(Math.random() * colors.length);\r\n            const color = colors[index];\r\n\r\n            goal.sortGoal(names[5-i], color);\r\n            let playerGoal = goal.getGoal;\r\n            \r\n            colors.splice(index, 1);\r\n            this.#goal_path = playerGoal.path;\r\n            this.#players[i] = new Player(names[i], color, playerGoal);\r\n\r\n        }\r\n\r\n        this.#territoryController = new TerritoryController();\r\n        await this.#territoryController.init(this.gl, this.#scale);\r\n\r\n        const countries = [...this.#territoryController.countries];\r\n\r\n        const countriesPerPlayer = Math.floor(countries.length/this.#players.length); \r\n        \r\n        for(let player of this.#players){\r\n            for(let i = 0; i<countriesPerPlayer; i++){\r\n                if(!countries.length) break;\r\n                \r\n                const index = Math.floor(Math.random()*countries.length);\r\n\r\n                countries[index].owner = player;\r\n                countries[index].soldiers = 1;\r\n\r\n                countries.splice(index, 1);\r\n            }\r\n        }\r\n        \r\n        //tratar o lance de sobrar países\r\n\r\n        this.#turnsManager = new TurnsManager(this.#players);\r\n\r\n        await this.#createGameScreenAlt();\r\n\r\n        this.#countryEvents = new CountryEventsHandler(this);\r\n    }\r\n\r\n    async #createMenuScene(){\r\n        this.#menuScene = new Scene(this.gl);\r\n\r\n        const background = new ImageGL();\r\n        await background.init(this.gl, \"./assets/menu/fundo.jpg\");\r\n\r\n        const logoWar = new ImageGL();\r\n        await logoWar.init(this.gl, \"./assets/menu/logo_war.png\");\r\n\r\n        const playButton = new ImageGL();\r\n        await playButton.init(this.gl, \"./assets/menu/play_button.png\");\r\n\r\n        const settingsButton = new ImageGL();\r\n        await settingsButton.init(this.gl, \"./assets/menu/settings_button.png\");\r\n        \r\n        const maxButton = new ImageGL();\r\n        await maxButton.init(this.gl, \"./assets/menu/max_button.png\");\r\n\r\n        //scales\r\n        background.scaleY = 1.85\r\n        logoWar.scale = [0.35, 0.56] \r\n        playButton.scale = [0.15, 0.26]\r\n        settingsButton.scale = [0.046, 0.08]  \r\n        maxButton.scale = [0.046, 0.08]  \r\n\r\n        //position\r\n        logoWar.positionY = 0.25\r\n        \r\n        playButton.positionY = -0.55\r\n        \r\n        settingsButton.positionX = 0.9\r\n        settingsButton.positionY = 0.8\r\n\r\n        this.#menuScene.appendElement(background, logoWar, playButton, settingsButton);\r\n\r\n        this.gl.canvas.addEventListener(\"click\", e=>{\r\n            // e.clientX e e.clientY são a posição do mouse\r\n    \r\n            const point = Game.mapClickInCanvas(e.clientX, e.clientY, this.gl.canvas);\r\n    \r\n            if(playButton.pointCollision(...point)){\r\n                if(!this.#inGame)\r\n                    this.#toGame = true;\r\n            }\r\n    \r\n        })\r\n    }\r\n\r\n    async #createGameScreenAlt(){\r\n        const background = new ImageGL();\r\n        await background.init(this.gl, \"./assets/game/fundo.jpg\");\r\n        \r\n        background.scaleY = 1.85;\r\n        background.scaleX = 1.01;\r\n        background.depth = -0.01;\r\n        this.#background = background;\r\n        \r\n        const goal = new ImageGL();\r\n        await goal.init(this.gl, this.#goal_path);\r\n        goal.scaleX = 0.4;\r\n        goal.scaleY = 0.6;\r\n        this.#goal = goal;\r\n        \r\n        \r\n\r\n        const gameScreen = new GameScreen();\r\n        await gameScreen.init(this.gl);\r\n\r\n        const show_cards = new ShowCards();\r\n        await show_cards.init(this.gl);\r\n\r\n        const fortify = new Fortify();\r\n        await fortify.init(this.gl);\r\n\r\n\r\n        this.#fortify = fortify;\r\n\r\n        this.#gameScene = new Scene(this.gl);\r\n        this.#gameScene.createCamera(canvas);\r\n        this.#gameScene.camera.camPosition[2] = 1.8;\r\n        this.#gameScene.camera.camPosition[1] = -0.2;\r\n        this.#gameScene.createLight([1.0, 0.0, 0.3]);\r\n        \r\n\r\n        this.#guiScene = new Scene(this.gl);\r\n    \r\n        this.#tView = new TroopsView();\r\n        await this.#tView.init(this.#territoryController.countries, this.#scale, this.gl);\r\n    \r\n        this.#gameScene.appendElement(...this.#territoryController.countries);\r\n        this.#guiScene.appendElement(gameScreen, show_cards, fortify);\r\n\r\n        this.#gameScene.appendElement(this.#tView);\r\n\r\n        for(let country of this.#territoryController.countries){\r\n            country.mesh.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n            country.mesh.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n            country.mesh.setUniformValue(\"color\", country.owner.color, \"4fv\");\r\n        }\r\n    \r\n    }\r\n\r\n    logic(){\r\n        this.#fortify.logic();\r\n    }\r\n\r\n    draw(){\r\n        if(this.#inGame){\r\n            this.#background.draw();\r\n            this.#gameScene.draw();\r\n            this.#guiScene.draw();\r\n            this.#goal.draw();\r\n        }\r\n        else{\r\n            this.#menuScene.draw();\r\n        }\r\n    }\r\n\r\n    run(){\r\n        const run_aux = ()=>{\r\n            this.logic();\r\n            this.draw();\r\n\r\n            if(this.#toGame){\r\n                this.#inGame = true;\r\n                this.#toGame = false;\r\n            }\r\n\r\n            requestAnimationFrame(run_aux);\r\n        }\r\n\r\n        run_aux();\r\n    }\r\n\r\n    static mapClickInCanvas(x, y, canvas){\r\n        const mappedOnCenter = [\r\n            (x - canvas.offsetLeft) - canvas.width/2, \r\n            (canvas.height/2) - (y - canvas.offsetTop)\r\n        ];\r\n\r\n        return [mappedOnCenter[0]*2/canvas.width, mappedOnCenter[1]*2/canvas.height];\r\n    }\r\n\r\n\r\n}\r\n\r\nclass GameScreen{\r\n    async init(gl){\r\n        this.settingsButton = new ImageGL();\r\n        await this.settingsButton.init(gl, \"./assets/menu/settings_button.png\");\r\n        this.settingsButton.scale = [0.046, 0.08]; \r\n        GameScreen.setInitialPosition(0.9, 0.8, 0.2, this.settingsButton);\r\n\r\n        this.card_button = new ImageGL();\r\n        await this.card_button.init(gl, \"./assets/game/card_button.png\");\r\n        this.card_button.scale = [0.08, 0.15]; \r\n        GameScreen.setInitialPosition(0.76, -0.85, 0.2, this.card_button);\r\n\r\n        this.objective_button = new ImageGL();\r\n        await this.objective_button.init(gl, \"./assets/game/objective_button.png\");\r\n        this.objective_button.scale = [0.065, 0.11]; \r\n        GameScreen.setInitialPosition(0.92, -0.85, 0.2, this.objective_button);\r\n\r\n        this.current_player = new ImageGL();\r\n        await this.current_player.init(gl, \"./assets/game/current_player.png\");\r\n        this.current_player.scale = [0.4, 0.6]; \r\n        GameScreen.setInitialPosition(0, -0.85, 0.2, this.current_player);\r\n\r\n        this.show_players = new ImageGL();\r\n        await this.show_players.init(gl, \"./assets/game/show_players.png\");\r\n        this.show_players.scale = [0.065, 0.115]; \r\n        GameScreen.setInitialPosition(-0.92, -0.85, 0.2, this.show_players);\r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amountY){\r\n        this.card_button.positionY += amountY;\r\n        this.objective_button._tex.positionY += amountY;\r\n        this.current_player.positionY += amountY;\r\n    }\r\n\r\n    draw(camera){\r\n        this.settingsButton.draw(camera);\r\n        this.card_button.draw(camera);\r\n        this.objective_button.draw(camera);\r\n        this.current_player.draw(camera);\r\n        this.show_players.draw(camera);\r\n    }\r\n\r\n\r\n}\r\n\r\nclass ShowCards{\r\n    async init(gl){\r\n        this.show_cards = new ImageGL();\r\n        await this.show_cards.init(gl, \"./assets/game/show_cards.png\");\r\n        this.show_cards.scale = [0.4, 0.7];\r\n        ShowCards.setInitialPosition(this.show_cards.positionX, -0.85 - 1, 0.3, this.show_cards);\r\n        \r\n        this.cancel_button = new ImageGL();\r\n        await this.cancel_button.init(gl, \"./assets/game/cancel_button.png\");\r\n        this.cancel_button.scale = [0.046, 0.083];\r\n        ShowCards.setInitialPosition(-0.34, -0.81 - 1, 0.4, this.cancel_button);\r\n\r\n        this.ok_button = new ImageGL();\r\n        await this.ok_button.init(gl, \"./assets/game/ok_button.png\");\r\n        this.ok_button.scale = [0.046, 0.083];\r\n        ShowCards.setInitialPosition(0.34, -0.81 - 1, 0.4, this.ok_button);\r\n\r\n        this.cards_info = new ImageGL();\r\n        await this.cards_info.init(gl, \"assets/game/cards_info.png\");\r\n        this.cards_info.scale = [0.2, 0.35];\r\n        ShowCards.setInitialPosition(0.832 + 1, this.cards_info.positionY, 0.3, this.cards_info); \r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amountX, amountY){\r\n        this.show_cards.positionY += amountY;\r\n        this.cancel_button.positionY += amountY;\r\n        this.ok_button.positionY += amountY;\r\n        this.cards_info.positionX += amountX\r\n    }\r\n\r\n    draw(camera){\r\n        this.show_cards.draw(camera);\r\n        this.cancel_button.draw(camera);\r\n        this.ok_button.draw(camera);\r\n        this.cards_info.draw(camera);\r\n    }\r\n\r\n}\r\n\r\nclass Fortify{\r\n    #up = false;\r\n    #upPos = 0;\r\n\r\n    async init(gl){\r\n        this.fortify = new ImageGL();\r\n        await this.fortify.init(gl, \"./assets/game/fortify.png\");\r\n        this.fortify.scale = [0.4, 0.7];\r\n        Fortify.setInitialPosition(this.fortify.positionX, -0.825 - 1, 0.3, this.fortify);\r\n\r\n        this.cancel_button = new ImageGL();\r\n        await this.cancel_button.init(gl, \"./assets/game/cancel_button.png\");\r\n        this.cancel_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(-0.34, -0.81 - 1, 0.4, this.cancel_button);\r\n\r\n        this.ok_button = new ImageGL();\r\n        await this.ok_button.init(gl, \"./assets/game/ok_button.png\");\r\n        this.ok_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(0.34, -0.81 - 1, 0.4, this.ok_button);\r\n\r\n        this.plus_button = new ImageGL();\r\n        await this.plus_button.init(gl, \"./assets/game/plus_button.png\");\r\n        this.plus_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(0.168, -0.86 - 1, 0.4, this.plus_button);\r\n\r\n        this.minus_button = new ImageGL();\r\n        await this.minus_button.init(gl, \"./assets/game/minus_button.png\");\r\n        this.minus_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(-0.168, -0.86 - 1, 0.4, this.minus_button);\r\n\r\n        gl.canvas.addEventListener(\"click\", e=>{\r\n            \r\n        })\r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amount){\r\n        console.log(\"am: \", amount);\r\n\r\n        this.fortify.positionY += amount;\r\n        this.cancel_button.positionY += amount;\r\n        this.ok_button.positionY += amount;\r\n        this.plus_button.positionY += amount;\r\n        this.minus_button.positionY += amount;\r\n    }\r\n\r\n    up(){\r\n        this.#up = true;\r\n    }\r\n\r\n    logic(){\r\n        const step = 0.01;\r\n\r\n        if(this.#up){\r\n            this.#upPos += step;\r\n\r\n            if(this.#upPos>=1.0){\r\n                this.#upPos = 1.0;\r\n                this.#up = false;\r\n            }else\r\n                this.moveAll(step);\r\n        }\r\n    }\r\n\r\n    draw(camera){\r\n        this.fortify.draw(camera);\r\n        this.cancel_button.draw(camera);\r\n        this.ok_button.draw(camera);\r\n        this.plus_button.draw(camera);\r\n        this.minus_button.draw(camera);\r\n    }\r\n\r\n    getWidget(x, y, camera){\r\n\r\n    }\r\n}\r\n\r\nconst canvas = document.querySelector(\"#game-screen\");\r\n\r\nGame.build(canvas).then(game => {\r\n    game.run();\r\n});\r\n"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","create","out","copy","a","identity","invert","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","multiply","b","b0","b1","b2","b3","Math","random","PI","hypot","y","i","arguments","length","sqrt","GLUtil","static","gl","type","source_code","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","getShaderInfoLog","Error","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","data","buffer","ArrayBuffer","undefined","byteLength","console","warn","createBuffer","bindBuffer","bufferData","STATIC_DRAW","attributes","WebGL2RenderingContext","vao","createVertexArray","size","bindVertexArray","attribute","loc","enableVertexAttribArray","dimension","FLOAT","ARRAY_BUFFER","vertexAttribPointer","Mesh","_gl","position","rotation","scale","_program","_primitive","_vaoLoc","useDepthTest","modelMatrix","this","updateModelMatrix","addAttribute","name","pointDim","forEach","val","count","f32Array","push","getAttribLocation","constructor","vertShaderSrc","fragShaderSrc","primitive","VERTEX_SHADER","FRAGMENT_SHADER","useProgram","createVAO","v","x","z","rad","s","sin","c","cos","loadMVP","camera","modelLoc","getUniformLocation","mvLoc","mvpLoc","viewLoc","viewProjLoc","projectionLoc","uniformMatrix4fv","mv","viewMatrix","mvp","viewProjection","projMatrix","createTex","texData","textureName","createTexture","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA32F","RGBA","uniform1i","tex","index","setUniformValue","value","uniformLoc","startsWith","draw","cam","frontFace","CCW","enable","CULL_FACE","cullFace","BACK","DEPTH_TEST","depthFunc","LESS","drawArrays","disable","ImageGL","width","height","scaleX","scaleY","positionX","positionY","depth","theta","vec","opacity","alpha","async","src","TRIANGLES","coords","texCoords","url","Promise","resolve","image","Image","addEventListener","imgSrc","img","loadImage","decode","imageBitmap","createImageBitmap","_tex","proportion","newWidth","newHeight","v1","v2","v3","v4","pointCollision","inverse","near","far","p1","multiplyMatWithVec","p2","p1Norm","scalarMulti","p2Norm","pointT","Line","pointWhenZIs","abs","vector","scalar","map","coord","mat","fill","round","j","extreme","origin","vDir","getPoint","t","reduce","ac","Vertex","Map","id","hEdge","HalfEdge","opositte","next","vertex","Face","HalfEdgeDS","indexes","i1","i2","i3","h1","h2","h3","face","setOposittes","v0","hEdge1","setAttribute","values","vertlen","attrib","slice","set","createVBOs","keys","get","IndexedMeshT","border","super","vbos","from","entries","entry","ELEMENT_ARRAY_BUFFER","Uint32Array","_count","drawElements","UNSIGNED_INT","center","drawBorder","path","vertShader","fragShader","texturePath","obj","fetch","text","lines","split","vertices","normals","borderIndex","line","replace","Number","parseFloat","d","dotProduct","key","join","init","indexOf","vIndex","parseInt","border1","Border","mesh","curr","min","Infinity","max","minX","maxX","minY","maxY","point","first","prev","intersecsCount","compare","leftToEdge","sort","deltaX","ang","coefLin","canvas","document","createElement","style","backgroundColor","ctx","getContext","beginPath","lineTo","moveTo","stroke","fillRect","Country","continent","neighbors","owner","soldiers","addCountry","newOwner","findNeighbor","loadMeshFromObj","Camera","camPosition","lookDirection","upDirection","left","right","bottom","top","fovy","aspect","projectionType","eye","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","nf","f","tan","lr","bt","Light","ambColor","ambK","difColor","difK","espColor","espK","espExp","pos","createUniforms","Scene","light","clearColor","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","createCamera","createLight","appendElement","drawnables","drawnable","switchLight","element","Dice","numDice","diceRolls","floor","Attack","attackPlayer","countryAttack","countryDefense","dicesAttack","calcDices","dicesDefense","alert","attackDiceRolls","rollDice","defendDiceRolls","attackWins","defenseWins","reverse","log","country","isAttack","dice","getCountryObject","countries","find","isValidCountry","includes","Player","color","goal","conquestTerritory","territorio","receiveTroop","qtdreceivedTroops","addTroops","qtdTroops","attack","base","to","freeTroops","territoriesOwned","vetTerritoriesOwned","continentsOwned","vetContinentsOwned","goalId","Continent","bonus","TerritoryController","loadContinents","loadCountries","json","continents","newContinent","countriesJson","newCountry","loadMesh","conquerCountry","countryFound","findCountry","troop_reassignment","destiny","qtd","int","soldier","clickedCountry","TurnsManager","players","DISTRIBUCTION","nextPlayer","player","state","nextState","FREEZE","CountryEventsHandler","game","child","e","inGame","turnsManager","mapClickInCanvas","clientX","clientY","territoryController","gameScene","countryEvents","ATTACK","body","appendChild","removeChild","mappedOnCenter","offsetLeft","offsetTop","distribuction","neighbor","tView","update","filter","fortify","REASSIGNMENT","canvasDimension","toDataURL","drawCanvas","imageElement","changeTex","TroopsView","clearRect","CanvasRenderingContext2D","fillStyle","font","fillText","Goal","getGoal","goals","colorName","sortGoal","verifyDestroy","vetPlayer","verifyContinent","continentCount","verify","every","verifyTerritory","territoryCount","territoryTroops","Game","names","colors","loadGoals","playerGoal","splice","countriesPerPlayer","background","logoWar","playButton","settingsButton","maxButton","gameScreen","GameScreen","show_cards","ShowCards","Fortify","logic","run","run_aux","requestAnimationFrame","setInitialPosition","card_button","objective_button","current_player","show_players","widget","moveAll","amountY","cancel_button","ok_button","cards_info","amountX","plus_button","minus_button","amount","getWidget","querySelector","build","then"],"sourceRoot":""}