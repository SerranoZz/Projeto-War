{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://projeto-war/./node_modules/gl-matrix/esm/common.js","webpack://projeto-war/./node_modules/gl-matrix/esm/mat4.js","webpack://projeto-war/./node_modules/gl-matrix/esm/vec3.js","webpack://projeto-war/./src/webgl/gl-util.js","webpack://projeto-war/./src/webgl/mesh.js","webpack://projeto-war/./src/view/image.js","webpack://projeto-war/./src/shaders/imageVert.js","webpack://projeto-war/./src/shaders/imageFrag.js","webpack://projeto-war/./src/webgl/half-edge.js","webpack://projeto-war/./src/webgl/indexed-mesh.js","webpack://projeto-war/./src/model/map/territories/country.js","webpack://projeto-war/./src/shaders/countryVert.js","webpack://projeto-war/./src/shaders/phongFrag.js","webpack://projeto-war/./src/webgl/camera.js","webpack://projeto-war/./src/webgl/light.js","webpack://projeto-war/./src/webgl/scene.js","webpack://projeto-war/./src/model/tools/dice.js","webpack://projeto-war/./src/model/player/player.js","webpack://projeto-war/./src/model/map/territories/continent.js","webpack://projeto-war/./src/model/map/territories/territory-controller.js","webpack://projeto-war/./src/model/player/turns_manager.js","webpack://projeto-war/./src/events/events_manager.js","webpack://projeto-war/./src/view/canvasImage.js","webpack://projeto-war/./src/view/troopsView.js","webpack://projeto-war/./src/model/tools/goal.js","webpack://projeto-war/./src/main.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","export default class GLUtil{\r\n    static createShader(gl, type, source_code) {\r\n        const shader = gl.createShader(type);\r\n        gl.shaderSource(shader, source_code);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            const info = gl.getShaderInfoLog(shader);\r\n            throw new Error(\"Shader compilation error: \"+info);\r\n        }\r\n    \r\n        return shader;\r\n    }\r\n    \r\n    static createProgram(gl, vertexShader, fragmentShader) {\r\n        const program = gl.createProgram();\r\n    \r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const info = gl.getProgramInfoLog(program);\r\n            throw new Error('Could not compile WebGL program:' + info);\r\n        }\r\n    \r\n        return program;\r\n    }\r\n    \r\n    static createBuffer(gl, type, data) {\r\n        if (data.length == 0)\r\n          return null;\r\n    \r\n        if (!(data && data.buffer instanceof ArrayBuffer && data.byteLength !== undefined)) {\r\n          console.warn('Data is not an instance of ArrayBuffer');\r\n          return null;\r\n        }\r\n    \r\n        const buffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(type, buffer);\r\n        gl.bufferData(type, data, gl.STATIC_DRAW);\r\n\r\n        return buffer;\r\n    }\r\n    \r\n\r\n      // refazer essa depois\r\n    static createVAO(gl, ...attributes) {\r\n      if(!(gl instanceof WebGL2RenderingContext)) return;\r\n\r\n        const vao = gl.createVertexArray();\r\n    \r\n        gl.bindVertexArray(vao);\r\n\r\n        let size;\r\n        let type;\r\n    \r\n        for(let attribute of attributes){\r\n          if (attribute.loc != null && attribute.loc != undefined) {\r\n            gl.enableVertexAttribArray(attribute.loc);\r\n            size = attribute.dimension;\r\n            type = gl.FLOAT;\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, attribute.buffer);\r\n            gl.vertexAttribPointer(attribute.loc, size, type, false, 0, 0);\r\n          }\r\n        }\r\n    \r\n        return vao;\r\n    }\r\n}","import { vec3, mat4 } from \"gl-matrix\";\r\nimport GLUtil from \"./gl-util\";\r\n\r\nexport default class Mesh{\r\n    _gl;\r\n\r\n    position = [0.0, 0.0, 0.0];\r\n    rotation = [0.0, 0.0, 0.0];\r\n    scale = [1.0, 1.0, 1.0];\r\n\r\n    #modelMatrix = mat4.create();\r\n\r\n    #attributes = [];\r\n\r\n    #vertShader = null;\r\n    #fragShader = null;\r\n\r\n    _program = null;\r\n\r\n    _primitive;\r\n\r\n    #count;\r\n\r\n    _vaoLoc;\r\n\r\n    #uTexture;\r\n    #textures = [];;\r\n\r\n    #vao_updated = false;\r\n\r\n    useDepthTest = false;\r\n    \r\n    get modelMatrix(){\r\n        this.updateModelMatrix();\r\n        return this.#modelMatrix;\r\n    }\r\n\r\n    addAttribute(name, info, pointDim = 4){\r\n        if(!(info instanceof Array))\r\n            throw new Error(\"The info parameter needs to be a Array.\");\r\n\r\n        info.forEach(val => {\r\n            if(typeof val !== \"number\") \r\n                throw new Error(\"The info array need to be numeric.\");\r\n        });\r\n\r\n        const count = info.length/pointDim;\r\n\r\n        if(!this.#count) this.#count = count;\r\n\r\n        else if(count !== this.#count) \r\n            throw new Error(\"The VBOs need to contain the same number of vertex.\");\r\n\r\n        const f32Array = new Float32Array(info);\r\n\r\n        this.#attributes.push({\r\n            loc: this._gl.getAttribLocation(this._program, name),\r\n            buffer: GLUtil.createBuffer(this._gl, this._gl.ARRAY_BUFFER,f32Array),\r\n            dimension: pointDim\r\n        })\r\n\r\n        this.#vao_updated = false;\r\n    }\r\n\r\n    constructor(gl, vertShaderSrc, fragShaderSrc, primitive){\r\n        this._primitive = primitive;\r\n        \r\n        this._gl = gl;\r\n        //restringir os tipos\r\n\r\n        this.#createShader(vertShaderSrc, fragShaderSrc);\r\n    }\r\n\r\n    #createShader(vertShaderSrc, fragShaderSrc) {\r\n        this.#vertShader = GLUtil.createShader(this._gl, this._gl.VERTEX_SHADER, vertShaderSrc);\r\n        this.#fragShader = GLUtil.createShader(this._gl, this._gl.FRAGMENT_SHADER, fragShaderSrc);\r\n        this._program = GLUtil.createProgram(this._gl, this.#vertShader, this.#fragShader);\r\n    \r\n        this._gl.useProgram(this._program);\r\n    }\r\n\r\n    #createVAO() {\r\n        this._vaoLoc = GLUtil.createVAO(this._gl, ...this.#attributes);\r\n    }\r\n\r\n    updateModelMatrix(){\r\n        mat4.identity(this.#modelMatrix);\r\n\r\n        mat4.translate(this.#modelMatrix, this.#modelMatrix, this.position);\r\n        mat4.rotateX(this.#modelMatrix, this.#modelMatrix, this.rotation[0]);\r\n        mat4.rotateY(this.#modelMatrix, this.#modelMatrix, this.rotation[1]);\r\n        mat4.rotateZ(this.#modelMatrix, this.#modelMatrix, this.rotation[2]);\r\n        mat4.scale(this.#modelMatrix, this.#modelMatrix, this.scale);\r\n    }\r\n\r\n    loadMVP(camera){\r\n        const modelLoc = this._gl.getUniformLocation(this._program, \"model\");\r\n        const mvLoc = this._gl.getUniformLocation(this._program, \"modelView\");\r\n        const mvpLoc = this._gl.getUniformLocation(this._program, \"mvp\");\r\n\r\n        const viewLoc = this._gl.getUniformLocation(this._program, \"view\");\r\n        const viewProjLoc = this._gl.getUniformLocation(this._program, \"viewProjection\");\r\n        const projectionLoc = this._gl.getUniformLocation(this._program, \"projection\");\r\n\r\n        if(modelLoc){\r\n            this._gl.uniformMatrix4fv(modelLoc, false, this.#modelMatrix);\r\n        }else if(mvLoc){\r\n            const mv = mat4.create();\r\n\r\n            if(camera)\r\n                mat4.multiply(mv, camera.viewMatrix, this.#modelMatrix);\r\n            else\r\n                mat4.copy(mv, this.#modelMatrix);\r\n            \r\n            this._gl.uniformMatrix4fv(mvLoc, false, mv);\r\n\r\n        }else if(mvpLoc){\r\n            const mvp = mat4.create();\r\n\r\n            if(camera)\r\n                mat4.multiply(mvp, camera.viewProjection, this.#modelMatrix);\r\n            else\r\n                mat4.copy(mvp, this.#modelMatrix);\r\n                \r\n            this._gl.uniformMatrix4fv(mvpLoc, false, mvp);\r\n        }\r\n\r\n        if(viewLoc)\r\n            this._gl.uniformMatrix4fv(modelLoc, false, camera.viewMatrix);\r\n\r\n        if(projectionLoc)\r\n            this._gl.uniformMatrix4fv(modelLoc, false, camera.projMatrix);\r\n    \r\n        if(viewProjLoc)\r\n            this._gl.uniformMatrix4fv(modelLoc, false, camera.viewProjection);\r\n    }\r\n\r\n    createTex(texData, textureName){\r\n        const uTexture = this._gl.getUniformLocation(this._program, textureName);\r\n\r\n        if(!uTexture)\r\n            throw new Error(`The uniform ${textureName} doesn't exists in shader code.`);\r\n\r\n        const texture = new Texture(uTexture, this._gl.createTexture(), texData);\r\n\r\n        this.#textures.push(texture);\r\n\r\n        const texI = this.#textures.length - 1;\r\n\r\n        this._gl.activeTexture(this._gl[`TEXTURE${texI}`]);\r\n        this._gl.bindTexture(this._gl.TEXTURE_2D, this.#textures[texI].texture);\r\n\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.NEAREST);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.NEAREST);\r\n\r\n        this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA32F, this._gl.RGBA, this._gl.FLOAT, texData);\r\n\r\n        this._gl.useProgram(this._program);\r\n        this._gl.uniform1i(this.#uTexture, texI);\r\n\r\n        console.log(this.#textures[texI].texture)\r\n\r\n        return {tex: this.#textures[texI], index: texI};\r\n    }\r\n\r\n    bindTextures(){\r\n        this.#textures.forEach(texture =>{\r\n            texture.bind(this._gl);\r\n        })\r\n    }\r\n\r\n    setUniformValue(name, value, type){\r\n        const uniformLoc = this._gl.getUniformLocation(this._program, name);\r\n        \r\n        if(uniformLoc === -1)\r\n            throw new Error(\"This uniform doesn't exist in the shader code.\");\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        if(type.startsWith(\"Matrix\"))\r\n            this._gl[\"uniform\"+type](uniformLoc, false, value);\r\n        else\r\n            this._gl[\"uniform\"+type](uniformLoc, value);\r\n    }\r\n\r\n    draw(cam){\r\n        if(!this.#vao_updated){\r\n            this.#vao_updated = true;\r\n            this.#createVAO();\r\n        }\r\n\r\n        this._gl.frontFace(this._gl.CCW);\r\n\r\n        this._gl.enable(this._gl.CULL_FACE);\r\n        this._gl.cullFace(this._gl.BACK);\r\n\r\n        if(this.useDepthTest){\r\n            this._gl.enable(this._gl.DEPTH_TEST);\r\n            this._gl.depthFunc(this._gl.LESS);\r\n        }\r\n\r\n        this.updateModelMatrix();\r\n\r\n        this._gl.bindVertexArray(this._vaoLoc);\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        this.loadMVP(cam);\r\n\r\n        this.bindTextures();\r\n\r\n        this._gl.drawArrays(this._primitive, 0, this.#count);\r\n\r\n        this._gl.disable(this._gl.CULL_FACE);\r\n\r\n        if(this.useDepthTest)\r\n            this.gl.disable(this._gl.DEPTH_TEST);\r\n    }\r\n\r\n    static changeTex(gl, {tex, index}, texData){\r\n        tex.data = texData;\r\n    }\r\n}\r\n\r\nclass Texture{\r\n    #uniform;\r\n    #texture;\r\n    #data;\r\n    #changed = false;\r\n\r\n    constructor(uniform, texture, data){\r\n        this.#uniform = uniform;\r\n        this.#texture = texture;\r\n        this.#data = data;\r\n    }\r\n\r\n    get uniform(){\r\n        return this.#uniform;\r\n    }\r\n\r\n    get texture(){\r\n        return this.#texture;\r\n    }\r\n\r\n    get data(){\r\n        return this.#data;\r\n    }\r\n\r\n    set data(newData){\r\n        this.#data = newData;\r\n        this.#changed = true;\r\n    }\r\n\r\n    bind(gl){\r\n        gl.bindTexture(gl.TEXTURE_2D, this.#texture);\r\n        \r\n        if(this.#changed){\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, gl.RGBA, gl.FLOAT, this.#data);\r\n            this.#changed = false;\r\n        }\r\n    }\r\n}\r\n","import Mesh from \"../webgl/mesh\";\r\nimport imgVert from \"../shaders/imageVert\";\r\nimport imgFrag from \"../shaders/imageFrag\";\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\n\r\nexport default class ImageGL{\r\n    #mesh;\r\n\r\n    #width;\r\n    #height;\r\n\r\n    get width(){\r\n        return this.#width;\r\n    }\r\n\r\n    get height(){\r\n        return this.#height;\r\n    }\r\n\r\n    set scaleX(x){\r\n        if(x<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[0] = x;\r\n    }\r\n\r\n    set scaleY(y){\r\n        if(y<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[1] = y; \r\n    }\r\n\r\n    set positionX(x){\r\n        this.#mesh.position[0] = x;\r\n    }\r\n\r\n    set positionY(y){\r\n        this.#mesh.position[1] = y;    \r\n    }\r\n\r\n    set depth(z){\r\n        this.#mesh.position[2] = z;\r\n    }\r\n\r\n    set rotation(theta){\r\n        this.#mesh.rotation[2] = theta    \r\n    }\r\n\r\n    set scale(vec){\r\n        if(!(vec instanceof Array) || vec.length !== 2)\r\n            throw new Error(\"scale need to be a vector with two positions.\");\r\n\r\n        this.#mesh.scale = vec3.fromValues(vec[0], vec[1], 1)\r\n    }\r\n\r\n    set opacity(alpha){\r\n        this.#mesh.setUniformValue(\"alpha\", alpha, \"1f\");\r\n    }\r\n\r\n    get positionX(){\r\n        return this.#mesh.position[0];\r\n    }\r\n    \r\n    get positionY(){\r\n        return this.#mesh.position[1];\r\n    }\r\n\r\n    async init(gl, src){\r\n        this.#mesh = new Mesh(gl, imgVert, imgFrag, gl.TRIANGLES);\r\n\r\n        const size = await this.#loadTex(src);\r\n\r\n        const data = this.#createRect(...size);\r\n\r\n        this.#mesh.addAttribute(\"position\", data.coords);\r\n        this.#mesh.addAttribute(\"texCoord\", data.texCoords, 2);\r\n\r\n        this.opacity = 1.0;\r\n    }\r\n\r\n    static async loadImage(url){\r\n        return new  Promise(resolve => {\r\n            const image = new Image();\r\n            image.addEventListener('load', () => {\r\n                resolve(image);\r\n            });\r\n            image.src = url; \r\n        });\r\n    }\r\n\r\n    async #loadTex(imgSrc){\r\n        const img = await ImageGL.loadImage(imgSrc);\r\n        await img.decode();\r\n        const imageBitmap = await createImageBitmap(img);\r\n\r\n        this._tex = this.#mesh.createTex(img, \"uTexture\");\r\n\r\n        return [imageBitmap.width, imageBitmap.height];\r\n    }\r\n\r\n    #createRect(width, height){\r\n        const proportion = width/height;\r\n\r\n        let newWidth = 1.0;\r\n        let newHeight = 1.0;\r\n\r\n        (proportion<1)? newWidth*=proportion: newHeight/=proportion;\r\n\r\n        this.#width = newWidth;\r\n        this.#height = newHeight;\r\n\r\n        const v1 = [-newWidth, -newHeight, 0.0, 1.0];\r\n        const v2 = [newWidth, -newHeight, 0.0, 1.0];\r\n        const v3 = [newWidth, newHeight, 0.0, 1.0];\r\n        const v4 = [-newWidth, newHeight, 0.0, 1.0];\r\n\r\n        const coords = [\r\n            ...v1, ...v2, ...v3,\r\n            ...v1, ...v3, ...v4\r\n        ]\r\n\r\n        const texCoords = [\r\n            0, 1, 1, 1, 1, 0,\r\n            0, 1, 1, 0, 0, 0\r\n        ]\r\n\r\n        return {\r\n            coords,\r\n            texCoords\r\n        }\r\n    }\r\n\r\n    useDepthTest(){\r\n        this.#mesh.useDepthTest = true;\r\n    }\r\n\r\n    pointCollision(x, y, camera){\r\n        const point = [x, y, 0, 1];\r\n\r\n        const mvp = mat4.create();\r\n        mat4.copy(mvp, this.#mesh.modelMatrix);\r\n\r\n        if(camera){\r\n            const viewProj = camera.viewProjection;\r\n            mat4.multiply(mvp, viewProj, mvp);\r\n        }\r\n\r\n        const inverse = mat4.create();\r\n\r\n        mat4.invert(inverse, mvp);\r\n\r\n        const near = (camera)?camera.near: 1;\r\n        const far = (camera)?camera.far: 1;\r\n\r\n        const p1 = multiplyMatWithVec(inverse, [x, y, near, 1]);\r\n        const p2 = multiplyMatWithVec(inverse, [x, y, far, 1]);\r\n\r\n        const p1Norm = scalarMulti(p1, 1/p1[3]);\r\n        const p2Norm = scalarMulti(p2, 1/p2[3]);\r\n\r\n        const line = new Line(p2Norm, p1Norm);\r\n\r\n        const pointT = line.pointWhenZIs(0);\r\n\r\n        return (Math.abs(pointT[0])<this.#width && Math.abs(pointT[1])<this.#height);\r\n    }\r\n\r\n    draw(camera){\r\n        if(this.#mesh) this.#mesh.draw(camera);\r\n    }\r\n}\r\n\r\nfunction scalarMulti(vector, scalar){\r\n    return vector.map(coord => coord*scalar);\r\n}\r\n\r\nfunction multiplyMatWithVec(mat, vec){\r\n    const out = new Array(vec.length).fill(0);\r\n\r\n    if(Math.round(vec.length**2) !== mat.length)\r\n        return;\r\n\r\n    for(let i = 0; i<vec.length; i++)\r\n        for(let j = 0; j<mat.length; j+=4)\r\n            out[i]+=mat[j+i]*vec[j/4];\r\n\r\n    return out;\r\n}\r\n\r\nclass Line{\r\n    #origin;\r\n    #direction;\r\n\r\n    constructor(extreme, origin){\r\n        const vDir = this.#getDirection(extreme, origin);\r\n\r\n        this.#direction = vDir;\r\n        this.#origin = origin;\r\n    }\r\n\r\n    getPoint(t){\r\n        return this.#origin.map((coord, index) => coord+t*this.#direction[index]);\r\n    }\r\n\r\n    pointWhenZIs(z){\r\n        const t = (this.#direction[2])?(z - this.#origin[2])/this.#direction[2] : 0;\r\n\r\n        return this.getPoint(t);\r\n    }\r\n\r\n    #getDirection(extreme, origin){\r\n        const v = extreme.map((coord, index)=>coord-origin[index]);\r\n\r\n        const size = Math.sqrt(v.reduce((ac, coord) => ac+coord**2, 0));\r\n\r\n        const vDir = (size)?v.map(val=> val/size):v;\r\n\r\n        return vDir;\r\n    }\r\n}","export default `#version 300 es\r\n    precision highp float;\r\n\r\n    uniform mat4 mvp;\r\n\r\n    in vec4 position;\r\n    in vec2 texCoord;\r\n\r\n    out vec2 fTexCoord;\r\n\r\n    void main() {\r\n        gl_Position  = mvp * position;\r\n        fTexCoord = texCoord;\r\n    }\r\n`","export default `#version 300 es\r\n    precision highp float;\r\n    \r\n    in vec2 fTexCoord;\r\n\r\n    uniform sampler2D uTexture;\r\n    uniform float alpha;\r\n\r\n    out vec4 color;\r\n\r\n    void main() {\r\n        color = texture(uTexture, fTexCoord);\r\n\r\n        if(color.a < 0.2) discard;\r\n\r\n        color *= alpha;\r\n    }\r\n`","class Vertex{\r\n    attributes = new Map();\r\n    id;\r\n    hEdge;\r\n\r\n    constructor(id){\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass HalfEdge{\r\n    opositte;\r\n    next;\r\n    vertex;\r\n\r\n    constructor(vertex){\r\n        this.vertex = vertex;\r\n    }\r\n}\r\n\r\nclass Face{\r\n    hEdge;\r\n\r\n    constructor(hEdge){\r\n        this.hEdge = hEdge;\r\n    }\r\n}\r\n\r\nexport default class HalfEdgeDS{\r\n    #hEdges = [];\r\n    #vertices = [];\r\n    #faces = [];\r\n\r\n    constructor(indexes){\r\n        for(let i = 0; i < indexes.length; i += 3){\r\n            const i1 = indexes[i];\r\n            const i2 = indexes[i+1];\r\n            const i3 = indexes[i+2];\r\n\r\n            if(!this.#vertices[i1]) this.#vertices[i1] = new Vertex(i1);\r\n            if(!this.#vertices[i2]) this.#vertices[i2] = new Vertex(i2);\r\n            if(!this.#vertices[i3]) this.#vertices[i3] = new Vertex(i3);\r\n\r\n            const h1 = new HalfEdge(this.#vertices[i1]);\r\n            const h2 = new HalfEdge(this.#vertices[i2]);\r\n            const h3 = new HalfEdge(this.#vertices[i3]);\r\n\r\n            h1.next = h2;\r\n            h2.next = h3;\r\n            h3.next = h1;\r\n\r\n            const face = new Face(h1);\r\n\r\n            this.#hEdges[i] = h1;\r\n            this.#hEdges[i+1] = h2;\r\n            this.#hEdges[i+2] = h3;\r\n\r\n            this.#faces[Math.round(i/3)] = face;\r\n        }\r\n\r\n        this.setOposittes();\r\n    }\r\n\r\n    setOposittes(){\r\n        for(let hEdge of this.#hEdges){\r\n            const v0 = hEdge.vertex;\r\n            const v1 = hEdge.next.vertex;\r\n\r\n            if(!v0.hEdge) v0.hEdge = hEdge;\r\n\r\n            if(hEdge.opositte) continue;\r\n\r\n            for(let hEdge1 of this.#hEdges){\r\n                if(hEdge1.vertex === v1 && hEdge1.next.vertex === v0){\r\n                    hEdge.opositte = hEdge1;\r\n                    hEdge1.opositte = hEdge;\r\n                    break;    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setAttribute(values, vertlen, name){\r\n        if(values.length/vertlen!==this.#vertices.length)\r\n            throw new Error(`Mesh haves ${this.#vertices.length} vertices, but only ${values.length/vertlen} were given.`)\r\n\r\n        for(let i = 0; i<values.length; i+=vertlen){\r\n            const attrib = values.slice(i, i+vertlen);\r\n            this.#vertices[Math.round(i/vertlen)].attributes.set(name, attrib);\r\n        }\r\n    }\r\n\r\n    createVBOs(){\r\n        const attributes = new Map();\r\n        const indexes = [];\r\n\r\n        for(let vertex of this.#vertices){\r\n            for(let name of vertex.attributes.keys()){\r\n\r\n                if(!attributes.get(name)) attributes.set(name, []);\r\n\r\n                attributes.get(name).push(...vertex.attributes.get(name));\r\n            }\r\n        }\r\n\r\n        for(let hEdge of this.#hEdges){\r\n            indexes.push(hEdge.vertex.id);\r\n        }\r\n\r\n        return {attributes, indexes, count: this.#vertices.length};\r\n    }\r\n}\r\n","import ImageGL from \"../view/image\";\r\nimport GLUtil from \"./gl-util\";\r\nimport HalfEdgeDS from \"./half-edge\";\r\nimport Mesh from \"./mesh\";\r\nimport { mat4 } from \"gl-matrix\";\r\n\r\nexport default class IndexedMeshT extends Mesh{\r\n    #hEdge;\r\n    #indicesLoc = -1;\r\n    #border;\r\n\r\n    #vao_updated = false;\r\n\r\n    set border(border){\r\n        this.#border = border;\r\n    }\r\n\r\n    constructor(gl, vertShaderSrc, fragShaderSrc, indexes){\r\n        super(gl, vertShaderSrc, fragShaderSrc, gl.TRIANGLES);\r\n\r\n        this.#hEdge = new HalfEdgeDS(indexes);\r\n    }\r\n\r\n    addAttribute(name, info, pointDim = 4){\r\n        if(!(info instanceof Array))\r\n            throw new Error(\"The info parameter needs to be a Array.\");\r\n\r\n        info.forEach(val => {\r\n            if(typeof val !== \"number\") \r\n                throw new Error(\"The info array need to be numeric.\");\r\n        });\r\n\r\n        if(this._gl.getAttribLocation(this._program, name)===-1)\r\n            throw new Error(`the attribute ${name} doesn't exists in the shader code.`);\r\n\r\n\r\n        this.#hEdge.setAttribute(info, pointDim, name);  \r\n        \r\n        this.#vao_updated = false;\r\n    }\r\n\r\n    #createVAO() {\r\n        const vbos = this.#hEdge.createVBOs();\r\n\r\n        const attributes = Array.from(vbos.attributes.entries()).map(entry => {\r\n\r\n            return {\r\n                loc: this._gl.getAttribLocation(this._program, entry[0]),\r\n                buffer: GLUtil.createBuffer(this._gl, this._gl.ARRAY_BUFFER, new Float32Array(entry[1])),\r\n                dimension: Math.round(entry[1].length/vbos.count)\r\n            }\r\n        })\r\n\r\n        this._vaoLoc = GLUtil.createVAO(this._gl, ...attributes);\r\n        this.#indicesLoc = GLUtil.createBuffer(this._gl, this._gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(vbos.indexes));\r\n\r\n        this._count = vbos.indexes.length;\r\n        this.#vao_updated = true;\r\n    }\r\n\r\n    draw(cam){\r\n        if(!this.#vao_updated)    \r\n            this.#createVAO();\r\n\r\n        if(this.useDepthTest){\r\n            this._gl.enable(this._gl.DEPTH_TEST);\r\n            this._gl.depthFunc(this._gl.LESS);\r\n        }\r\n        \r\n        this._gl.frontFace(this._gl.CCW);\r\n\r\n        this._gl.enable(this._gl.CULL_FACE);\r\n        this._gl.cullFace(this._gl.BACK);\r\n\r\n        this._gl.bindVertexArray(this._vaoLoc);\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this.#indicesLoc);\r\n\r\n        const modelLoc = this._gl.getUniformLocation(this._program, \"model\");\r\n        const mvLoc = this._gl.getUniformLocation(this._program, \"modelView\");\r\n        const mvpLoc = this._gl.getUniformLocation(this._program, \"mvp\");\r\n\r\n        if(modelLoc){\r\n            this._gl.uniformMatrix4fv(modelLoc, false, this.modelMatrix);\r\n        }else if(mvLoc){\r\n            const mv = mat4.create();\r\n            mat4.multiply(mv, cam.viewMatrix, this.modelMatrix);\r\n            this._gl.uniformMatrix4fv(modelLoc, false, mv);\r\n        }else if(mvpLoc){\r\n            const mvp = mat4.create();\r\n            mat4.multiply(mvp, cam.viewProjection, this.modelMatrix);\r\n            this._gl.uniformMatrix4fv(modelLoc, false, mvp);\r\n        }\r\n        \r\n        this._gl.drawElements(this._primitive, this._count, this._gl.UNSIGNED_INT, 0);\r\n\r\n        this._gl.disable(this._gl.CULL_FACE);\r\n\r\n        if(this.useDepthTest)\r\n            this._gl.disable(this._gl.DEPTH_TEST);\r\n    }\r\n\r\n    pointCollision(x, y, camera){\r\n        //colocar o throw dps\r\n        if(!this.#border) return false;\r\n\r\n        return this.#border.pointCollision(x, y, camera, this);\r\n    }\r\n\r\n    get center(){\r\n        return this.#border.center;\r\n    }\r\n\r\n    get drawBorder(){\r\n        return this.#border.draw();\r\n    }\r\n\r\n    static async loadMeshFromObj(path, gl, vertShader, fragShader, texturePath){\r\n        const obj = await fetch(path);\r\n        const text = await obj.text();\r\n\r\n        const border = new Map();\r\n    \r\n        const lines = text.split(\"\\n\");\r\n\r\n        const vertices = [];\r\n        const normals = [];\r\n        const texCoords = [];\r\n        const indexes = [];\r\n\r\n        let borderIndex = 0;\r\n\r\n        for(let line of lines){\r\n            if(line.startsWith(\"vn\")){\r\n                const values = line.replace(\"vn \", \"\").split(\" \").map(Number.parseFloat);\r\n                normals.push(...values, 1);\r\n\r\n                const d = Math.sqrt(dotProduct(values, values));\r\n\r\n                if(Math.abs(dotProduct(values, [0, 0, 1])/d)<0.5){\r\n                    const key = values.join(\",\");\r\n                    if(!border.get(key)) border.set(key, borderIndex);\r\n                }\r\n\r\n                borderIndex++;\r\n            }else if(line.startsWith(\"vt\")){\r\n                const values = line.replace(\"vt \", \"\").split(\" \").map(Number.parseFloat);\r\n                texCoords.push(...values);\r\n            }else if(line.startsWith(\"v\")){\r\n                const values = line.replace(\"v \", \"\").split(\" \").map(Number.parseFloat);\r\n                vertices.push(...values, 1);\r\n            }else if(line.startsWith(\"f\")){\r\n                const values = line.replace(\"f \", \"\").split(\" \").map(val => {\r\n                    const init = val.indexOf(\"/\");\r\n                    const vIndex = val.slice(0, init);\r\n                    return Number.parseInt(vIndex)-1;\r\n                });\r\n                indexes.push(...values);\r\n            }\r\n\r\n        }\r\n\r\n        const border1 = new Border(border, vertices, gl);\r\n\r\n        const mesh = new IndexedMeshT(gl, vertShader, fragShader, indexes);\r\n        mesh.addAttribute(\"position\", vertices);\r\n        mesh.addAttribute(\"normal\", normals);\r\n\r\n        mesh.useDepthTest = true;\r\n\r\n        if(texCoords.length!==0){\r\n            if(!texturePath)\r\n                throw new Error(\"This mesh need to a texture path\");\r\n\r\n            mesh.addAttribute(\"texCoord\", texCoords, 3);\r\n\r\n            const image = await ImageGL.loadImage(texturePath);\r\n\r\n            mesh.createTex(image, \"uTexture\");\r\n        }\r\n\r\n        mesh.border = border1;\r\n\r\n        return mesh;\r\n    }\r\n}\r\n\r\nconst dotProduct = (v1, v2) =>{\r\n    return v1.reduce((ac, curr, i)=>ac+=curr*v2[i], 0);\r\n}\r\n\r\nclass Border{\r\n    #borderMap;\r\n    #coords;\r\n    #lastClickMin;\r\n    #lastClickMax;\r\n    #min;\r\n    #max;\r\n\r\n    constructor(border, coords){\r\n        this.#borderMap = border;\r\n        this.#coords = coords;\r\n\r\n        let min = Infinity;\r\n        let max = -Infinity;\r\n\r\n        let minX = Infinity;\r\n        let maxX = -Infinity;\r\n\r\n        let minY = Infinity;\r\n        let maxY = -Infinity;\r\n\r\n        for(let i = 0; i<this.#coords.length; i+=4){\r\n            if(this.#coords[i+2]<min) min = this.#coords[i+2];\r\n            if(this.#coords[i+2]>max) max = this.#coords[i+2];\r\n\r\n            if(this.#coords[i]<minX) minX = this.#coords[i];\r\n            if(this.#coords[i]>maxX) maxX = this.#coords[i];\r\n\r\n            if(this.#coords[i+1]<minY) minY = this.#coords[i+1];\r\n            if(this.#coords[i+1]>maxY) maxY = this.#coords[i+1];\r\n        }\r\n\r\n        this.#min = min;\r\n        this.#max = max;\r\n\r\n        this.center = [(maxX+minX)/2, (minY + maxY)/2];\r\n    }\r\n\r\n    pointCollision(x, y, camera, mesh){\r\n        /*let init = this.#min;\r\n        const distance = (this.#max - this.#min)/100;\r\n\r\n        while(init<this.#max){\r\n\r\n        }\r\n        */\r\n        this.#lastClickMin = null;\r\n        this.#lastClickMax = null;\r\n\r\n        return this.#pointCollision(x, y, this.#min, camera, mesh) || \r\n            this.#pointCollision(x, y, this.#max, camera, mesh);\r\n\r\n        //return this.#pointCollision(x, y, 0, camera, mesh);\r\n    }\r\n\r\n    #pointCollision(x, y, z, camera, mesh){\r\n    \r\n        const mvp = mat4.create();\r\n        mat4.copy(mvp, mesh.modelMatrix);\r\n    \r\n        if(camera){\r\n            const viewProj = camera.viewProjection;\r\n            mat4.multiply(mvp, viewProj, mvp);\r\n        }\r\n    \r\n        const inverse = mat4.create();\r\n    \r\n        mat4.invert(inverse, mvp);\r\n    \r\n        const near = (camera)?camera.near: 1;\r\n        const far = (camera)?camera.far: 1;\r\n\r\n        const p1 = Border.multiplyMatWithVec(inverse, [x, y, near, 1]);\r\n        const p2 = Border.multiplyMatWithVec(inverse, [x, y, far, 1]);\r\n\r\n        const p1Norm = Border.scalarMulti(p1, 1/p1[3]);\r\n        const p2Norm = Border.scalarMulti(p2, 1/p2[3]);\r\n\r\n        const line = new Line(p2Norm, p1Norm);\r\n\r\n        const pointT = line.pointWhenZIs(z);\r\n\r\n        if(!this.#lastClickMin) this.#lastClickMin = pointT;\r\n        else this.#lastClickMax = pointT;\r\n    \r\n        let collided = this.#collideAlt(pointT);\r\n\r\n        return collided;\r\n    }\r\n\r\n    #collideAlt(point){\r\n        let [minX, minY] = [Infinity, Infinity];\r\n        \r\n        let [maxX, maxY] = [-Infinity, -Infinity];\r\n\r\n\r\n        for(let entry of this.#borderMap.entries()){\r\n            const i = entry[1]*4;\r\n            const coord = [this.#coords[i], this.#coords[i+1]];\r\n\r\n            if(coord[0]<minX) minX = coord[0];\r\n            if(coord[1]<minY) minY = coord[1];\r\n\r\n            if(coord[0]>maxX) maxX = coord[0];\r\n            if(coord[1]>maxY) maxY = coord[1];\r\n        }\r\n\r\n        //console.log(minX, maxX, minY, maxY, point);\r\n\r\n        return (point[0]>=minX && point[0]<=maxX && point[1]>=minY && point[1]<=maxY);\r\n    }\r\n\r\n    #collide(point){\r\n        let first;\r\n        let prev;\r\n\r\n        let intersecsCount = 0;\r\n\r\n        for(let entry of this.#borderMap.entries()){\r\n            const i = entry[1]*4;\r\n            const coord = [this.#coords[i], this.#coords[i+1]];\r\n\r\n            if(!first){\r\n                first = coord;\r\n                prev = coord;\r\n                continue;\r\n            }\r\n\r\n            const compare = this.leftToEdge(point, prev, coord);\r\n\r\n            if(compare === 2) return true;\r\n\r\n            if(compare) {\r\n                intersecsCount++;\r\n            }\r\n\r\n            prev = coord;\r\n        }\r\n\r\n        if(this.leftToEdge(point, prev, first)) intersecsCount++;\r\n\r\n        //console.log(intersecsCount);\r\n\r\n        return (intersecsCount % 2 === 1);\r\n    }\r\n\r\n    leftToEdge(point, prev, coord){\r\n        if(coord[0] === point[0] && coord[1] === point[1]) return true;\r\n        if(prev[0] === point[0] && prev[1] === point[1]) return true;\r\n\r\n        const y = [coord[1], prev[1]];\r\n        y.sort();\r\n        const [minY, maxY] = y;\r\n\r\n        if(point[1]>=maxY || point[1]<=minY) return false;\r\n\r\n        const deltaX = prev[0]-coord[0];\r\n\r\n        if(!deltaX) return point[0]<=prev[0];\r\n\r\n        const ang = (prev[1]-coord[1])/deltaX;\r\n        \r\n        const coefLin = prev[0] - prev[0]*ang;\r\n\r\n        return (point[0] <= (point[1]-coefLin)/ang);\r\n    }\r\n\r\n    draw(){\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = 1000;\r\n        canvas.height = 1000;\r\n        canvas.style.backgroundColor = \"rgb(100, 0, 0)\";\r\n\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.beginPath();\r\n\r\n        let first;\r\n\r\n        for(let entry of this.#borderMap.entries()){\r\n            const i = entry[1]*4;\r\n            const coord = [this.#coords[i], this.#coords[i+1], this.#coords[i+2]];\r\n\r\n            if(!first) {\r\n                first = coord;\r\n                ctx.moveTo(coord[0]*500+250, (-coord[1]+1.0)*500);\r\n            } else ctx.lineTo(coord[0]*500+250, (-coord[1]+1.0)*500);\r\n\r\n        }\r\n        ctx.lineTo(first[0]*500+250, (-first[1]+1.0)*500)\r\n        ctx.stroke();\r\n\r\n        if(this.#lastClickMin)\r\n            ctx.fillRect(this.#lastClickMin[0]*500+250, (-this.#lastClickMin[1]+1.0)*500, 5, 5);\r\n            \r\n        if(this.#lastClickMax)\r\n            ctx.fillRect(this.#lastClickMax[0]*500+250, (-this.#lastClickMax[1]+1.0)*500, 5, 5);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    static multiplyMatWithVec(mat, vec){\r\n        const out = new Array(vec.length).fill(0);\r\n    \r\n        if(Math.round(vec.length**2) !== mat.length)\r\n            return;\r\n    \r\n        for(let i = 0; i<vec.length; i++)\r\n            for(let j = 0; j<mat.length; j+=4)\r\n                out[i]+=mat[j+i]*vec[j/4];\r\n\r\n        return out;\r\n    }\r\n\r\n    static scalarMulti(vector, scalar){\r\n        return vector.map(coord => coord*scalar);\r\n    }\r\n}\r\n\r\nclass Line{\r\n    #origin;\r\n    #direction;\r\n\r\n    constructor(extreme, origin){\r\n        const vDir = this.#getDirection(extreme, origin);\r\n\r\n        this.#direction = vDir;\r\n        this.#origin = origin;\r\n    }\r\n\r\n    getPoint(t){\r\n        return this.#origin.map((coord, index) => coord+t*this.#direction[index]);\r\n    }\r\n\r\n    pointWhenZIs(z){\r\n        const t = (z - this.#origin[2])/this.#direction[2];\r\n\r\n        return this.getPoint(t);\r\n    }\r\n\r\n    #getDirection(extreme, origin){\r\n        const v = extreme.map((coord, index)=>coord-origin[index]);\r\n\r\n        const size = Math.sqrt(v.reduce((ac, coord) => ac+coord**2, 0));\r\n\r\n        const vDir = v.map(val=> val/size);\r\n\r\n        return vDir;\r\n    }\r\n}","import countryVert from \"../../../shaders/countryVert\";\r\nimport phongFrag from \"../../../shaders/phongFrag\";\r\nimport CanvasImage from \"../../../view/canvasImage\";\r\nimport IndexedMeshT from \"../../../webgl/indexed-mesh\";\r\n\r\nexport default class Country {\r\n    #name;\r\n    #path;\r\n    #neighbors;\r\n    #owner;\r\n    #continent;\r\n    #soldiers;\r\n    #mesh;\r\n\r\n    constructor(name, path, continent, neighbors) {\r\n        this.#name = name;\r\n        this.#path = path;\r\n        this.#neighbors = neighbors;\r\n        this.#owner = null;\r\n        this.#continent = null;\r\n        this.continent = continent;\r\n        this.#soldiers = 1;\r\n    }\r\n    \r\n    get name() {\r\n        return this.#name;\r\n    }\r\n    \r\n    get path() {\r\n        return this.#path;\r\n    }\r\n    \r\n    get neighbors() {\r\n        return this.#neighbors;\r\n    }\r\n    \r\n    get owner() {\r\n        return this.#owner;\r\n    }\r\n    \r\n    get continent() {\r\n        return this.#continent;\r\n    }\r\n\r\n    get soldiers() {\r\n        return this.#soldiers;\r\n    }\r\n    \r\n    get mesh(){\r\n        return this.#mesh;\r\n    }\r\n    \r\n    set continent(continent) {\r\n        this.#continent = continent;\r\n        continent.addCountry(this);\r\n    }\r\n\r\n    set owner(newOwner) {\r\n        this.#owner = newOwner;\r\n    }\r\n\r\n    set soldiers(soldiers) {\r\n        this.#soldiers = soldiers;\r\n    }\r\n\r\n    //Retorna o indíce do vizinho, se tiver e se não tiver retorna -1\r\n    findNeighbor(name) {\r\n        for(let i = 0; i < this.#neighbors.length; i++) {\r\n            if(this.#neighbors[i] == name) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    async loadMesh(path, gl, scale){\r\n        this.#mesh = await IndexedMeshT.loadMeshFromObj(path, gl, countryVert, phongFrag);\r\n        this.#mesh.scale = [scale, scale, 1];\r\n\r\n        const center = this.#mesh.center;\r\n\r\n        //this.soldiersView = new SoldiersView();\r\n        //await this.soldiersView.init(center[0]*scale, center[1]*scale, this.#soldiers, gl);\r\n    }\r\n\r\n    draw(camera){\r\n        this.#mesh.draw(camera);\r\n        //this.soldiersView.draw(camera);\r\n    }\r\n\r\n    changeColor(){\r\n        console.log(this.#owner.color)\r\n        this.#mesh.setUniformValue(\"color\", this.#owner.color, \"4fv\");\r\n    }\r\n}\r\n\r\nclass SoldiersView{\r\n    #image;\r\n\r\n    async init(x, y, soldiers, gl){\r\n        const cImage = new CanvasImage();\r\n        await cImage.init(gl);\r\n\r\n        cImage.positionX = x;\r\n        cImage.positionY = y;\r\n    \r\n        await cImage.update(ctx =>{\r\n            if (!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n            ctx.font = \"100px Arial\";\r\n            ctx.fillText(soldiers.toString(), 320, 600);\r\n        }, gl);\r\n\r\n        this.#image = cImage;\r\n    }\r\n\r\n    draw(camera){\r\n        this.#image.draw(camera);\r\n    }\r\n}","export default \r\n    `#version 300 es\r\n    precision highp float;\r\n\r\n    uniform mat4 model;\r\n    uniform mat4 view;\r\n    uniform mat4 projection;\r\n    uniform vec4 color;\r\n\r\n    in vec4 position;\r\n    in vec4 normal;\r\n\r\n    out vec4 fPos;\r\n    out vec4 fColor;\r\n    out vec4 fNormal;\r\n\r\n    void main() {\r\n        gl_Position = (projection*view*model) * position;\r\n        gl_Position /= gl_Position.w;\r\n        fColor = color;\r\n        fPos = position;\r\n        fNormal = normal;\r\n    }\r\n`","export default \r\n    `#version 300 es\r\n    precision highp float;\r\n    \r\n    uniform mat4 model;\r\n    uniform mat4 view;\r\n    uniform mat4 projection;\r\n\r\n    uniform vec3 amb_c;\r\n    uniform vec3 dif_c;\r\n    uniform vec3 esp_c;\r\n    uniform vec3 pos;\r\n    uniform float amb_k;\r\n    uniform float dif_k;\r\n    uniform float esp_k;\r\n    uniform float esp_p;\r\n\r\n    in vec4 fColor;\r\n    in vec4 normal;\r\n    in vec4 fPos;\r\n    in vec4 fNormal;\r\n\r\n    out vec4 color;\r\n\r\n    void main() {\r\n        mat4 modelView = view*model;\r\n\r\n        vec3 lightPos = (view * vec4(pos, 1.0)).xyz;\r\n        vec3 pos = -(modelView * fPos).xyz;\r\n\r\n        vec3 vNormal = normalize(inverse(transpose(modelView)) * fNormal).xyz;\r\n        vec3 vDistance = normalize(pos - lightPos);\r\n\r\n        vec3 normalPos = normalize(pos);\r\n\r\n        vec3 halfVector= normalize(vDistance + normalPos);\r\n\r\n        vec3 amb = amb_k * amb_c;\r\n\r\n        vec3 diff = max(dot(vNormal, vDistance), 0.0) * dif_k * dif_c;\r\n\r\n        vec3 spec = max(pow(dot(vNormal, halfVector), esp_p), 0.0) * esp_c * esp_k;\r\n\r\n        vec3 color3 = vec3(fColor);\r\n        \r\n        color3 = 0.5*color3 + 0.5*(diff + amb + spec);\r\n\r\n        color = vec4(color3, 1.0);\r\n    }\r\n`","import { mat4 } from \"gl-matrix\";\r\n\r\nexport default class Camera{\r\n    #view_matrix = mat4.create();\r\n    #proj_matrix = mat4.create();\r\n    #viewProjMatrix = mat4.create();\r\n\r\n    camPosition = [0,0,1];\r\n    lookDirection = [0,0,0];\r\n    upDirection = [0,1,0];\r\n\r\n    left = -4.0;\r\n    right = 4.0;\r\n    bottom = -4.0;\r\n    top = 4.0;\r\n    near = 1.0;\r\n    far = 9.0;\r\n\r\n    fovy = Math.PI/2;\r\n    aspect;\r\n\r\n    constructor(canvas){\r\n        this.aspect = canvas.width / canvas.height;\r\n    }\r\n\r\n    #typeOfProjection = \"perspective\";\r\n\r\n    set projectionType(type){\r\n        if(type !== \"orthogonal\" && type !== \"perspective\") \r\n            throw new Error(\"Invalid type of projection.\");\r\n\r\n        this.#typeOfProjection = type;\r\n    }\r\n\r\n    get viewMatrix(){\r\n        this.#updateViewMatrix();\r\n        return this.#view_matrix;\r\n    }\r\n\r\n    get projMatrix(){\r\n        this.#updateProjMatrix();\r\n        return this.#proj_matrix;\r\n    }\r\n\r\n    #updateViewMatrix(){\r\n        mat4.identity(this.#view_matrix);\r\n        mat4.lookAt(this.#view_matrix, this.camPosition, this.lookDirection, this.upDirection);\r\n    }\r\n\r\n    #updateProjMatrix(){\r\n        mat4.identity(this.#proj_matrix);\r\n        if(this.#typeOfProjection === \"perspective\")\r\n            mat4.perspective(this.#proj_matrix, this.fovy, this.aspect, this.near, this.far);\r\n        else\r\n            mat4.ortho(this.#proj_matrix, this.left*this.aspect, this.right*this.aspect, this.bottom, this.top, this.left, this.right);\r\n    }\r\n\r\n    get viewProjection(){\r\n        this.#updateViewMatrix();\r\n        this.#updateProjMatrix();\r\n        mat4.identity(this.#viewProjMatrix);\r\n        mat4.multiply(this.#viewProjMatrix, this.#proj_matrix, this.#view_matrix);\r\n\r\n        return this.#viewProjMatrix;\r\n    }\r\n}","export default class Light{\r\n    ambColor = [0.0, 0.0, 0.0];\r\n    ambK = 0.5;\r\n\r\n    difColor = [0.3, 0.3, 0.3];\r\n    difK = 0.4;\r\n\r\n    espColor = [1.0, 1.0, 1.0];\r\n    espK = 0.1;\r\n    espExp = 20.0;\r\n\r\n    pos;\r\n\r\n    constructor(pos){\r\n        this.pos = pos;\r\n    }\r\n\r\n    createUniforms(mesh){\r\n        mesh.setUniformValue(\"amb_c\", this.ambColor, \"3fv\");\r\n        mesh.setUniformValue(\"amb_k\", this.ambK, \"1f\");\r\n        mesh.setUniformValue(\"dif_c\", this.difColor, \"3fv\");\r\n        mesh.setUniformValue(\"dif_k\", this.difK, \"1f\");\r\n        mesh.setUniformValue(\"esp_c\", this.espColor, \"3fv\");\r\n        mesh.setUniformValue(\"esp_k\", this.espK, \"1f\");\r\n        mesh.setUniformValue(\"esp_p\", this.espExp, \"1f\");\r\n    }\r\n\r\n}","import Country from \"../model/map/territories/country\";\r\nimport Camera from \"./camera\";\r\nimport Light from \"./light\";\r\nimport Mesh from \"./mesh\";\r\n\r\nexport default class Scene{\r\n    #drawnables = [];\r\n    #light;\r\n    #camera;\r\n\r\n    #fadeLight;\r\n\r\n    #fadeMode = false;\r\n\r\n    get camera(){\r\n        return this.#camera;\r\n    }\r\n\r\n    get light(){\r\n        return this.#light;\r\n    }\r\n\r\n    constructor(gl, clearColor = [0.0, 0.0, 0.0, 1.0]){\r\n        if(!(gl instanceof WebGL2RenderingContext))\r\n            return;\r\n\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n        if(!clearColor || !clearColor.length || clearColor.length !== 4)\r\n            throw new Error(\"The clear color need to be a array with 4 floats\");\r\n\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        this.gl = gl;\r\n    }\r\n\r\n    createCamera(canvas){\r\n        this.#camera = new Camera(canvas);\r\n    }\r\n\r\n    createLight(position){\r\n        this.#light = new Light(position);\r\n        this.#fadeLight = new Light(position);\r\n\r\n        this.#fadeLight.ambK = 0.3;\r\n        this.#fadeLight.difK = 0.4;\r\n        this.#fadeLight.espK = 0.3;\r\n\r\n        this.#fadeLight.ambColor = [0.5, 0.5, 0.5]; \r\n    }\r\n\r\n    appendElement(...drawnables){\r\n        drawnables.forEach(drawnable => {\r\n            if(!drawnable.draw)\r\n                throw new Error(\"Element need to have a draw function\");\r\n\r\n            this.#drawnables.push(drawnable);\r\n\r\n            if(this.#light && drawnable instanceof Mesh) this.#light.createUniforms(drawnable);\r\n            \r\n            if(this.#light && drawnable instanceof Country) this.#light.createUniforms(drawnable.mesh);\r\n        });\r\n    }\r\n\r\n    switchLight(){\r\n        if(!this.#light) \r\n            throw new Error(\"there is no lights to be switched.\");\r\n\r\n            this.#fadeMode = !this.#fadeMode;\r\n\r\n        const light = (this.#fadeMode)? this.#fadeLight: this.#light;\r\n\r\n        this.#drawnables.forEach(drawnable =>{\r\n            if(drawnable instanceof Mesh)\r\n                light.createUniforms(drawnable);\r\n\r\n            if(drawnable instanceof Country)\r\n                light.createUniforms(drawnable.mesh);\r\n        });\r\n    }\r\n\r\n    draw(){\r\n        for(let element of this.#drawnables){\r\n            element.draw(this.#camera);\r\n        }\r\n    }\r\n\r\n}","export default class Dice{\r\n    static rollDice(numDice) {\r\n        const diceRolls = [];\r\n        for (let i = 0; i < numDice; i++) {\r\n            diceRolls.push(Math.floor(Math.random() * 6) + 1);\r\n        }\r\n        return diceRolls;\r\n    }\r\n}","//FASE DE ATAQUE\r\n// escolher o territorio que ele deseja utilizar para atacar\r\n// escolher o territorio inimigo que ele deseja atacar\r\n// verificar o territorio inimigo \r\n// calcular se o ataque foi vencedor\r\n// se vencedor, o jogador recebe um novo continente\r\n// se perdedor atualiza o n de tropas \r\n// verificar se o jogador ainda possui tropas para fazer outro ataque\r\n// passa para o proximo jogador\r\n//Perguntar ao Bruno como importar o json de maneira correta***\r\n\r\nimport Dice from \"../tools/dice.js\";\r\n\r\nclass Attack {\r\n    attackPlayer(countryAttack, countryDefense) {\r\n        /*if(!this.isValidCountry(countryAttack) || !this.isValidCountry(countryDefense)) {\r\n            throw new Error(\"Invalid countries\");\r\n        }*/\r\n    \r\n        const dicesAttack =  this.calcDices(countryAttack, true);\r\n        const dicesDefense = this.calcDices(countryDefense, false);\r\n\r\n        if(dicesAttack === 0) return alert(\"Ataque invalido\");\r\n    \r\n        const attackDiceRolls = Dice.rollDice(dicesAttack);\r\n        const defendDiceRolls = Dice.rollDice(dicesDefense);\r\n\r\n\r\n        let attackWins = 0;\r\n        let defenseWins = 0;\r\n    \r\n        attackDiceRolls.sort().reverse();\r\n        defendDiceRolls.sort().reverse();\r\n\r\n        console.log(attackDiceRolls);\r\n        console.log(defendDiceRolls);\r\n\r\n        for (let i = 0; i < Math.min(dicesAttack, dicesDefense); i++) {\r\n            if (attackDiceRolls[i] > defendDiceRolls[i]) {\r\n                attackWins++;\r\n            } else {\r\n                defenseWins++;\r\n            }\r\n        }\r\n\r\n        console.log(`vitórias do ataque: ${attackWins}, vitórias da defesa: ${defenseWins}`);\r\n\r\n        countryAttack.soldiers -= defenseWins;\r\n        countryDefense.soldiers -= attackWins;\r\n    }\r\n\r\n    calcDices(country, isAttack) {\r\n        if(isAttack) {\r\n            var dice = country.soldiers-1;\r\n            if(dice > 3) dice = 3;\r\n            return dice;\r\n        }\r\n\r\n        var dice = country.soldiers;\r\n        if(dice > 3) dice = 3;\r\n        return dice;\r\n    }\r\n\r\n    getCountryObject(country) {\r\n        return this.countries.find((c) => c.name === country);\r\n    }\r\n\r\n    isValidCountry(country) {\r\n        return this.countries.includes(country);\r\n    }\r\n}\r\n\r\nexport class Player {\r\n    #name;\r\n    #color;\r\n    #territoriesOwned;\r\n    #continentsOwned;\r\n    #goal;\r\n    #freeTroops;\r\n\r\n    constructor(name, color, goal) {\r\n      this.#name = name;\r\n      this.#color = color; // pode ser usado como ID \r\n      this.#territoriesOwned = [];\r\n      this.#continentsOwned = [];\r\n      this.#goal = goal;\r\n      this.#freeTroops = 0;\r\n    }\r\n  \r\n    conquestTerritory(territorio) {\r\n      this.#territoriesOwned.push(territorio);\r\n    }\r\n    \r\n\r\n    receiveTroop(){\r\n\r\n        //calcula a quantidade de tropas a ser recebida devio a quantidade de territorios        \r\n        let qtdreceivedTroops = Math.floor(this.#territoriesOwned.length / 2);\r\n\r\n        if(qtdreceivedTroops<3) qtdreceivedTroops = 3;\r\n\r\n        //calcula a quantidade de tropas a ser recebida devio aos bonus de continente\r\n        \r\n        //a fazer\r\n\r\n        this.#freeTroops = qtdreceivedTroops;\r\n    }\r\n\r\n\r\n    addTroops(country,qtdTroops){\r\n        if(qtdTroops <=  this.#freeTroops){\r\n            country.soldiers = country.soldiers + qtdTroops;\r\n            this.#freeTroops -= qtdTroops;\r\n        }\r\n    }\r\n\r\n    attack(base, to){\r\n        const att = new Attack();\r\n        att.attackPlayer(base, to);\r\n        console.log(base.soldiers, to.soldiers);\r\n        if(to.soldiers===0){\r\n            to.owner = this;\r\n            to.changeColor();\r\n        }\r\n    }\r\n    \r\n    \r\n    get name(){\r\n        return this.#name;\r\n    }\r\n\r\n    get color(){\r\n        return this.#color;\r\n    }\r\n\r\n    get freeTroops(){\r\n        return this.#freeTroops;\r\n    }\r\n\r\n    get territoriesOwned(){\r\n        return this.#territoriesOwned.length;\r\n    }\r\n\r\n    get vetTerritoriesOwned(){\r\n        return this.#territoriesOwned;\r\n    }\r\n\r\n    get continentsOwned(){\r\n        return this.#continentsOwned.length;\r\n    }\r\n\r\n    get vetContinentsOwned(){\r\n        return this.#continentsOwned;\r\n    }\r\n\r\n    get goal(){\r\n        return this.#goal.goal;\r\n    }\r\n\r\n    get goalId(){\r\n        return this.#goal.id;\r\n    }\r\n}\r\n","import Country from \"./country\";\r\n\r\nexport default class Continent {\r\n    #name;\r\n    #countries;\r\n    #bonus;\r\n    #owner;\r\n\r\n    constructor(name, bonus) {\r\n        this.#name = name;\r\n        this.#countries = [];\r\n        this.#bonus = bonus;\r\n        this.#owner = null;\r\n    }\r\n\r\n    addCountry(country) {\r\n        this.#countries.push(country);\r\n    }\r\n\r\n    get name() {\r\n        return this.#name;\r\n    }\r\n\r\n    get countries() {\r\n        return this.#countries;\r\n    }\r\n\r\n    get bonus() {\r\n        return this.#bonus;\r\n    }\r\n\r\n    get owner(){\r\n        return this.#owner;\r\n    }\r\n\r\n    set owner(owner){\r\n        this.#owner = owner;\r\n    }\r\n}","import Continent from \"./continent.js\";\r\nimport Country from \"./country\";\r\n\r\nexport default class TerritoryController {\r\n    #continents;\r\n    #countries;\r\n\r\n    /*constructor() {\r\n        this.#continents = [];\r\n        this.#countries = [];\r\n        \r\n        this.loadContinents();\r\n        this.loadCountries();\r\n    }*/\r\n\r\n    async init(gl, scale){\r\n\r\n        this.#continents = [];\r\n        this.#countries = [];\r\n        \r\n        await this.loadContinents();\r\n        await this.loadCountries(gl, scale);\r\n    }\r\n\r\n    async loadContinents() {\r\n        const json = await fetch(\"./assets/data/continent-constructor.json\");\r\n        const continents = await json.json();\r\n\r\n        for(let i = 0; i < continents.data.length; i++) {\r\n            let newContinent = new Continent(continents.data[i].name, continents.data[i].bonus);\r\n            this.#continents.push(newContinent);\r\n        }\r\n    }\r\n\r\n    async loadCountries(gl, scale) {\r\n        const countriesJson = await fetch(\"./assets/data/country-constructor.json\");\r\n        const countries = await countriesJson.json();\r\n\r\n        for(let i = 0; i < countries.data.length; i++) {\r\n            const continent = this.#continents.find(value => value.name === countries.data[i].continent);\r\n\r\n            let newCountry = new Country(countries.data[i].name, countries.data[i].path, continent, countries.data[i].neighbors);\r\n            await newCountry.loadMesh(countries.data[i].path, gl, scale);\r\n\r\n            this.#countries.push(newCountry);\r\n        }\r\n    }\r\n\r\n    conquerCountry(country, newOwner) {\r\n        countryFound = this.findCountry(country);\r\n        if(!countryFound) {\r\n            countryFound.owner = newOwner;\r\n        }\r\n    }\r\n\r\n    findCountry(country) {\r\n        for(let i = 0; i < this.#countries; i++) {\r\n            if(this.#countries[i].name == country) {\r\n                return this.#countries[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    get continents() {\r\n        return this.#continents;\r\n    }\r\n\r\n    get countries() {\r\n        return this.#countries;\r\n    }\r\n\r\n    troop_reassignment(base, destiny, qtd){\r\n        if(!(base instanceof(Country)) || !(destiny instanceof(Country)) || !(typeof qtd===\"number\")){\r\n            throw new Error(\"Parametro invalido\");       \r\n        }\r\n        if(base.findNeighbor(destiny)){\r\n            if(base.soldiers <= qtd){\r\n                throw new Error(\"quantidade de tropas invalidas\");\r\n            }\r\n            base.soldiers -= qtd;\r\n            destiny.soldiers += qtd;\r\n        }\r\n    }\r\n    //verificar se precisa retornar alguma coisa\r\n\r\n    clickedCountry(x, y, camera){\r\n        for(let country of this.#countries){\r\n            if(country.mesh.pointCollision(x, y, camera))\r\n                return country;\r\n        }\r\n    \r\n        return null;\r\n    }\r\n}","export default class TurnsManager{\r\n    #state;\r\n    #currPlayerIndex;\r\n    #players;\r\n\r\n    #fortifyOpened = false;\r\n\r\n    static DISTRIBUCTION = 0;\r\n    static ATTACK = 1;\r\n    static REASSIGNMENT = 2;\r\n    static EXCHANGE_CARDS = 3;\r\n\r\n    constructor(players){\r\n        this.#players = players;\r\n        this.#currPlayerIndex = -1;\r\n        this.#state = null;\r\n        this.nextPlayer();\r\n    }\r\n\r\n    nextPlayer(){\r\n        this.#currPlayerIndex = (this.#currPlayerIndex+1)%this.#players.length;\r\n        this.#state = TurnsManager.DISTRIBUCTION;\r\n        this.#players[this.#currPlayerIndex].receiveTroop();\r\n    }\r\n\r\n    get player(){\r\n        return this.#players[this.#currPlayerIndex];\r\n    }\r\n\r\n    get state(){\r\n        return this.#state;\r\n    }\r\n\r\n    get fortifyOpened(){\r\n        return this.#fortifyOpened;\r\n    }\r\n\r\n    openFortify(){\r\n        this.#fortifyOpened = true;\r\n    }\r\n\r\n    closeFortify(){\r\n        this.#fortifyOpened = false;\r\n    }\r\n\r\n    nextState(){\r\n        this.#state++;\r\n\r\n        if(this.#state === 4){\r\n            this.#state = 0;\r\n\r\n            this.nextPlayer();\r\n        }\r\n    }\r\n}","import TurnsManager from \"../model/player/turns_manager\";\r\nimport { Player } from \"../model/player/player\";\r\n\r\nexport default class EventsHandler{\r\n    #country = null;\r\n\r\n    #mapDebug = false;\r\n\r\n    #actions = new Map();\r\n\r\n    mapDebug(){\r\n        this.#mapDebug = true;\r\n    }\r\n\r\n    constructor(game){\r\n        this.#actions.set(TurnsManager.DISTRIBUCTION, new DistribuctionAction());\r\n        this.#actions.set(TurnsManager.ATTACK, new AttackAction());\r\n        this.#actions.set(TurnsManager.REASSIGNMENT, new ReassignmentAction());\r\n\r\n\r\n        game.gl.canvas.addEventListener(\"click\", e=>{\r\n            if(game.turnsManager.state === TurnsManager.FREEZE) return;\r\n\r\n            if(!game.inGame) return;\r\n    \r\n            const point = EventsHandler.mapClickInCanvas(e.clientX, e.clientY, game.gl.canvas);\r\n\r\n            if(game.fortify.opened){\r\n                this.#actions.get(game.turnsManager.state).applyFort(game, ...point);\r\n                return;\r\n            }\r\n\r\n            const widget = game.gameScreen.clickedWidget(...point);\r\n\r\n            if(widget === \"changeTurn\"){\r\n                game.turnsManager.nextState();\r\n                alert(\"chanja aí\");\r\n                return;\r\n            }\r\n    \r\n            const country = game.territoryController.clickedCountry(...point, game.gameScene.camera);\r\n\r\n            // country events é um dicionário de funções, onde as chaves são os estados\r\n            // essa linha chama uma função de acordo com o estado do jogo atual\r\n\r\n            if(country) {\r\n                alert(country.name);\r\n                this.#country = country;\r\n\r\n                const action = this.#actions.get(game.turnsManager.state);\r\n\r\n                action.execute(game, country, ...point);\r\n            };\r\n\r\n        });\r\n\r\n        let child;\r\n\r\n        document.body.addEventListener(\"keydown\", e=>{\r\n            if(!this.#mapDebug) return;\r\n\r\n            if(e.key===\"d\" && this.#country) {\r\n                child = this.#country.mesh.drawBorder;\r\n                document.body.appendChild(child);\r\n            }\r\n\r\n            if(e.key === \"s\"){\r\n                document.body.removeChild(child);\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    static mapClickInCanvas(x, y, canvas){\r\n        const mappedOnCenter = [\r\n            (x - canvas.offsetLeft) - canvas.width/2, \r\n            (canvas.height/2) - (y - canvas.offsetTop)\r\n        ];\r\n    \r\n        return [mappedOnCenter[0]*2/canvas.width, mappedOnCenter[1]*2/canvas.height];\r\n    }\r\n}\r\n\r\nclass AttackAction{\r\n    base = null;\r\n    destiny = null;\r\n    neighbors = null;\r\n    amount = 1;\r\n\r\n    execute(game, country){\r\n        const player = game.turnsManager.player;\r\n        const territoryController = game.territoryController;\r\n    \r\n        if(!this.base) {\r\n            if(country.owner !== player) return;\r\n\r\n            const neighbors = territoryController.countries.filter(c =>{\r\n                if(country.neighbors.indexOf(c.name) !== -1 && c.owner !== country.owner)\r\n                    return c;\r\n            })\r\n\r\n            if(neighbors.length === 0) return;\r\n\r\n            this.changePositions(game, country, neighbors);\r\n\r\n            this.base = country;\r\n            this.neighbors = neighbors;\r\n\r\n        }else{\r\n            if(this.neighbors.indexOf(country) === -1) return;\r\n    \r\n            alert(`from ${this.base.name} to ${country.name}`);\r\n    \r\n            player.attack(this.base, country);\r\n\r\n            if(country.soldiers === 0){\r\n                game.fortify.changeNumber(1);\r\n                game.fortify.up();\r\n                game.tView.update();\r\n                this.destiny = country;\r\n                return;\r\n            }\r\n    \r\n            this.resetPositions(game);\r\n    \r\n            this.base = null;\r\n            this.neighbors = null;\r\n        }\r\n    }\r\n\r\n    applyFort(game, x, y){\r\n        const btn = game.fortify.clickedWidget(x, y);\r\n\r\n        if(btn === \"-\" && this.amount > 1){\r\n            this.amount--;\r\n            game.fortify.changeNumber(this.amount);\r\n        }else if(btn === \"+\" && this.amount < this.base.soldiers - 1){\r\n            this.amount++;\r\n            game.fortify.changeNumber(this.amount);\r\n        }else if(btn===\"ok\"){\r\n\r\n            //alert(\"base soldiers:\"+this.base.soldiers+\" amount: \"+this.amount)\r\n\r\n\r\n            game.territoryController.troop_reassignment(this.base, this.destiny, this.amount);\r\n            game.tView.update();\r\n            \r\n            this.resetPositions(game);\r\n            game.fortify.down();\r\n            game.fortify.changeNumber(0);\r\n            this.amount = 0;\r\n            this.base = null;\r\n            this.neighbors = null;\r\n        } \r\n    }\r\n\r\n    changePositions(game, country, neighbors){\r\n        game.gameScene.switchLight();\r\n\r\n        country.mesh.position[2] = 0.03;\r\n        country.mesh.scale[2] = 2;\r\n\r\n        game.gameScene.light.createUniforms(country.mesh);\r\n\r\n        neighbors.forEach(neighbor => {\r\n            neighbor.mesh.position[2] = 0.03;\r\n            neighbor.mesh.scale[2] = 2;\r\n\r\n            game.gameScene.light.createUniforms(neighbor.mesh);\r\n        });\r\n    }\r\n\r\n    resetPositions(game){\r\n        game.gameScene.switchLight();\r\n    \r\n        this.neighbors.forEach(neighbor => {\r\n            neighbor.mesh.position[2] = 0.0;\r\n            neighbor.mesh.scale[2] = 1;\r\n\r\n            game.gameScene.light.createUniforms(neighbor.mesh);\r\n        });\r\n        \r\n        this.base.mesh.position[2] = 0.0;\r\n        this.base.mesh.scale[2] = 1;\r\n    }\r\n}\r\n\r\nclass DistribuctionAction{\r\n    country = null;\r\n    amount = 0;\r\n\r\n    execute(game, country){\r\n        if(!this.country && country.owner === game.turnsManager.player){\r\n            game.gameScene.switchLight();\r\n\r\n            this.changePositions(game, country);\r\n    \r\n            game.fortify.up();\r\n    \r\n            this.country = country;\r\n    \r\n            game.turnsManager.openFortify();\r\n    \r\n        }\r\n    }\r\n\r\n    applyFort(game, x, y){\r\n        const btn = game.fortify.clickedWidget(x, y);\r\n\r\n        if(btn === \"-\" && this.amount > 0){\r\n            alert(this.amount)\r\n            this.amount--;\r\n            game.fortify.changeNumber(this.amount);\r\n        }else if(btn === \"+\" && this.amount < game.turnsManager.player.freeTroops){\r\n            this.amount++;\r\n            game.fortify.changeNumber(this.amount);\r\n        }else if(btn === \"cancel\"){\r\n            game.fortify.down();\r\n            this.resetPositions(game);\r\n            game.amount = 0;\r\n            game.fortify.changeNumber(0);\r\n        }else if(btn === \"ok\"){\r\n            game.turnsManager.player.addTroops(this.country, this.amount);\r\n            game.tView.update();\r\n            this.resetPositions(game);\r\n            game.fortify.down();\r\n            game.fortify.changeNumber(0);\r\n            this.amount = 0;\r\n        }\r\n    }\r\n\r\n    changePositions(game, country){\r\n        country.mesh.position[2] = 0.03;\r\n        country.mesh.scale[2] = 2;\r\n    \r\n        game.gameScene.light.createUniforms(country.mesh);\r\n    }\r\n    \r\n    resetPositions(game){\r\n        game.gameScene.switchLight();\r\n        \r\n        this.country.mesh.position[2] = 0.0;\r\n        this.country.mesh.scale[2] = 1;\r\n\r\n        this.country = null;\r\n    }\r\n}\r\n\r\nclass ReassignmentAction{\r\n    base = null;\r\n    neighbors = null;\r\n    destiny = null;\r\n    amount = 0;\r\n\r\n    execute(game, country){\r\n        const player = game.turnsManager.player;\r\n        const territoryController = game.territoryController;\r\n\r\n        alert(\"entrou em execute\")\r\n\r\n        console.log(this)\r\n    \r\n        if(!this.base) {\r\n            if(country.owner !== player) return\r\n\r\n            const neighbors = territoryController.countries.filter(c =>{\r\n                if(country.neighbors.indexOf(c.name) !== -1 && c.owner === country.owner)\r\n                    return c;\r\n            })\r\n\r\n            if(neighbors.length === 0) return;\r\n\r\n            this.base = country;\r\n            this.neighbors = neighbors;\r\n            this.changePositions(game, country, neighbors);\r\n    \r\n        }else if(!this.destiny){\r\n            if(this.neighbors.indexOf(country) === -1) return;\r\n    \r\n            alert(`from ${this.base.name} to ${country.name}`);\r\n\r\n            this.destiny = country;\r\n            \r\n            game.fortify.up();\r\n        }\r\n    }\r\n\r\n    applyFort(game, x, y){\r\n        alert(this.base.soldiers)\r\n\r\n        const btn = game.fortify.clickedWidget(x, y);\r\n\r\n        if(btn === \"-\" && this.amount > 0){\r\n            this.amount--;\r\n            game.fortify.changeNumber(this.amount);\r\n        }else if(btn === \"+\" && this.amount+1 < this.base.soldiers){\r\n            this.amount++;\r\n            game.fortify.changeNumber(this.amount);\r\n        }else if(btn === \"cancel\" || btn===\"ok\"){\r\n\r\n            alert(\"base soldiers:\"+this.base.soldiers+\" amount: \"+this.amount)\r\n\r\n            if(btn === \"ok\"){\r\n                game.territoryController.troop_reassignment(this.base, this.destiny, this.amount);\r\n                game.tView.update();\r\n            }\r\n\r\n            this.resetPositions(game);\r\n            game.fortify.down();\r\n            game.fortify.changeNumber(0);\r\n            this.amount = 0;\r\n            this.base = null;\r\n            this.neighbors = null;\r\n            this.destiny = null;\r\n        } \r\n        \r\n    }\r\n\r\n    changePositions(game, country, neighbors){\r\n        country.mesh.scale[2] = 3;\r\n        country.mesh.position[2] = 0.03;\r\n        country.mesh.scale[2] = 2;\r\n\r\n        game.gameScene.switchLight();\r\n\r\n        game.gameScene.light.createUniforms(country.mesh);\r\n\r\n        neighbors.forEach(neighbor => {\r\n            if(neighbor.owner === this.base.player) return;\r\n\r\n            neighbor.mesh.position[2] = 0.03;\r\n            neighbor.mesh.scale[2] = 2;\r\n\r\n            game.gameScene.light.createUniforms(neighbor.mesh);\r\n        });\r\n    }\r\n\r\n    resetPositions(game){\r\n        game.gameScene.switchLight();\r\n\r\n        this.neighbors.forEach(neighbor => {\r\n            neighbor.mesh.position[2] = 0.0;\r\n            neighbor.mesh.scale[2] = 1;\r\n\r\n            game.gameScene.light.createUniforms(neighbor.mesh);\r\n        });\r\n        \r\n        this.base.mesh.position[2] = 0.0;\r\n        this.base.mesh.scale[2] = 1;\r\n    }\r\n}","import Mesh from \"../webgl/mesh\";\r\nimport ImageGL from \"./image\";\r\n\r\nexport default class CanvasImage extends ImageGL{\r\n    #canvas;\r\n\r\n    async init(gl, canvasDimension = 1000){\r\n        const canvas = document.createElement(\"canvas\");\r\n        const image = canvas.toDataURL(\"image/png\");\r\n\r\n        [canvas.width, canvas.height] = [canvasDimension, canvasDimension];\r\n\r\n        await super.init(gl, image);\r\n        this.#canvas = canvas;\r\n    }\r\n\r\n    async update(drawCanvas = (ctx)=>{}, gl){\r\n        const ctx = this.#canvas.getContext(\"2d\");\r\n\r\n        drawCanvas(ctx);\r\n\r\n        const image = this.#canvas.toDataURL(\"image/png\");\r\n        const imageElement = await ImageGL.loadImage(image);\r\n    \r\n        Mesh.changeTex(gl, this._tex, imageElement);\r\n    }\r\n\r\n    clear(x = 0, y = 0, width = this.#canvas.width, height = this.#canvas.height){\r\n        const ctx = this.#canvas.getContext(\"2d\");\r\n        ctx.clearRect(x, y, width, height);\r\n    }\r\n\r\n}","import CanvasImage from \"./canvasImage\";\r\n\r\nexport default class TroopsView{\r\n    #image;\r\n    #countries;\r\n    #gl;\r\n    #cImage\r\n\r\n    async init(countries, scale, gl){\r\n        this.#countries = countries;\r\n        this.#gl = gl;\r\n        this.#cImage = new CanvasImage();\r\n        await this.#cImage.init(gl);\r\n\r\n        this.#cImage.scale = [2.5, 5.0];\r\n\r\n        this.#cImage.depth = 0.1;\r\n    \r\n        await this.update();\r\n\r\n        this.#image = this.#cImage;\r\n    }\r\n\r\n    async update() {\r\n\r\n        this.#cImage.clear(0, 0, this.#gl.canvas.width, this.#gl.canvas.height);\r\n\r\n        await this.#cImage.update(ctx =>{\r\n            if (!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n            this.#countries.forEach(country => {\r\n                const center = country.mesh.center;\r\n\r\n                ctx.fillStyle = \"white\";\r\n                \r\n                ctx.font = \"30px Arial\";\r\n                ctx.fillText(country.soldiers+\"\", (center[0] + 0.5)*1000 - 10, (-center[1]+0.5)*1000)+10;\r\n            });\r\n\r\n        }, this.#gl);\r\n    }\r\n\r\n    draw(camera){\r\n        this.#image.draw(camera);\r\n    }\r\n}\r\n","import { Player } from \"../player/player\";\r\n//Carregar os objetivos\r\n//Atribuir um objetivo para cada jogador ao inicio da partida\r\n\r\nexport default class Goal{\r\n    #goals = []; //vetor de objetivos\r\n    #goalCount; //numero de objetivos no vetor\r\n    #goalToReturn //objetivo a ser retornado\r\n    \r\n    get getGoal(){\r\n        return this.#goalToReturn;\r\n    }\r\n\r\n    async loadGoals(){\r\n        const json = await fetch(\"./assets/data/goals.json\");\r\n        const goals = await json.json();\r\n        \r\n        this.#goalCount = goals.data.length;\r\n        \r\n        for(let i = 0; i < this.#goalCount; i++) {\r\n            let goal = goals.data[i]\r\n            this.#goals.push(goal);\r\n        }\r\n    }\r\n    \r\n    async sortGoal(player, color) {\r\n        const colorName = this.colorName(color);\r\n        let index = Math.floor(Math.random() * this.#goalCount);\r\n        \r\n        if(this.#goals[index].owner == \"\"){\r\n            if(\r\n                (this.#goals[index].id == 8  && colorName == 'azul')     ||\r\n                (this.#goals[index].id == 9  && colorName == 'amarelo')  ||\r\n                (this.#goals[index].id == 10  && colorName == 'vermelho')||\r\n                (this.#goals[index].id == 11  && colorName == 'preto')   ||\r\n                (this.#goals[index].id == 12  && colorName == 'branco')  ||\r\n                (this.#goals[index].id == 13  && colorName == 'verde') \r\n            \r\n            ){\r\n                this.sortGoal(player, color);\r\n            }else{\r\n                this.#goals[index].owner = player;\r\n                this.#goalToReturn = this.#goals[index];\r\n            }\r\n        }else{\r\n            this.sortGoal(player, color);\r\n        }\r\n    }\r\n\r\n    \r\n    //se o objetivo do jogador estiver entre 8 e 13 chamar essa função.\r\n    verifyDestroy(player, vetPlayer){\r\n        let colorName;\r\n        switch(player.goalId) {\r\n            case 8:\r\n                colorName = \"azul\";\r\n                break;\r\n            case 9:\r\n                colorName = \"amarelo\";\r\n                break;\r\n            case 10:\r\n                colorName = \"vermelho\";\r\n                break;\r\n            case 11:\r\n                colorName = \"preto\";\r\n                break;\r\n            case 12:\r\n                colorName = \"branco\";\r\n                break;\r\n            case 13:\r\n                colorName = \"verde\";\r\n                break;\r\n            default:\r\n                colorName = \"\";\r\n                break;\r\n        }\r\n\r\n        if(colorName == \"\") return false;\r\n\r\n        for(let i = 0; i < 6; i++){\r\n            let playerColor = this.colorName(vetPlayer[i].color);\r\n            \r\n            if(playerColor == colorName){\r\n                if(vetPlayer[i].continentsOwned != 0){\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    //se o objetivo do jogador estiver entre 0 e 5 chamar essa função\r\n    verifyContinent(player){\r\n        let continentCount;\r\n        let continents = [];\r\n        let verify = false;\r\n\r\n        switch(player.goalId){\r\n            case 0:\r\n                continentCount = 3;\r\n                continents = [\"Europa\", \"Oceania\"];\r\n                break;\r\n            case 1:\r\n                continentCount = 2;\r\n                continents = [\"Ásia\", \"América do Sul\"];\r\n                break;\r\n            case 2:\r\n                continentCount = 3;\r\n                continents = [\"Europa\", \"América do Sul\"];\r\n                break;\r\n            case 3:\r\n                continentCount = 2;\r\n                continents = [\"Ásia\", \"África\"];\r\n                break;\r\n            case 4:\r\n                continentCount = 2;\r\n                continents = [\"América do Norte\", \"África\"];\r\n                break;\r\n            case 5:\r\n                continentCount = 2;\r\n                continents = [\"América do Norte\", \"Oceania\"];\r\n                break;\r\n        }\r\n\r\n        if(player.continentsOwned >= continentCount){\r\n            verify = continents.every(continent => player.vetContinentsOwned.includes(continent));\r\n        }\r\n       \r\n        return verify\r\n        \r\n    }\r\n\r\n    //se o objetivo do jogador for o 6 ou 7;\r\n    verifyTerritory(player){\r\n        let territoryCount;\r\n        let territoryTroops;\r\n        let verify;\r\n\r\n        switch(player.goalId){\r\n            case 6:\r\n                territoryCount = 18;\r\n                territoryTroops = 2;\r\n                break;\r\n            case 7:\r\n                territoryCount = 24;\r\n                territoryTroops = 1;\r\n                break;\r\n        }\r\n\r\n        if(player.territoriesOwned >= territoryCount){\r\n            for(let i = 0; i < player.territoriesOwned; i++){\r\n                if(player.vetTerritoriesOwned[i].soldiers >= territoryTroops){\r\n                    verify = true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return verify;\r\n    }\r\n\r\n    \r\n    colorName(color){\r\n        if(`${color}` == '0,0,1,1'){\r\n            return 'azul';\r\n        }else if(`${color}` == '1,1,0,1'){\r\n            return 'amarelo';\r\n        }else if(`${color}` == '1,0,0,1'){\r\n            return 'vermelho';\r\n        }else if(`${color}` == '1,1,1,1'){\r\n            return 'preto';\r\n        }else if(`${color}` == '0,0,0,1'){\r\n            return 'branco';\r\n        }else if(`${color}` == '0,0.4,0,1'){\r\n            return 'verde';\r\n        }\r\n    }\r\n}","import ImageGL from \"./view/image\";\r\nimport Scene from \"./webgl/scene\";\r\nimport { Player } from \"./model/player/player\";\r\nimport TerritoryController from \"./model/map/territories/territory-controller\";\r\nimport TurnsManager from \"./model/player/turns_manager\";\r\nimport EventsHandler from \"./events/events_manager\";\r\nimport TroopsView from \"./view/troopsView\";\r\nimport CanvasImage from \"./view/canvasImage\";\r\nimport Goal from \"./model/tools/goal\";\r\n\r\nclass Game{\r\n    #menuScene;\r\n    #gameScene;\r\n    #guiScene;\r\n    #background;\r\n    #tView;\r\n\r\n    #territoryController;\r\n\r\n    #scale = 4.5;\r\n\r\n    #inGame = false;\r\n    #toGame = false;\r\n\r\n    #players = [];\r\n    #turnsManager;\r\n\r\n    #countryEvents;\r\n\r\n    #fortify;\r\n    #gameScreen;\r\n\r\n    #goal;\r\n    #goal_path;\r\n\r\n    get tView(){\r\n        return this.#tView;\r\n    }\r\n\r\n    get inGame(){\r\n        return this.#inGame;\r\n    }\r\n\r\n    get gameScene(){\r\n        return this.#gameScene;\r\n    }\r\n    \r\n    get turnsManager(){\r\n        return this.#turnsManager;\r\n    }\r\n\r\n    get territoryController(){\r\n        return this.#territoryController;\r\n    }\r\n\r\n    get fortify(){\r\n        return this.#fortify;\r\n    }\r\n\r\n    get gameScreen(){\r\n        return this.#gameScreen;\r\n    }\r\n\r\n    static async build(canvas){\r\n        const game = new Game();\r\n        await game.init(canvas);\r\n\r\n        return game;\r\n    }\r\n\r\n    async init(canvas){\r\n        this.gl = canvas.getContext(\"webgl2\");\r\n        await this.#createMenuScene();\r\n        //Depois talvez carregar o jogo apenas quando for dado o play\r\n        \r\n\r\n        const names = [\"Player 1\", \"Player 2\", \"Player 3\", \"Player 4\", \"Player 5\", \"Player 6\"];\r\n\r\n        \r\n        //azul, amarelo, vermelho, preto, verde\r\n        const colors = [\r\n            [0.0, 0.0, 1.0, 1.0],\r\n            [1.0, 1.0, 0.0, 1.0],\r\n            [1.0, 0.0, 0.0, 1.0],\r\n            [1.0, 1.0, 1.0, 1.0],\r\n            [0.0, 0.0, 0.0, 1.0],\r\n            [0.0, 0.4, 0.0, 1.0]\r\n        ];\r\n        \r\n        const goal = new Goal();\r\n        await goal.loadGoals();\r\n        \r\n        for(let i = 0; i < 6; i++){\r\n            const index = Math.floor(Math.random() * colors.length);\r\n            const color = colors[index];\r\n\r\n            goal.sortGoal(names[5-i], color);\r\n            let playerGoal = goal.getGoal;\r\n            \r\n            colors.splice(index, 1);\r\n            this.#goal_path = playerGoal.path;\r\n            this.#players[i] = new Player(names[i], color, playerGoal);\r\n\r\n        }\r\n\r\n        this.#territoryController = new TerritoryController();\r\n        await this.#territoryController.init(this.gl, this.#scale);\r\n\r\n        const countries = [...this.#territoryController.countries];\r\n\r\n        const countriesPerPlayer = Math.floor(countries.length/this.#players.length); \r\n        \r\n        for(let player of this.#players){\r\n            for(let i = 0; i<countriesPerPlayer; i++){\r\n                if(!countries.length) break;\r\n                \r\n                const index = Math.floor(Math.random()*countries.length);\r\n\r\n                countries[index].owner = player;\r\n                countries[index].soldiers = 1;\r\n\r\n                countries.splice(index, 1);\r\n            }\r\n        }\r\n        \r\n        //tratar o lance de sobrar países\r\n\r\n        this.#turnsManager = new TurnsManager(this.#players);\r\n\r\n        await this.#createGameScreenAlt();\r\n\r\n        this.#countryEvents = new EventsHandler(this);\r\n    }\r\n\r\n    async #createMenuScene(){\r\n        this.#menuScene = new Scene(this.gl);\r\n\r\n        const background = new ImageGL();\r\n        await background.init(this.gl, \"./assets/menu/fundo.jpg\");\r\n\r\n        const logoWar = new ImageGL();\r\n        await logoWar.init(this.gl, \"./assets/menu/logo_war.png\");\r\n\r\n        const playButton = new ImageGL();\r\n        await playButton.init(this.gl, \"./assets/menu/play_button.png\");\r\n\r\n        const settingsButton = new ImageGL();\r\n        await settingsButton.init(this.gl, \"./assets/menu/settings_button.png\");\r\n        \r\n        const maxButton = new ImageGL();\r\n        await maxButton.init(this.gl, \"./assets/menu/max_button.png\");\r\n\r\n        //scales\r\n        background.scaleY = 1.85\r\n        logoWar.scale = [0.35, 0.56] \r\n        playButton.scale = [0.15, 0.26]\r\n        settingsButton.scale = [0.046, 0.08]  \r\n        maxButton.scale = [0.046, 0.08]  \r\n\r\n        //position\r\n        logoWar.positionY = 0.25\r\n        \r\n        playButton.positionY = -0.55\r\n        \r\n        settingsButton.positionX = 0.9\r\n        settingsButton.positionY = 0.8\r\n\r\n        this.#menuScene.appendElement(background, logoWar, playButton, settingsButton);\r\n\r\n        this.gl.canvas.addEventListener(\"click\", e=>{\r\n            // e.clientX e e.clientY são a posição do mouse\r\n    \r\n            const point = Game.mapClickInCanvas(e.clientX, e.clientY, this.gl.canvas);\r\n    \r\n            if(playButton.pointCollision(...point)){\r\n                if(!this.#inGame)\r\n                    this.#toGame = true;\r\n            }\r\n    \r\n        })\r\n    }\r\n\r\n    async #createGameScreenAlt(){\r\n        const background = new ImageGL();\r\n        await background.init(this.gl, \"./assets/game/fundo.jpg\");\r\n        \r\n        background.scaleY = 1.85;\r\n        background.scaleX = 1.01;\r\n        background.depth = -0.01;\r\n        this.#background = background;\r\n        \r\n        const goal = new ImageGL();\r\n        await goal.init(this.gl, this.#goal_path);\r\n        goal.scaleX = 0.4;\r\n        goal.scaleY = 0.6;\r\n        this.#goal = goal;\r\n        \r\n        \r\n\r\n        const gameScreen = new GameScreen();\r\n        await gameScreen.init(this.gl);\r\n\r\n        this.#gameScreen = gameScreen;\r\n\r\n        const show_cards = new ShowCards();\r\n        await show_cards.init(this.gl);\r\n\r\n        const fortify = new Fortify();\r\n        await fortify.init(this.gl);\r\n\r\n\r\n        this.#fortify = fortify;\r\n\r\n        this.#gameScene = new Scene(this.gl);\r\n        this.#gameScene.createCamera(canvas);\r\n        this.#gameScene.camera.camPosition[2] = 1.8;\r\n        this.#gameScene.camera.camPosition[1] = -0.2;\r\n        this.#gameScene.createLight([1.0, 0.0, 0.3]);\r\n\r\n        this.#guiScene = new Scene(this.gl);\r\n    \r\n        this.#tView = new TroopsView();\r\n        await this.#tView.init(this.#territoryController.countries, this.#scale, this.gl);\r\n    \r\n        this.#gameScene.appendElement(...this.#territoryController.countries);\r\n        this.#guiScene.appendElement(gameScreen, show_cards, fortify);\r\n\r\n        this.#gameScene.appendElement(this.#tView);\r\n\r\n        for(let country of this.#territoryController.countries){\r\n            country.mesh.setUniformValue(\"view\", this.#gameScene.camera.viewMatrix, \"Matrix4fv\");\r\n            country.mesh.setUniformValue(\"projection\", this.#gameScene.camera.projMatrix, \"Matrix4fv\");\r\n            country.mesh.setUniformValue(\"color\", country.owner.color, \"4fv\");\r\n        }\r\n    \r\n    }\r\n\r\n    logic(){\r\n        this.#fortify.logic();\r\n    }\r\n\r\n    draw(){\r\n        if(this.#inGame){\r\n            this.#background.draw();\r\n            this.#gameScene.draw();\r\n            this.#guiScene.draw();\r\n            //this.#goal.draw();\r\n        }\r\n        else{\r\n            this.#menuScene.draw();\r\n        }\r\n    }\r\n\r\n    run(){\r\n        const run_aux = ()=>{\r\n            this.logic();\r\n            this.draw();\r\n\r\n            if(this.#toGame){\r\n                this.#inGame = true;\r\n                this.#toGame = false;\r\n            }\r\n\r\n            requestAnimationFrame(run_aux);\r\n        }\r\n\r\n        run_aux();\r\n    }\r\n\r\n    static mapClickInCanvas(x, y, canvas){\r\n        const mappedOnCenter = [\r\n            (x - canvas.offsetLeft) - canvas.width/2, \r\n            (canvas.height/2) - (y - canvas.offsetTop)\r\n        ];\r\n\r\n        return [mappedOnCenter[0]*2/canvas.width, mappedOnCenter[1]*2/canvas.height];\r\n    }\r\n\r\n\r\n}\r\n\r\nclass GameScreen{\r\n    async init(gl){\r\n        this.settingsButton = new ImageGL();\r\n        await this.settingsButton.init(gl, \"./assets/menu/settings_button.png\");\r\n        this.settingsButton.scale = [0.046, 0.08]; \r\n        GameScreen.setInitialPosition(0.9, 0.8, 0.2, this.settingsButton);\r\n\r\n        this.card_button = new ImageGL();\r\n        await this.card_button.init(gl, \"./assets/game/card_button.png\");\r\n        this.card_button.scale = [0.08, 0.15]; \r\n        GameScreen.setInitialPosition(0.76, -0.85, 0.2, this.card_button);\r\n\r\n        this.objective_button = new ImageGL();\r\n        await this.objective_button.init(gl, \"./assets/game/objective_button.png\");\r\n        this.objective_button.scale = [0.065, 0.11]; \r\n        GameScreen.setInitialPosition(0.92, -0.85, 0.2, this.objective_button);\r\n\r\n        this.current_player = new ImageGL();\r\n        await this.current_player.init(gl, \"./assets/game/current_player1.png\");\r\n        this.current_player.scale = [0.4, 0.6]; \r\n        GameScreen.setInitialPosition(0, -0.85, 0.2, this.current_player);\r\n\r\n        this.current_player_text = new CanvasImage();\r\n        await this.current_player_text.init(gl);\r\n\r\n        this.current_player_text.update(ctx => {\r\n            if(!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n            ctx.fillStyle = \"white\";\r\n\r\n            //ctx.fillRect(0, 0, 1000, 1000);\r\n                \r\n            ctx.font = \"200px Arial\";\r\n            ctx.fillText(\"Vez do jogador 1\", 250, 0);\r\n\r\n            ctx.fillText(\"Distribuição de tropas\", 100, 500);\r\n        }, gl);\r\n\r\n        this.current_player_text.scale = [0.4, 0.3];\r\n        this.current_player_text.positionY = -0.85;\r\n\r\n        this.show_players = new ImageGL();\r\n        await this.show_players.init(gl, \"./assets/game/show_players.png\");\r\n        this.show_players.scale = [0.065, 0.115]; \r\n        GameScreen.setInitialPosition(-0.92, -0.85, 0.2, this.show_players);\r\n\r\n        this.changeStateBtn = new CanvasImage();\r\n        await this.changeStateBtn.init(gl, 50);\r\n\r\n        this.changeStateBtn.scale = [0.05, 0.15];\r\n\r\n        GameScreen.setInitialPosition(3/5-0.05, -7/8, 0.2, this.changeStateBtn);\r\n\r\n        this.changeStateBtn.update(ctx => {\r\n            if(!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n            ctx.fillStyle = \"white\";\r\n\r\n            ctx.fillRect(0, 0, 50, 50);\r\n\r\n        }, gl);\r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amountY){\r\n        this.card_button.positionY += amountY;\r\n        this.objective_button._tex.positionY += amountY;\r\n        this.current_player.positionY += amountY;\r\n    }\r\n\r\n    draw(camera){\r\n        this.settingsButton.draw(camera);\r\n        this.card_button.draw(camera);\r\n        this.objective_button.draw(camera);\r\n        this.current_player.draw(camera);\r\n        this.current_player_text.draw(camera);\r\n        this.show_players.draw(camera);\r\n        this.changeStateBtn.draw(camera);\r\n    }\r\n\r\n    clickedWidget(x, y){\r\n        if (this.changeStateBtn.pointCollision(x, y)){\r\n            return \"changeTurn\";\r\n        }\r\n    }\r\n}\r\n\r\nclass ShowCards{\r\n    async init(gl){\r\n        this.show_cards = new ImageGL();\r\n        await this.show_cards.init(gl, \"./assets/game/show_cards.png\");\r\n        this.show_cards.scale = [0.4, 0.7];\r\n        ShowCards.setInitialPosition(this.show_cards.positionX, -0.85 - 1, 0.3, this.show_cards);\r\n        \r\n        this.cancel_button = new ImageGL();\r\n        await this.cancel_button.init(gl, \"./assets/game/cancel_button.png\");\r\n        this.cancel_button.scale = [0.046, 0.083];\r\n        ShowCards.setInitialPosition(-0.34, -0.81 - 1, 0.4, this.cancel_button);\r\n\r\n        this.ok_button = new ImageGL();\r\n        await this.ok_button.init(gl, \"./assets/game/ok_button.png\");\r\n        this.ok_button.scale = [0.046, 0.083];\r\n        ShowCards.setInitialPosition(0.34, -0.81 - 1, 0.4, this.ok_button);\r\n\r\n        this.cards_info = new ImageGL();\r\n        await this.cards_info.init(gl, \"assets/game/cards_info.png\");\r\n        this.cards_info.scale = [0.2, 0.35];\r\n        ShowCards.setInitialPosition(0.832 + 1, this.cards_info.positionY, 0.3, this.cards_info); \r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amountX, amountY){\r\n        this.show_cards.positionY += amountY;\r\n        this.cancel_button.positionY += amountY;\r\n        this.ok_button.positionY += amountY;\r\n        this.cards_info.positionX += amountX\r\n    }\r\n\r\n    draw(camera){\r\n        this.show_cards.draw(camera);\r\n        this.cancel_button.draw(camera);\r\n        this.ok_button.draw(camera);\r\n        this.cards_info.draw(camera);\r\n    }\r\n\r\n}\r\n\r\nclass Fortify{\r\n    #up = false;\r\n    #yPos = 0;\r\n    #gl;\r\n\r\n    #down =  false;\r\n\r\n    get opened(){\r\n        return (!this.#up && this.#yPos === 1.0);\r\n    }\r\n\r\n    async init(gl){\r\n        this.fortify = new ImageGL();\r\n        await this.fortify.init(gl, \"./assets/game/fortify.png\");\r\n        this.fortify.scale = [0.4, 0.7];\r\n        Fortify.setInitialPosition(this.fortify.positionX, -0.825 - 1, 0.3, this.fortify);\r\n\r\n        this.cancel_button = new ImageGL();\r\n        await this.cancel_button.init(gl, \"./assets/game/cancel_button.png\");\r\n        this.cancel_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(-0.34, -0.81 - 1, 0.4, this.cancel_button);\r\n\r\n        this.ok_button = new ImageGL();\r\n        await this.ok_button.init(gl, \"./assets/game/ok_button.png\");\r\n        this.ok_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(0.34, -0.81 - 1, 0.4, this.ok_button);\r\n\r\n        this.plus_button = new ImageGL();\r\n        await this.plus_button.init(gl, \"./assets/game/plus_button.png\");\r\n        this.plus_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(0.168, -0.86 - 1, 0.4, this.plus_button);\r\n\r\n        this.minus_button = new ImageGL();\r\n        await this.minus_button.init(gl, \"./assets/game/minus_button.png\");\r\n        this.minus_button.scale = [0.046, 0.083];\r\n        Fortify.setInitialPosition(-0.168, -0.86 - 1, 0.4, this.minus_button);\r\n\r\n        this.numberImage = new CanvasImage();\r\n        await this.numberImage.init(gl, 500);\r\n\r\n        this.numberImage.update(ctx => {\r\n            if(!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n            ctx.fillStyle = \"white\";\r\n                \r\n            ctx.font = \"30px Arial\";\r\n            ctx.fillText(\"0\", 250, 250);\r\n        }, gl);\r\n\r\n        this.numberImage.depth = 0.5;\r\n        this.numberImage.scaleY = 1.5;\r\n\r\n        Fortify.setInitialPosition(-0.05, -0.86 - 1, 0.4, this.numberImage);\r\n\r\n        this.#gl = gl;\r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amount){\r\n        console.log(\"am: \", amount);\r\n\r\n        this.fortify.positionY += amount;\r\n        this.cancel_button.positionY += amount;\r\n        this.ok_button.positionY += amount;\r\n        this.plus_button.positionY += amount;\r\n        this.minus_button.positionY += amount;\r\n        this.numberImage.positionY += amount;\r\n    }\r\n\r\n    up(){\r\n        this.#up = true;\r\n        this.#down = false;\r\n    }\r\n\r\n    down(){\r\n        this.#down = true;\r\n        this.#up = false;\r\n    }\r\n\r\n    logic(){\r\n        const step = 0.01;\r\n\r\n        if(this.#up || this.#down){\r\n            if(this.#up){\r\n                this.#yPos += step;\r\n    \r\n                if(this.#yPos>=1.0){\r\n                    this.#yPos = 1.0;\r\n                    this.#up = false;\r\n                }else\r\n                    this.moveAll(step);\r\n            }else if(this.#down){\r\n                this.#yPos -= step;\r\n    \r\n                if(this.#yPos<=0.0){\r\n                    this.#yPos = 0.0;\r\n                    this.#down = false;\r\n                }else\r\n                    this.moveAll(-step);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    draw(camera){\r\n        this.fortify.draw(camera);\r\n        this.cancel_button.draw(camera);\r\n        this.ok_button.draw(camera);\r\n        this.plus_button.draw(camera);\r\n        this.minus_button.draw(camera);\r\n        this.numberImage.draw(camera);\r\n    }\r\n\r\n    clickedWidget(x, y){\r\n        if(this.cancel_button.pointCollision(x, y)){\r\n            return \"cancel\";\r\n        }else if(this.ok_button.pointCollision(x, y)){\r\n            return \"ok\";\r\n        }else if(this.plus_button.pointCollision(x, y)){\r\n            return \"+\";\r\n        }else if(this.minus_button.pointCollision(x, y)){\r\n            return \"-\";\r\n        }\r\n    }\r\n\r\n    changeNumber(number){\r\n        this.numberImage.clear();\r\n\r\n        this.numberImage.update(ctx => {\r\n            if(!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n            ctx.fillStyle = \"white\";\r\n                \r\n            ctx.font = \"30px Arial\";\r\n            ctx.fillText(\"\"+number, 250, 250);\r\n        }, this.#gl);\r\n    }\r\n\r\n}\r\n\r\nconst canvas = document.querySelector(\"#game-screen\");\r\n\r\nGame.build(canvas).then(game => {\r\n    game.run();\r\n});\r\n"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","create","out","copy","a","identity","invert","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","multiply","b","b0","b1","b2","b3","Math","random","PI","hypot","y","i","arguments","length","sqrt","GLUtil","static","gl","type","source_code","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","getShaderInfoLog","Error","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","data","buffer","ArrayBuffer","undefined","byteLength","console","warn","createBuffer","bindBuffer","bufferData","STATIC_DRAW","attributes","WebGL2RenderingContext","vao","createVertexArray","size","bindVertexArray","attribute","loc","enableVertexAttribArray","dimension","FLOAT","ARRAY_BUFFER","vertexAttribPointer","Mesh","_gl","position","rotation","scale","_program","_primitive","_vaoLoc","useDepthTest","modelMatrix","this","updateModelMatrix","addAttribute","name","pointDim","forEach","val","count","f32Array","push","getAttribLocation","constructor","vertShaderSrc","fragShaderSrc","primitive","VERTEX_SHADER","FRAGMENT_SHADER","useProgram","createVAO","v","x","z","rad","s","sin","c","cos","loadMVP","camera","modelLoc","getUniformLocation","mvLoc","mvpLoc","viewLoc","viewProjLoc","projectionLoc","uniformMatrix4fv","mv","viewMatrix","mvp","viewProjection","projMatrix","createTex","texData","textureName","uTexture","texture","Texture","createTexture","texI","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA32F","RGBA","uniform1i","log","tex","index","bindTextures","bind","setUniformValue","value","uniformLoc","startsWith","draw","cam","frontFace","CCW","enable","CULL_FACE","cullFace","BACK","DEPTH_TEST","depthFunc","LESS","drawArrays","disable","uniform","newData","ImageGL","width","height","scaleX","scaleY","positionX","positionY","depth","theta","vec","opacity","alpha","async","src","TRIANGLES","coords","texCoords","url","Promise","resolve","image","Image","addEventListener","imgSrc","img","loadImage","decode","imageBitmap","createImageBitmap","_tex","proportion","newWidth","newHeight","v1","v2","v3","v4","pointCollision","inverse","near","far","p1","multiplyMatWithVec","p2","p1Norm","scalarMulti","p2Norm","pointT","Line","pointWhenZIs","abs","vector","scalar","map","coord","mat","fill","round","j","extreme","origin","vDir","getPoint","t","reduce","ac","Vertex","Map","id","hEdge","HalfEdge","opositte","next","vertex","Face","HalfEdgeDS","indexes","i1","i2","i3","h1","h2","h3","face","setOposittes","v0","hEdge1","setAttribute","values","vertlen","attrib","slice","set","createVBOs","keys","get","IndexedMeshT","border","super","vbos","from","entries","entry","ELEMENT_ARRAY_BUFFER","Uint32Array","_count","drawElements","UNSIGNED_INT","center","drawBorder","path","vertShader","fragShader","texturePath","obj","fetch","text","lines","split","vertices","normals","borderIndex","line","replace","Number","parseFloat","d","dotProduct","key","join","init","indexOf","vIndex","parseInt","border1","Border","mesh","curr","min","Infinity","max","minX","maxX","minY","maxY","point","first","prev","intersecsCount","compare","leftToEdge","sort","deltaX","ang","coefLin","canvas","document","createElement","style","backgroundColor","ctx","getContext","beginPath","lineTo","moveTo","stroke","fillRect","Country","continent","neighbors","owner","soldiers","addCountry","newOwner","findNeighbor","loadMeshFromObj","changeColor","color","Camera","camPosition","lookDirection","upDirection","left","right","bottom","top","fovy","aspect","projectionType","eye","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","nf","f","tan","lr","bt","Light","ambColor","ambK","difColor","difK","espColor","espK","espExp","pos","createUniforms","Scene","light","clearColor","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","createCamera","createLight","appendElement","drawnables","drawnable","switchLight","element","Dice","numDice","diceRolls","floor","Attack","attackPlayer","countryAttack","countryDefense","dicesAttack","calcDices","dicesDefense","alert","attackDiceRolls","rollDice","defendDiceRolls","attackWins","defenseWins","reverse","country","isAttack","dice","getCountryObject","countries","find","isValidCountry","includes","Player","goal","conquestTerritory","territorio","receiveTroop","qtdreceivedTroops","addTroops","qtdTroops","attack","base","to","freeTroops","territoriesOwned","vetTerritoriesOwned","continentsOwned","vetContinentsOwned","goalId","Continent","bonus","TerritoryController","loadContinents","loadCountries","json","continents","newContinent","countriesJson","newCountry","loadMesh","conquerCountry","countryFound","findCountry","troop_reassignment","destiny","qtd","clickedCountry","TurnsManager","players","nextPlayer","DISTRIBUCTION","player","state","fortifyOpened","openFortify","closeFortify","nextState","EventsHandler","mapDebug","game","child","DistribuctionAction","ATTACK","AttackAction","REASSIGNMENT","ReassignmentAction","e","turnsManager","FREEZE","inGame","mapClickInCanvas","clientX","clientY","fortify","opened","applyFort","gameScreen","clickedWidget","territoryController","gameScene","execute","body","appendChild","removeChild","mappedOnCenter","offsetLeft","offsetTop","amount","changeNumber","tView","update","resetPositions","filter","changePositions","btn","down","neighbor","canvasDimension","toDataURL","drawCanvas","imageElement","changeTex","clearRect","TroopsView","CanvasRenderingContext2D","fillStyle","font","fillText","Goal","getGoal","goals","colorName","sortGoal","verifyDestroy","vetPlayer","verifyContinent","continentCount","verify","every","verifyTerritory","territoryCount","territoryTroops","Game","names","colors","loadGoals","playerGoal","splice","countriesPerPlayer","background","logoWar","playButton","settingsButton","maxButton","GameScreen","show_cards","ShowCards","Fortify","logic","run","run_aux","requestAnimationFrame","setInitialPosition","card_button","objective_button","current_player","current_player_text","show_players","changeStateBtn","widget","moveAll","amountY","cancel_button","ok_button","cards_info","amountX","plus_button","minus_button","numberImage","step","number","querySelector","build","then"],"sourceRoot":""}