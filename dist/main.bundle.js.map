{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://projeto-war/./node_modules/gl-matrix/esm/common.js","webpack://projeto-war/./node_modules/gl-matrix/esm/mat4.js","webpack://projeto-war/./node_modules/gl-matrix/esm/vec3.js","webpack://projeto-war/./src/webgl/gl-util.js","webpack://projeto-war/./src/webgl/mesh.js","webpack://projeto-war/./src/view/image.js","webpack://projeto-war/./src/shaders/imageVert.js","webpack://projeto-war/./src/shaders/imageFrag.js","webpack://projeto-war/./src/webgl/camera.js","webpack://projeto-war/./src/main.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","export default class GLUtil{\n    static createShader(gl, type, source_code) {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, source_code);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            const info = gl.getShaderInfoLog(shader);\n            throw new Error(\"Shader compilation error: \"+info);\n        }\n    \n        return shader;\n    }\n    \n    static createProgram(gl, vertexShader, fragmentShader) {\n        const program = gl.createProgram();\n    \n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            const info = gl.getProgramInfoLog(program);\n            throw new Error('Could not compile WebGL program:' + info);\n        }\n    \n        return program;\n    }\n    \n    static createBuffer(gl, type, data) {\n        if (data.length == 0)\n          return null;\n    \n        if (!(data && data.buffer instanceof ArrayBuffer && data.byteLength !== undefined)) {\n          console.warn('Data is not an instance of ArrayBuffer');\n          return null;\n        }\n    \n        const buffer = gl.createBuffer();\n\n        gl.bindBuffer(type, buffer);\n        gl.bufferData(type, data, gl.STATIC_DRAW);\n\n        return buffer;\n    }\n    \n\n      // refazer essa depois\n    static createVAO(gl, ...attributes) {\n      if(!(gl instanceof WebGL2RenderingContext)) return;\n\n        const vao = gl.createVertexArray();\n    \n        gl.bindVertexArray(vao);\n\n        let size;\n        let type;\n    \n        for(let attribute of attributes){\n          if (attribute.loc != null && attribute.loc != undefined) {\n            gl.enableVertexAttribArray(attribute.loc);\n            size = attribute.dimension;\n            type = gl.FLOAT;\n            gl.bindBuffer(gl.ARRAY_BUFFER, attribute.buffer);\n            gl.vertexAttribPointer(attribute.loc, size, type, false, 0, 0);\n          }\n        }\n    \n        return vao;\n    }\n}","import { vec3, mat4 } from \"gl-matrix\";\nimport GLUtil from \"./gl-util\";\n\nexport default class Mesh{\n\n    #gl;\n\n    position = [0.0, 0.0, 0.0];\n    rotation = [0.0, 0.0, 0.0];\n    scale = [1.0, 1.0, 1.0];\n\n    static #textureI = 0;\n\n    #modelMatrix = mat4.create();\n\n    #attributes = [];\n\n    #vertShader = null;\n    #fragShader = null;\n\n    #program = null;\n\n    #primitive;\n\n    #count;\n\n    #vaoLoc;\n\n    #uTexture;\n    #texture;\n\n    #useModelMatrix = true;\n    \n    get modelMatrix(){\n        this.#updateModelMatrix();\n        return this.#modelMatrix;\n    }\n\n    set useModelMatrix(use){\n        if(!(use instanceof Boolean))\n            throw new Error(\"useModelMatrix need to be a boolean value\");\n        \n        this.#useModelMatrix = use;\n    }\n\n    addAttribute(name, info, pointDim = 4){\n        if(!(info instanceof Array))\n            throw new Error(\"The info parameter needs to be a Array.\");\n\n        info.forEach(val => {\n            if(typeof val !== \"number\") \n                throw new Error(\"The info array need to be numeric.\");\n        });\n\n        const count = info.length/pointDim;\n\n        if(!this.#count) this.#count = count;\n\n        else if(count !== this.#count) \n            throw new Error(\"The VBOs need to contain the same number of vertex.\");\n\n        const f32Array = new Float32Array(info);\n\n        this.#attributes.push({\n            loc: this.#gl.getAttribLocation(this.#program, name),\n            buffer: GLUtil.createBuffer(this.#gl, this.#gl.ARRAY_BUFFER,f32Array),\n            dimension: pointDim\n        })\n    }\n\n    constructor(gl, vertShaderSrc, fragShaderSrc, primitive){\n        this.#primitive = primitive;\n        \n        this.#gl = gl;\n        //restringir os tipos\n\n        this.createShader(vertShaderSrc, fragShaderSrc);\n    }\n\n    createShader(vertShaderSrc, fragShaderSrc) {\n        this.#vertShader = GLUtil.createShader(this.#gl, this.#gl.VERTEX_SHADER, vertShaderSrc);\n        this.#fragShader = GLUtil.createShader(this.#gl, this.#gl.FRAGMENT_SHADER, fragShaderSrc);\n        this.#program = GLUtil.createProgram(this.#gl, this.#vertShader, this.#fragShader);\n    \n        this.#gl.useProgram(this.#program);\n    }\n\n    createVAO() {\n        this.#vaoLoc = GLUtil.createVAO(this.#gl, ...this.#attributes);\n    }\n\n    #updateModelMatrix(){\n        mat4.identity(this.#modelMatrix);\n\n        mat4.translate(this.#modelMatrix, this.#modelMatrix, this.position);\n        mat4.rotateX(this.#modelMatrix, this.#modelMatrix, this.rotation[0]);\n        mat4.rotateY(this.#modelMatrix, this.#modelMatrix, this.rotation[1]);\n        mat4.rotateZ(this.#modelMatrix, this.#modelMatrix, this.rotation[2]);\n        mat4.scale(this.#modelMatrix, this.#modelMatrix, this.scale);\n    }\n\n    createTex(texData, textureName){\n        this.#uTexture = this.#gl.getUniformLocation(this.#program, textureName);\n        this.#texture = this.#gl.createTexture();\n        this.#gl.activeTexture(this.#gl[`TEXTURE${Mesh.#textureI}`]);\n        this.#gl.bindTexture(this.#gl.TEXTURE_2D, this.#texture);\n\n        this.#gl.texParameteri(this.#gl.TEXTURE_2D, this.#gl.TEXTURE_WRAP_S, this.#gl.CLAMP_TO_EDGE);\n        this.#gl.texParameteri(this.#gl.TEXTURE_2D, this.#gl.TEXTURE_WRAP_T, this.#gl.CLAMP_TO_EDGE);\n        this.#gl.texParameteri(this.#gl.TEXTURE_2D, this.#gl.TEXTURE_MIN_FILTER, this.#gl.NEAREST);\n        this.#gl.texParameteri(this.#gl.TEXTURE_2D, this.#gl.TEXTURE_MAG_FILTER, this.#gl.NEAREST);\n\n        this.#gl.texImage2D(this.#gl.TEXTURE_2D, 0, this.#gl.RGBA32F, this.#gl.RGBA, this.#gl.FLOAT, texData);\n\n        this.#gl.useProgram(this.#program);\n        this.#gl.uniform1i(this.#uTexture, Mesh.#textureI);\n\n        Mesh.#textureI++;\n    }\n\n    setUniformValue(name, value, type){\n        const uniformLoc = this.#gl.getUniformLocation(this.#program, name);\n        \n        if(uniformLoc === -1)\n            throw new Error(\"This uniform doesn't exist in the shader code.\");\n\n        this.#gl.useProgram(this.#program);\n        this.#gl[\"uniform\"+type](uniformLoc, value);\n    }\n\n    draw(cam){\n        this.#gl.frontFace(this.#gl.CCW);\n\n        this.#gl.enable(this.#gl.CULL_FACE);\n        this.#gl.cullFace(this.#gl.BACK);\n\n        this.#updateModelMatrix();\n\n        this.#gl.bindVertexArray(this.#vaoLoc);\n\n        const mvp = (this.#useModelMatrix)? this.#modelMatrix: mat4.create();\n        //console.log(mvp);\n        if(cam){\n            const viewProj = cam.viewProjection;\n            mat4.multiply(mvp, viewProj, mvp);\n        }\n\n        this.#gl.useProgram(this.#program);\n\n        const mvpLoc = this.#gl.getUniformLocation(this.#program, \"mvp\");\n\n        if(mvp !== -1){ \n            this.#gl.uniformMatrix4fv(mvpLoc, false, mvp);\n        }\n\n        this.#gl.drawArrays(this.#primitive, 0, this.#count);\n\n        this.#gl.disable(this.#gl.CULL_FACE);\n    }\n\n}","import Mesh from \"../webgl/mesh\";\r\nimport imgVert from \"../shaders/imageVert\";\r\nimport imgFrag from \"../shaders/imageFrag\";\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\n\r\nexport default class ImageGL{\r\n    #mesh;\r\n\r\n    #width;\r\n    #height;\r\n\r\n    set scaleX(x){\r\n        if(x<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[0] = x;\r\n    }\r\n\r\n    set scaleY(y){\r\n        if(y<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[1] = y; \r\n    }\r\n\r\n    set positionX(x){\r\n        this.#mesh.position[0] = x;\r\n    }\r\n\r\n    set positionY(y){\r\n        this.#mesh.position[1] = y;    \r\n    }\r\n\r\n    set depth(z){\r\n        this.#mesh.position[2] = z\r\n    }\r\n\r\n    set rotation(theta){\r\n        this.#mesh.rotation[2] = theta    \r\n    }\r\n\r\n    set scale(vec){\r\n        if(!(vec instanceof Array) || vec.length !== 2)\r\n            throw new Error(\"scale need to be a vector with two positions.\");\r\n\r\n        this.#mesh.scale = vec3.fromValues(vec[0], vec[1], 1)\r\n    }\r\n\r\n    set opacity(alpha){\r\n        this.#mesh.setUniformValue(\"alpha\", alpha, \"1f\");\r\n    }\r\n\r\n    get positionX(){\r\n        return this.#mesh.position[0];\r\n    }\r\n    \r\n    get positionY(){\r\n        return this.#mesh.position[1];\r\n    }\r\n\r\n    async init(gl, src){\r\n        this.#mesh = new Mesh(gl, imgVert, imgFrag, gl.TRIANGLES);\r\n\r\n        const size = await this.#loadTex(src);\r\n\r\n        const data = this.#createRect(...size);\r\n\r\n        this.#mesh.addAttribute(\"position\", data.coords);\r\n        this.#mesh.addAttribute(\"texCoord\", data.texCoords, 2);\r\n        this.#mesh.createVAO();\r\n\r\n        this.opacity = 1.0;\r\n    }\r\n\r\n    async loadImage(url){\r\n        return new  Promise(resolve => {\r\n            const image = new Image();\r\n            image.addEventListener('load', () => {\r\n                resolve(image);\r\n            });\r\n            image.src = url; \r\n        });\r\n    }\r\n\r\n    async #loadTex(imgSrc){\r\n        const img = await this.loadImage(imgSrc);\r\n        await img.decode();\r\n        const imageBitmap = await createImageBitmap(img);\r\n\r\n        this.#mesh.createTex(img, \"uTexture\");\r\n\r\n        return [imageBitmap.width, imageBitmap.height];\r\n    }\r\n\r\n    #createRect(width, height){\r\n        const proportion = width/height;\r\n\r\n        let newWidth = 1.0;\r\n        let newHeight = 1.0;\r\n\r\n        (proportion<1)? newWidth*=proportion: newHeight/=proportion;\r\n\r\n        this.#width = newWidth;\r\n        this.#height = newHeight;\r\n\r\n        const v1 = [-newWidth, -newHeight, 0.0, 1.0];\r\n        const v2 = [newWidth, -newHeight, 0.0, 1.0];\r\n        const v3 = [newWidth, newHeight, 0.0, 1.0];\r\n        const v4 = [-newWidth, newHeight, 0.0, 1.0];\r\n\r\n        const coords = [\r\n            ...v1, ...v2, ...v3,\r\n            ...v1, ...v3, ...v4\r\n        ]\r\n\r\n        const texCoords = [\r\n            0, 1, 1, 1, 1, 0,\r\n            0, 1, 1, 0, 0, 0\r\n        ]\r\n\r\n        return {\r\n            coords,\r\n            texCoords\r\n        }\r\n    }\r\n\r\n    pointCollision(x, y, camera){\r\n        const point = [x, y, 0, 1];\r\n\r\n        const mvp = mat4.create();\r\n        mat4.copy(mvp, this.#mesh.modelMatrix);\r\n\r\n        if(camera){\r\n            const viewProj = camera.viewProjection;\r\n            mat4.multiply(mvp, viewProj, mvp);\r\n        }\r\n\r\n        const inverse = mat4.create();\r\n\r\n        mat4.invert(inverse, mvp);\r\n\r\n        const pointT = multiplyMatWithVec(inverse, point);\r\n\r\n        return (Math.abs(pointT[0])<this.#width && Math.abs(pointT[1])<this.#height);\r\n    }\r\n\r\n    draw(camera){\r\n        if(this.#mesh) this.#mesh.draw(camera);\r\n    }\r\n}\r\n\r\nfunction multiplyMatWithVec(mat, vec){\r\n    const out = new Array(vec.length).fill(0);\r\n\r\n    if(Math.round(vec.length**2) !== mat.length)\r\n        return;\r\n\r\n    for(let i = 0; i<vec.length; i++)\r\n        for(let j = 0; j<mat.length; j+=4)\r\n            out[i]+=mat[j+i]*vec[j/4];\r\n\r\n    return out;\r\n}","export default `#version 300 es\n    precision highp float;\n\n    uniform mat4 mvp;\n\n    in vec4 position;\n    in vec2 texCoord;\n\n    out vec2 fTexCoord;\n\n    void main() {\n        gl_Position  = mvp * position;\n        fTexCoord = texCoord;\n    }\n`","export default `#version 300 es\n    precision highp float;\n    \n    in vec2 fTexCoord;\n\n    uniform sampler2D uTexture;\n    uniform float alpha;\n\n    out vec4 color;\n\n\n\n    void main() {\n        color = texture(uTexture, fTexCoord);\n\n        if(color.a < 0.5) discard;\n\n        color *= alpha;\n    }\n`","import { mat4, vec3 } from \"gl-matrix\";\n\nexport default class Camera{\n    #view_matrix = mat4.create();\n    #proj_matrix = mat4.create();\n    #viewProjMatrix = mat4.create();\n\n    camPosition = [0,0,1];\n    lookDirection = [0,0,0];\n    upDirection = [0,1,0];\n\n    left = -4.0;\n    right = 4.0;\n    bottom = -4.0;\n    top = 4.0;\n    near = 1.0;\n    far = 9.0;\n\n    fovy = Math.PI/1.3;\n    aspect;\n\n    constructor(canvas){\n        this.aspect = canvas.width / canvas.height;\n    }\n\n    #typeOfProjection = \"perspective\";\n\n    set projectionType(type){\n        if(type !== \"orthogonal\" && type !== \"perspective\") \n            throw new Error(\"Invalid type of projection.\");\n\n        this.typeOfProjection = type;\n    }\n\n    get viewMatrix(){\n        this.#updateViewMatrix();\n        return this.#view_matrix;\n    }\n\n    get projMatrix(){\n        this.#updateProjMatrix();\n        return this.#proj_matrix;\n    }\n\n    #updateViewMatrix(){\n        mat4.identity(this.#view_matrix);\n        mat4.lookAt(this.#view_matrix, this.camPosition, this.lookDirection, this.upDirection);\n    }\n\n    #updateProjMatrix(){\n        mat4.identity(this.#proj_matrix);\n        if(this.typeOfProjection == \"perspective\")\n            mat4.perspective(this.#proj_matrix, this.fovy, this.aspect, this.near, this.far);\n        else\n            mat4.ortho(this.#proj_matrix, this.left, this.right, this.bottom, this.top, this.left, this.right);\n    }\n\n    get viewProjection(){\n        this.#updateViewMatrix();\n        this.#updateProjMatrix();\n        mat4.identity(this.#viewProjMatrix);\n        mat4.multiply(this.#viewProjMatrix, this.#proj_matrix, this.#view_matrix);\n\n        return this.#viewProjMatrix;\n    }\n}","import ImageGL from \"./view/image\";\r\nimport Camera from \"./webgl/camera\";\r\n\r\nconst canvas = document.querySelector(\"#game-screen\");\r\n\r\nlet screen = 0;\r\n\r\nconst gl = canvas.getContext(\"webgl2\");\r\n\r\ngl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\ngl.clearColor(0.0, 0.0, 0.0, 1.0);\r\ngl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n\r\nasync function drawImage(gl){\r\n    //initialize\r\n    const background = new ImageGL();\r\n    await background.init(gl, \"./assets/menu/fundo.jpg\");\r\n\r\n    const logoWar = new ImageGL();\r\n    await logoWar.init(gl, \"./assets/menu/logo_war.png\");\r\n\r\n    const playButton = new ImageGL();\r\n    await playButton.init(gl, \"./assets/menu/play_button.png\");\r\n\r\n    const settingsButton = new ImageGL();\r\n    await settingsButton.init(gl, \"./assets/menu/settings_button.png\");\r\n    \r\n    const maxButton = new ImageGL();\r\n    await maxButton.init(gl, \"./assets/menu/max_button.png\");\r\n\r\n    //scales\r\n    background.scale = [4, 7.3]\r\n    logoWar.scale = [1.35, 2] \r\n    playButton.scale = [0.65, 1.1]\r\n    settingsButton.scale = [0.15, 0.27]  \r\n    maxButton.scale = [0.15, 0.27]  \r\n\r\n    //position\r\n    logoWar.positionY = 0.25\r\n    \r\n    playButton.positionY = -1.9\r\n    \r\n    settingsButton.positionX = 3.7\r\n    settingsButton.positionY = 2.8\r\n\r\n    maxButton.positionX = 3.7\r\n    maxButton.positionY = 3.5\r\n\r\n    const camera = new Camera(gl.canvas);\r\n    //camera.typeOfProjection = \"perspective\";\r\n    \r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LESS);\r\n\r\n    //draw\r\n    logoWar.draw(camera)\r\n    playButton.draw(camera)\r\n    settingsButton.draw(camera)\r\n    maxButton.draw(camera)\r\n    background.draw(camera)\r\n\r\n    gl.disable(gl.DEPTH_TEST);\r\n\r\n    canvas.addEventListener(\"click\", e=>{\r\n        // e.clientX e e.clientY são a posição do mouse\r\n\r\n        const point = mapClickInCanvas(e.clientX, e.clientY, canvas);\r\n\r\n        if(playButton.pointCollision(...point, camera)){\r\n            screen = 1;\r\n            drawNewScreen(gl);\r\n        }\r\n\r\n        if(maxButton.pointCollision(...point, camera)){\r\n            alert(\"FullScreen\")\r\n        }\r\n        \r\n\r\n    })\r\n}\r\n\r\nasync function drawNewScreen(gl){\r\n    const mapa = new ImageGL();\r\n    await mapa.init(gl, \"./assets/mapa.jpg\");\r\n\r\n    const settingsButton = new ImageGL();\r\n    await settingsButton.init(gl, \"./assets/menu/settings_button.png\");\r\n\r\n    const maxButton = new ImageGL();\r\n    await maxButton.init(gl, \"./assets/menu/max_button.png\");\r\n\r\n    const card_button = new ImageGL();\r\n    await card_button.init(gl, \"./assets/game/card_button.png\");\r\n\r\n    const objective_button = new ImageGL();\r\n    await objective_button.init(gl, \"./assets/game/objective_button.png\");\r\n\r\n    const current_player = new ImageGL();\r\n    await current_player.init(gl, \"./assets/game/current_player.png\");\r\n\r\n    const show_players = new ImageGL();\r\n    await show_players.init(gl, \"./assets/game/show_players.png\");\r\n\r\n    const show_cards = new ShowCards();\r\n    await show_cards.init();\r\n\r\n    const fortify = new Fortify();\r\n    await fortify.init();\r\n    \r\n    settingsButton.scale = [0.15, 0.27] \r\n    maxButton.scale = [0.15, 0.27]  \r\n    card_button.scale = [0.5, 0.8]\r\n    objective_button.scale = [0.47, 0.8]\r\n    current_player.scale = [1.5, 2.5]\r\n    mapa.scale = [4, 4*1.85];\r\n    show_players.scale = [0.47, 0.8]\r\n\r\n    settingsButton.positionX = 3.7\r\n    settingsButton.positionY = 2.8\r\n    settingsButton.depth = 0.2\r\n\r\n    maxButton.positionX = 3.7\r\n    maxButton.positionY = 3.5\r\n    maxButton.depth = 0.2\r\n\r\n    card_button.positionX = 2.9\r\n    card_button.positionY = -3.2\r\n    card_button.depth = 0.2\r\n\r\n    objective_button.positionX = 3.6\r\n    objective_button.positionY = -3.2\r\n    objective_button.depth = 0.2\r\n\r\n    show_players.positionX = -3.6\r\n    show_players.positionY = -3.2\r\n    show_players.depth = 0.2\r\n\r\n    current_player.positionY = -3.375\r\n    current_player.depth = 0.2\r\n    \r\n    const camera = new Camera(canvas);\r\n    \r\n    let move = false;\r\n    \r\n    \r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LESS);\r\n\r\n    mapa.draw(camera);\r\n    settingsButton.draw(camera);\r\n    card_button.draw(camera)\r\n    objective_button.draw(camera)\r\n    current_player.draw(camera)\r\n    maxButton.draw(camera)\r\n    show_players.draw(camera)\r\n    \r\n    //final result\r\n    show_cards.draw(camera)\r\n    //fortify.draw(camera);\r\n    \r\n\r\n    gl.disable(gl.DEPTH_TEST);\r\n\r\n    let lastX = 0;\r\n    let lastY = 0;\r\n\r\n    canvas.addEventListener(\"mousedown\", e=>{\r\n        lastX = e.clientX;\r\n        lastY = e.clientY;\r\n\r\n        move = true;\r\n    })\r\n\r\n    canvas.addEventListener(\"mouseup\", e=>{\r\n        move = false;\r\n\r\n        console.log(lastX, lastY);\r\n    })\r\n\r\n    canvas.addEventListener(\"mousemove\", e=>{\r\n        if(move){\r\n            let distX = e.clientX - lastX;\r\n            let distY = e.clientY - lastY;\r\n\r\n            console.log(distX, distY);\r\n        }\r\n    })\r\n\r\n    canvas.addEventListener(\"click\", e=>{\r\n        // e.clientX e e.clientY são a posição do mouse\r\n\r\n        const point = mapClickInCanvas(e.clientX, e.clientY, canvas);\r\n\r\n        if(card_button.pointCollision(...point, camera)){\r\n            show_cards.moveAll(-3 ,3);\r\n            mapa.draw(camera);\r\n            show_cards.draw(camera);\r\n        }\r\n\r\n        if(show_cards.cancel_button.pointCollision(...point, camera)){\r\n            alert(\"cancel\");\r\n        }\r\n\r\n        if(show_cards.ok_button.pointCollision(...point, camera)){\r\n            alert(\"ok\");\r\n        }\r\n    \r\n    })\r\n}\r\n\r\n// use essa função para conseguir a posição do mouse no sistema de coordenadas do webgl\r\nfunction mapClickInCanvas(x, y, canvas){\r\n    const mappedOnCenter = [(x - canvas.offsetLeft) - canvas.width/2, (canvas.height/2) - (y - canvas.offsetTop)];\r\n    return [mappedOnCenter[0]*2/canvas.width, mappedOnCenter[1]*2/canvas.height];\r\n}\r\n\r\nclass ShowCards{\r\n    async init(){\r\n        this.show_cards = new ImageGL();\r\n        await this.show_cards.init(gl, \"./assets/game/show_cards.png\");\r\n        this.show_cards.scale = [1.7 , 3];\r\n        console.log(this.show_cards.positionX);\r\n        ShowCards.setInitialPosition(this.show_cards.positionX, (-3.355 - 3), 0.3, this.show_cards);\r\n        \r\n        this.cancel_button = new ImageGL();\r\n        await this.cancel_button.init(gl, \"./assets/game/cancel_button.png\");\r\n        this.cancel_button.scale = [0.27, 0.48];\r\n        ShowCards.setInitialPosition(-1.42, (-3.2 - 3), 0.4, this.cancel_button);\r\n\r\n        this.ok_button = new ImageGL();\r\n        await this.ok_button.init(gl, \"./assets/game/ok_button.png\");\r\n        this.ok_button.scale = [0.27, 0.48];\r\n        ShowCards.setInitialPosition(1.42, (-3.2 - 3), 0.4, this.ok_button);\r\n\r\n        this.cards_info = new ImageGL();\r\n        await this.cards_info.init(gl, \"assets/game/cards_info.png\");\r\n        this.cards_info.scale = [0.8, 1.35];\r\n        ShowCards.setInitialPosition((3.35 + 3), this.cards_info.positionY, 0.3, this.cards_info); \r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amountX, amountY){\r\n        this.show_cards.positionY += amountY;\r\n        this.cancel_button.positionY += amountY;\r\n        this.ok_button.positionY += amountY;\r\n        this.cards_info.positionX += amountX\r\n    }\r\n\r\n    draw(camera){\r\n        this.show_cards.draw(camera);\r\n        this.cancel_button.draw(camera);\r\n        this.ok_button.draw(camera);\r\n        this.cards_info.draw(camera);\r\n    }\r\n\r\n}\r\n\r\nclass Fortify{\r\n    async init(){\r\n        this.fortify = new ImageGL();\r\n        await this.fortify.init(gl, \"./assets/game/fortify.png\");\r\n        this.fortify.scale = [1.7 , 3];\r\n        Fortify.setInitialPosition(this.fortify.positionX, -3.25, 0.3, this.fortify);\r\n\r\n        this.cancel_button = new ImageGL();\r\n        await this.cancel_button.init(gl, \"./assets/game/cancel_button.png\");\r\n        this.cancel_button.scale = [0.27, 0.48];\r\n        ShowCards.setInitialPosition(1.42, -3.2, 0.4, this.cancel_button);\r\n\r\n        this.ok_button = new ImageGL();\r\n        await this.ok_button.init(gl, \"./assets/game/ok_button.png\");\r\n        this.ok_button.scale = [0.27, 0.48];\r\n        ShowCards.setInitialPosition(1.42, -3.2, 0.4, this.ok_button);\r\n    }\r\n\r\n    static setInitialPosition(x, y, depth, widget){\r\n        widget.positionX = x;\r\n        widget.positionY = y;\r\n        widget.depth = depth;\r\n    }\r\n\r\n    moveAll(amount){\r\n        this.fortify.positionY += amount;\r\n        this.cancel_button.positionY += amount;\r\n        this.ok_button.positionY += amount;\r\n    }\r\n\r\n    draw(camera){\r\n        this.fortify.draw(camera);\r\n        this.cancel_button.draw(camera);\r\n        this.ok_button.draw(camera);\r\n    }\r\n}\r\n\r\ndrawImage(gl);\r\n"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","create","out","identity","multiply","a","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","Math","random","PI","hypot","y","i","arguments","length","sqrt","GLUtil","static","gl","type","source_code","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","getShaderInfoLog","Error","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","data","buffer","ArrayBuffer","undefined","byteLength","console","warn","createBuffer","bindBuffer","bufferData","STATIC_DRAW","attributes","WebGL2RenderingContext","vao","createVertexArray","size","bindVertexArray","attribute","loc","enableVertexAttribArray","dimension","FLOAT","ARRAY_BUFFER","vertexAttribPointer","Mesh","position","rotation","scale","modelMatrix","this","useModelMatrix","use","Boolean","addAttribute","name","pointDim","forEach","val","count","f32Array","push","getAttribLocation","constructor","vertShaderSrc","fragShaderSrc","primitive","VERTEX_SHADER","FRAGMENT_SHADER","useProgram","createVAO","v","x","z","rad","s","sin","c","cos","createTex","texData","textureName","getUniformLocation","createTexture","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA32F","RGBA","uniform1i","setUniformValue","value","uniformLoc","draw","cam","frontFace","CCW","enable","CULL_FACE","cullFace","BACK","mvp","viewProjection","mvpLoc","uniformMatrix4fv","drawArrays","disable","ImageGL","scaleX","scaleY","positionX","positionY","depth","theta","vec","opacity","alpha","async","src","TRIANGLES","coords","texCoords","url","Promise","resolve","image","Image","addEventListener","imgSrc","img","loadImage","decode","imageBitmap","createImageBitmap","width","height","proportion","newWidth","newHeight","v1","v2","v3","v4","pointCollision","camera","point","inverse","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","pointT","mat","fill","round","j","multiplyMatWithVec","abs","Camera","camPosition","lookDirection","upDirection","left","right","bottom","top","near","far","fovy","aspect","canvas","projectionType","typeOfProjection","viewMatrix","projMatrix","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","nf","f","tan","Infinity","lr","bt","document","querySelector","screen","getContext","mapClickInCanvas","mappedOnCenter","offsetLeft","offsetTop","viewport","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","ShowCards","show_cards","init","log","setInitialPosition","cancel_button","ok_button","cards_info","widget","moveAll","amountX","amountY","Fortify","fortify","amount","background","logoWar","playButton","settingsButton","maxButton","DEPTH_TEST","depthFunc","LESS","e","clientX","clientY","mapa","card_button","objective_button","current_player","show_players","move","lastX","lastY","distX","distY","alert","drawNewScreen","drawImage"],"sourceRoot":""}