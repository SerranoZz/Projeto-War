{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://projeto-war/./node_modules/gl-matrix/esm/common.js","webpack://projeto-war/./node_modules/gl-matrix/esm/mat4.js","webpack://projeto-war/./node_modules/gl-matrix/esm/vec3.js","webpack://projeto-war/./src/webgl/gl-util.js","webpack://projeto-war/./src/webgl/mesh.js","webpack://projeto-war/./src/view/image.js","webpack://projeto-war/./src/shaders/imageVert.js","webpack://projeto-war/./src/shaders/imageFrag.js","webpack://projeto-war/./src/webgl/camera.js","webpack://projeto-war/./src/webgl/half-edge.js","webpack://projeto-war/./src/webgl/indexed-mesh.js","webpack://projeto-war/./src/webgl/light.js","webpack://projeto-war/./src/view/canvasImage.js","webpack://projeto-war/./src/main.js","webpack://projeto-war/./src/shaders/countryVert.js","webpack://projeto-war/./src/shaders/phongFrag.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","export default class GLUtil{\r\n    static createShader(gl, type, source_code) {\r\n        const shader = gl.createShader(type);\r\n        gl.shaderSource(shader, source_code);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            const info = gl.getShaderInfoLog(shader);\r\n            throw new Error(\"Shader compilation error: \"+info);\r\n        }\r\n    \r\n        return shader;\r\n    }\r\n    \r\n    static createProgram(gl, vertexShader, fragmentShader) {\r\n        const program = gl.createProgram();\r\n    \r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const info = gl.getProgramInfoLog(program);\r\n            throw new Error('Could not compile WebGL program:' + info);\r\n        }\r\n    \r\n        return program;\r\n    }\r\n    \r\n    static createBuffer(gl, type, data) {\r\n        if (data.length == 0)\r\n          return null;\r\n    \r\n        if (!(data && data.buffer instanceof ArrayBuffer && data.byteLength !== undefined)) {\r\n          console.warn('Data is not an instance of ArrayBuffer');\r\n          return null;\r\n        }\r\n    \r\n        const buffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(type, buffer);\r\n        gl.bufferData(type, data, gl.STATIC_DRAW);\r\n\r\n        return buffer;\r\n    }\r\n    \r\n\r\n      // refazer essa depois\r\n    static createVAO(gl, ...attributes) {\r\n      if(!(gl instanceof WebGL2RenderingContext)) return;\r\n\r\n        const vao = gl.createVertexArray();\r\n    \r\n        gl.bindVertexArray(vao);\r\n\r\n        let size;\r\n        let type;\r\n    \r\n        for(let attribute of attributes){\r\n          if (attribute.loc != null && attribute.loc != undefined) {\r\n            gl.enableVertexAttribArray(attribute.loc);\r\n            size = attribute.dimension;\r\n            type = gl.FLOAT;\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, attribute.buffer);\r\n            gl.vertexAttribPointer(attribute.loc, size, type, false, 0, 0);\r\n          }\r\n        }\r\n    \r\n        return vao;\r\n    }\r\n}","import { vec3, mat4 } from \"gl-matrix\";\r\nimport GLUtil from \"./gl-util\";\r\n\r\nexport default class Mesh{\r\n\r\n    _gl;\r\n\r\n    position = [0.0, 0.0, 0.0];\r\n    rotation = [0.0, 0.0, 0.0];\r\n    scale = [1.0, 1.0, 1.0];\r\n\r\n    static #textureI = 0;\r\n\r\n    #modelMatrix = mat4.create();\r\n\r\n    #attributes = [];\r\n\r\n    #vertShader = null;\r\n    #fragShader = null;\r\n\r\n    _program = null;\r\n\r\n    _primitive;\r\n\r\n    #count;\r\n\r\n    _vaoLoc;\r\n\r\n    #uTexture;\r\n    #texture;\r\n\r\n    _useModelMatrix = true;\r\n    \r\n    get modelMatrix(){\r\n        this._updateModelMatrix();\r\n        return this.#modelMatrix;\r\n    }\r\n\r\n    set useModelMatrix(use){\r\n        if(!(use instanceof Boolean))\r\n            throw new Error(\"useModelMatrix need to be a boolean value\");\r\n        \r\n        this._useModelMatrix = use;\r\n    }\r\n\r\n    addAttribute(name, info, pointDim = 4){\r\n        if(!(info instanceof Array))\r\n            throw new Error(\"The info parameter needs to be a Array.\");\r\n\r\n        info.forEach(val => {\r\n            if(typeof val !== \"number\") \r\n                throw new Error(\"The info array need to be numeric.\");\r\n        });\r\n\r\n        const count = info.length/pointDim;\r\n\r\n        if(!this.#count) this.#count = count;\r\n\r\n        else if(count !== this.#count) \r\n            throw new Error(\"The VBOs need to contain the same number of vertex.\");\r\n\r\n        const f32Array = new Float32Array(info);\r\n\r\n        this.#attributes.push({\r\n            loc: this._gl.getAttribLocation(this._program, name),\r\n            buffer: GLUtil.createBuffer(this._gl, this._gl.ARRAY_BUFFER,f32Array),\r\n            dimension: pointDim\r\n        })\r\n    }\r\n\r\n    constructor(gl, vertShaderSrc, fragShaderSrc, primitive){\r\n        this._primitive = primitive;\r\n        \r\n        this._gl = gl;\r\n        //restringir os tipos\r\n\r\n        this.createShader(vertShaderSrc, fragShaderSrc);\r\n    }\r\n\r\n    createShader(vertShaderSrc, fragShaderSrc) {\r\n        this.#vertShader = GLUtil.createShader(this._gl, this._gl.VERTEX_SHADER, vertShaderSrc);\r\n        this.#fragShader = GLUtil.createShader(this._gl, this._gl.FRAGMENT_SHADER, fragShaderSrc);\r\n        this._program = GLUtil.createProgram(this._gl, this.#vertShader, this.#fragShader);\r\n    \r\n        this._gl.useProgram(this._program);\r\n    }\r\n\r\n    createVAO() {\r\n        this._vaoLoc = GLUtil.createVAO(this._gl, ...this.#attributes);\r\n    }\r\n\r\n    _updateModelMatrix(){\r\n        mat4.identity(this.#modelMatrix);\r\n\r\n        mat4.translate(this.#modelMatrix, this.#modelMatrix, this.position);\r\n        mat4.rotateX(this.#modelMatrix, this.#modelMatrix, this.rotation[0]);\r\n        mat4.rotateY(this.#modelMatrix, this.#modelMatrix, this.rotation[1]);\r\n        mat4.rotateZ(this.#modelMatrix, this.#modelMatrix, this.rotation[2]);\r\n        mat4.scale(this.#modelMatrix, this.#modelMatrix, this.scale);\r\n    }\r\n\r\n    createTex(texData, textureName){\r\n        this.#uTexture = this._gl.getUniformLocation(this._program, textureName);\r\n        this.#texture = this._gl.createTexture();\r\n        this._gl.activeTexture(this._gl[`TEXTURE${Mesh.#textureI}`]);\r\n        this._gl.bindTexture(this._gl.TEXTURE_2D, this.#texture);\r\n\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.NEAREST);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.NEAREST);\r\n\r\n        this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA32F, this._gl.RGBA, this._gl.FLOAT, texData);\r\n\r\n        this._gl.useProgram(this._program);\r\n        this._gl.uniform1i(this.#uTexture, Mesh.#textureI);\r\n\r\n        Mesh.#textureI++;\r\n\r\n        return {tex: this.#texture, index: Mesh.#textureI - 1};\r\n    }\r\n\r\n    setUniformValue(name, value, type){\r\n        const uniformLoc = this._gl.getUniformLocation(this._program, name);\r\n        \r\n        if(uniformLoc === -1)\r\n            throw new Error(\"This uniform doesn't exist in the shader code.\");\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        if(type.startsWith(\"Matrix\"))\r\n            this._gl[\"uniform\"+type](uniformLoc, false, value);\r\n        else\r\n            this._gl[\"uniform\"+type](uniformLoc, value);\r\n    }\r\n\r\n    draw(cam){\r\n        this._gl.frontFace(this._gl.CCW);\r\n\r\n        this._gl.enable(this._gl.CULL_FACE);\r\n        this._gl.cullFace(this._gl.BACK);\r\n\r\n        this._updateModelMatrix();\r\n\r\n        this._gl.bindVertexArray(this._vaoLoc);\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        const modelLoc = this._gl.getUniformLocation(this._program, \"model\");\r\n        const mvLoc = this._gl.getUniformLocation(this._program, \"modelView\");\r\n        const mvpLoc = this._gl.getUniformLocation(this._program, \"mvp\");\r\n\r\n        if(modelLoc){\r\n            this._gl.uniformMatrix4fv(modelLoc, false, this.#modelMatrix);\r\n        }else if(mvLoc){\r\n            const mv = mat4.create();\r\n\r\n            if(cam)\r\n                mat4.multiply(mv, cam.viewMatrix, this.#modelMatrix);\r\n            else\r\n                mat4.copy(mv, this.#modelMatrix);\r\n            \r\n            this._gl.uniformMatrix4fv(mvLoc, false, mv);\r\n\r\n        }else if(mvpLoc){\r\n            const mvp = mat4.create();\r\n\r\n            if(cam)\r\n                mat4.multiply(mvp, cam.viewProjection, this.#modelMatrix);\r\n            else\r\n                mat4.copy(mvp, this.#modelMatrix);\r\n                \r\n            this._gl.uniformMatrix4fv(mvpLoc, false, mvp);\r\n        }\r\n\r\n        this._gl.drawArrays(this._primitive, 0, this.#count);\r\n\r\n        this._gl.disable(this._gl.CULL_FACE);\r\n    }\r\n\r\n    static changeTex(gl, {tex, index}, texData){\r\n        gl.bindTexture(gl.TEXTURE_2D, tex);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, gl.RGBA, gl.FLOAT, texData);\r\n    }\r\n}\r\n","import Mesh from \"../webgl/mesh\";\r\nimport imgVert from \"../shaders/imageVert\";\r\nimport imgFrag from \"../shaders/imageFrag\";\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\n\r\nexport default class ImageGL{\r\n    #mesh;\r\n\r\n    #width;\r\n    #height;\r\n\r\n    set scaleX(x){\r\n        if(x<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[0] = x;\r\n    }\r\n\r\n    set scaleY(y){\r\n        if(y<=0)\r\n            throw new Error(\"the scale of a image need to be greater than 0\");\r\n    \r\n        this.#mesh.scale[1] = y; \r\n    }\r\n\r\n    set positionX(x){\r\n        this.#mesh.position[0] = x;\r\n    }\r\n\r\n    set positionY(y){\r\n        this.#mesh.position[1] = y;    \r\n    }\r\n\r\n    set depth(z){\r\n        this.#mesh.position[2] = z;\r\n    }\r\n\r\n    set rotation(theta){\r\n        this.#mesh.rotation[2] = theta    \r\n    }\r\n\r\n    set scale(vec){\r\n        if(!(vec instanceof Array) || vec.length !== 2)\r\n            throw new Error(\"scale need to be a vector with two positions.\");\r\n\r\n        this.#mesh.scale = vec3.fromValues(vec[0], vec[1], 1)\r\n    }\r\n\r\n    set opacity(alpha){\r\n        this.#mesh.setUniformValue(\"alpha\", alpha, \"1f\");\r\n    }\r\n\r\n    async init(gl, src){\r\n        this.#mesh = new Mesh(gl, imgVert, imgFrag, gl.TRIANGLES);\r\n\r\n        const size = await this.#loadTex(src);\r\n\r\n        const data = this.#createRect(...size);\r\n\r\n        this.#mesh.addAttribute(\"position\", data.coords);\r\n        this.#mesh.addAttribute(\"texCoord\", data.texCoords, 2);\r\n        this.#mesh.createVAO();\r\n\r\n        this.opacity = 1.0;\r\n    }\r\n\r\n    static async loadImage(url){\r\n        return new  Promise(resolve => {\r\n            const image = new Image();\r\n            image.addEventListener('load', () => {\r\n                resolve(image);\r\n            });\r\n            image.src = url; \r\n        });\r\n    }\r\n\r\n    async #loadTex(imgSrc){\r\n        const img = await ImageGL.loadImage(imgSrc);\r\n        await img.decode();\r\n        const imageBitmap = await createImageBitmap(img);\r\n\r\n        this._tex = this.#mesh.createTex(img, \"uTexture\");\r\n\r\n        return [imageBitmap.width, imageBitmap.height];\r\n    }\r\n\r\n    #createRect(width, height){\r\n        const proportion = width/height;\r\n\r\n        let newWidth = 1.0;\r\n        let newHeight = 1.0;\r\n\r\n        (proportion<1)? newWidth*=proportion: newHeight/=proportion;\r\n\r\n        this.#width = newWidth;\r\n        this.#height = newHeight;\r\n\r\n        const v1 = [-newWidth, -newHeight, 0.0, 1.0];\r\n        const v2 = [newWidth, -newHeight, 0.0, 1.0];\r\n        const v3 = [newWidth, newHeight, 0.0, 1.0];\r\n        const v4 = [-newWidth, newHeight, 0.0, 1.0];\r\n\r\n        const coords = [\r\n            ...v1, ...v2, ...v3,\r\n            ...v1, ...v3, ...v4\r\n        ]\r\n\r\n        const texCoords = [\r\n            0, 1, 1, 1, 1, 0,\r\n            0, 1, 1, 0, 0, 0\r\n        ]\r\n\r\n        return {\r\n            coords,\r\n            texCoords\r\n        }\r\n    }\r\n\r\n    pointCollision(x, y, camera){\r\n        const point = [x, y, 0, 1];\r\n\r\n        const mvp = mat4.create();\r\n        mat4.copy(mvp, this.#mesh.modelMatrix);\r\n\r\n        if(camera){\r\n            const viewProj = camera.viewProjection;\r\n            mat4.multiply(mvp, viewProj, mvp);\r\n        }\r\n\r\n        const inverse = mat4.create();\r\n\r\n        mat4.invert(inverse, mvp);\r\n\r\n        const pointT = multiplyMatWithVec(inverse, point);\r\n\r\n        return (Math.abs(pointT[0])<this.#width && Math.abs(pointT[1])<this.#height);\r\n    }\r\n\r\n    draw(camera){\r\n        if(this.#mesh) this.#mesh.draw(camera);\r\n    }\r\n}\r\n\r\nfunction multiplyMatWithVec(mat, vec){\r\n    const out = new Array(vec.length).fill(0);\r\n\r\n    if(Math.round(vec.length**2) !== mat.length)\r\n        return;\r\n\r\n    for(let i = 0; i<vec.length; i++)\r\n        for(let j = 0; j<mat.length; j+=4)\r\n            out[i]+=mat[j+i]*vec[j/4];\r\n\r\n    return out;\r\n}","export default `#version 300 es\r\n    precision highp float;\r\n\r\n    uniform mat4 mvp;\r\n\r\n    in vec4 position;\r\n    in vec2 texCoord;\r\n\r\n    out vec2 fTexCoord;\r\n\r\n    void main() {\r\n        gl_Position  = mvp * position;\r\n        fTexCoord = texCoord;\r\n    }\r\n`","export default `#version 300 es\r\n    precision highp float;\r\n    \r\n    in vec2 fTexCoord;\r\n\r\n    uniform sampler2D uTexture;\r\n    uniform float alpha;\r\n\r\n    out vec4 color;\r\n\r\n    void main() {\r\n        color = texture(uTexture, fTexCoord);\r\n\r\n        if(color.a < 0.2) discard;\r\n\r\n        color *= alpha;\r\n    }\r\n`","import { mat4 } from \"gl-matrix\";\r\n\r\nexport default class Camera{\r\n    #view_matrix = mat4.create();\r\n    #proj_matrix = mat4.create();\r\n    #viewProjMatrix = mat4.create();\r\n\r\n    camPosition = [0,0,1];\r\n    lookDirection = [0,0,0];\r\n    upDirection = [0,1,0];\r\n\r\n    left = -4.0;\r\n    right = 4.0;\r\n    bottom = -4.0;\r\n    top = 4.0;\r\n    near = 1.0;\r\n    far = 9.0;\r\n\r\n    fovy = Math.PI/2;\r\n    aspect;\r\n\r\n    constructor(canvas){\r\n        this.aspect = canvas.width / canvas.height;\r\n    }\r\n\r\n    #typeOfProjection = \"perspective\";\r\n\r\n    set projectionType(type){\r\n        if(type !== \"orthogonal\" && type !== \"perspective\") \r\n            throw new Error(\"Invalid type of projection.\");\r\n\r\n        this.#typeOfProjection = type;\r\n    }\r\n\r\n    get viewMatrix(){\r\n        this.#updateViewMatrix();\r\n        return this.#view_matrix;\r\n    }\r\n\r\n    get projMatrix(){\r\n        this.#updateProjMatrix();\r\n        return this.#proj_matrix;\r\n    }\r\n\r\n    #updateViewMatrix(){\r\n        mat4.identity(this.#view_matrix);\r\n        mat4.lookAt(this.#view_matrix, this.camPosition, this.lookDirection, this.upDirection);\r\n    }\r\n\r\n    #updateProjMatrix(){\r\n        mat4.identity(this.#proj_matrix);\r\n        if(this.#typeOfProjection === \"perspective\")\r\n            mat4.perspective(this.#proj_matrix, this.fovy, this.aspect, this.near, this.far);\r\n        else\r\n            mat4.ortho(this.#proj_matrix, this.left*this.aspect, this.right*this.aspect, this.bottom, this.top, this.left, this.right);\r\n    }\r\n\r\n    get viewProjection(){\r\n        this.#updateViewMatrix();\r\n        this.#updateProjMatrix();\r\n        mat4.identity(this.#viewProjMatrix);\r\n        mat4.multiply(this.#viewProjMatrix, this.#proj_matrix, this.#view_matrix);\r\n\r\n        console.log(this.aspect, this.fovy, this.near, this.#typeOfProjection)\r\n\r\n        return this.#viewProjMatrix;\r\n    }\r\n}","class Vertex{\r\n    attributes = new Map();\r\n    id;\r\n    hEdge;\r\n\r\n    constructor(id){\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass HalfEdge{\r\n    opositte;\r\n    next;\r\n    vertex;\r\n\r\n    constructor(vertex){\r\n        this.vertex = vertex;\r\n    }\r\n}\r\n\r\nclass Face{\r\n    hEdge;\r\n\r\n    constructor(hEdge){\r\n        this.hEdge = hEdge;\r\n    }\r\n}\r\n\r\nexport default class HalfEdgeDS{\r\n    #hEdges = [];\r\n    #vertices = [];\r\n    #faces = [];\r\n\r\n    constructor(indexes){\r\n        for(let i = 0; i < indexes.length; i += 3){\r\n            const i1 = indexes[i];\r\n            const i2 = indexes[i+1];\r\n            const i3 = indexes[i+2];\r\n\r\n            if(!this.#vertices[i1]) this.#vertices[i1] = new Vertex(i1);\r\n            if(!this.#vertices[i2]) this.#vertices[i2] = new Vertex(i2);\r\n            if(!this.#vertices[i3]) this.#vertices[i3] = new Vertex(i3);\r\n\r\n            const h1 = new HalfEdge(this.#vertices[i1]);\r\n            const h2 = new HalfEdge(this.#vertices[i2]);\r\n            const h3 = new HalfEdge(this.#vertices[i3]);\r\n\r\n            h1.next = h2;\r\n            h2.next = h3;\r\n            h3.next = h1;\r\n\r\n            const face = new Face(h1);\r\n\r\n            this.#hEdges[i] = h1;\r\n            this.#hEdges[i+1] = h2;\r\n            this.#hEdges[i+2] = h3;\r\n\r\n            this.#faces[Math.round(i/3)] = face;\r\n        }\r\n\r\n        this.setOposittes();\r\n    }\r\n\r\n    setOposittes(){\r\n        for(let hEdge of this.#hEdges){\r\n            const v0 = hEdge.vertex;\r\n            const v1 = hEdge.next.vertex;\r\n\r\n            if(!v0.hEdge) v0.hEdge = hEdge;\r\n\r\n            if(hEdge.opositte) continue;\r\n\r\n            for(let hEdge1 of this.#hEdges){\r\n                if(hEdge1.vertex === v1 && hEdge1.next.vertex === v0){\r\n                    hEdge.opositte = hEdge1;\r\n                    hEdge1.opositte = hEdge;\r\n                    break;    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setAttribute(values, vertlen, name){\r\n        if(values.length/vertlen!==this.#vertices.length)\r\n            throw new Error(`Mesh haves ${this.#vertices.length} vertices, but only ${values.length/vertlen} were given.`)\r\n\r\n        for(let i = 0; i<values.length; i+=vertlen){\r\n            const attrib = values.slice(i, i+vertlen);\r\n            this.#vertices[Math.round(i/vertlen)].attributes.set(name, attrib);\r\n        }\r\n    }\r\n\r\n    createVBOs(){\r\n        const attributes = new Map();\r\n        const indexes = [];\r\n\r\n        for(let vertex of this.#vertices){\r\n            for(let name of vertex.attributes.keys()){\r\n\r\n                if(!attributes.get(name)) attributes.set(name, []);\r\n\r\n                attributes.get(name).push(...vertex.attributes.get(name));\r\n            }\r\n        }\r\n\r\n        for(let hEdge of this.#hEdges){\r\n            indexes.push(hEdge.vertex.id);\r\n        }\r\n\r\n        return {attributes, indexes, count: this.#vertices.length};\r\n    }\r\n}\r\n","import ImageGL from \"../view/image\";\r\nimport GLUtil from \"./gl-util\";\r\nimport HalfEdgeDS from \"./half-edge\";\r\nimport Mesh from \"./mesh\";\r\nimport { mat4 } from \"gl-matrix\";\r\n\r\nexport default class IndexedMeshT extends Mesh{\r\n    #hEdge;\r\n    #indicesLoc = -1;\r\n\r\n    constructor(gl, vertShaderSrc, fragShaderSrc, indexes){\r\n        super(gl, vertShaderSrc, fragShaderSrc, gl.TRIANGLES);\r\n\r\n        this.#hEdge = new HalfEdgeDS(indexes);\r\n    }\r\n\r\n    addAttribute(name, info, pointDim = 4){\r\n        if(!(info instanceof Array))\r\n            throw new Error(\"The info parameter needs to be a Array.\");\r\n\r\n        info.forEach(val => {\r\n            if(typeof val !== \"number\") \r\n                throw new Error(\"The info array need to be numeric.\");\r\n        });\r\n\r\n        if(this._gl.getAttribLocation(this._program, name)===-1)\r\n            throw new Error(`the attribute ${name} doesn't exists in the shader code.`);\r\n\r\n\r\n        this.#hEdge.setAttribute(info, pointDim, name);        \r\n    }\r\n\r\n    createVAO() {\r\n        const vbos = this.#hEdge.createVBOs();\r\n\r\n        const attributes = Array.from(vbos.attributes.entries()).map(entry => {\r\n\r\n            return {\r\n                loc: this._gl.getAttribLocation(this._program, entry[0]),\r\n                buffer: GLUtil.createBuffer(this._gl, this._gl.ARRAY_BUFFER, new Float32Array(entry[1])),\r\n                dimension: Math.round(entry[1].length/vbos.count)\r\n            }\r\n        })\r\n\r\n        this._vaoLoc = GLUtil.createVAO(this._gl, ...attributes);\r\n        this.#indicesLoc = GLUtil.createBuffer(this._gl, this._gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(vbos.indexes));\r\n\r\n        this._count = vbos.indexes.length;\r\n    }\r\n\r\n    draw(cam){\r\n        if(!(this._gl instanceof WebGL2RenderingContext))return\r\n\r\n        this._gl.frontFace(this._gl.CCW);\r\n\r\n        this._gl.enable(this._gl.CULL_FACE);\r\n        this._gl.cullFace(this._gl.BACK);\r\n\r\n        this._gl.bindVertexArray(this._vaoLoc);\r\n\r\n        this._gl.useProgram(this._program);\r\n\r\n        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this.#indicesLoc);\r\n\r\n        const modelLoc = this._gl.getUniformLocation(this._program, \"model\");\r\n        const mvLoc = this._gl.getUniformLocation(this._program, \"modelView\");\r\n        const mvpLoc = this._gl.getUniformLocation(this._program, \"mvp\");\r\n\r\n        if(modelLoc){\r\n            this._gl.uniformMatrix4fv(modelLoc, false, this.modelMatrix);\r\n        }else if(mvLoc){\r\n            const mv = mat4.create();\r\n            mat4.multiply(mv, cam.viewMatrix, this.modelMatrix);\r\n            this._gl.uniformMatrix4fv(modelLoc, false, mv);\r\n        }else if(mvpLoc){\r\n            const mvp = mat4.create();\r\n            mat4.multiply(mvp, cam.viewProjection, this.modelMatrix);\r\n            this._gl.uniformMatrix4fv(modelLoc, false, mvp);\r\n        }\r\n        \r\n        this._gl.drawElements(this._primitive, this._count, this._gl.UNSIGNED_INT, 0);\r\n\r\n        this._gl.disable(this._gl.CULL_FACE);\r\n    }\r\n\r\n    static async loadMeshFromObj(path, gl, vertShader, fragShader, texturePath){\r\n        const obj = await fetch(path);\r\n        const text = await obj.text();\r\n\r\n        const border = new Map();\r\n    \r\n        const lines = text.split(\"\\n\");\r\n\r\n        const vertices = [];\r\n        const normals = [];\r\n        const texCoords = [];\r\n        const indexes = [];\r\n\r\n        let borderIndex = 0;\r\n\r\n        for(let line of lines){\r\n            if(line.startsWith(\"vn\")){\r\n                const values = line.replace(\"vn \", \"\").split(\" \").map(Number.parseFloat);\r\n                normals.push(...values, 1);\r\n\r\n                const d = Math.sqrt(dotProduct(values, values));\r\n                console.log(d);\r\n\r\n                if(dotProduct(values, [0, 0, 1])/d<0.5){\r\n                    const key = values.join(\",\");\r\n                    console.log(!border.get(key));\r\n                    if(!border.get(key)) border.set(key, borderIndex);\r\n                }\r\n\r\n                borderIndex++;\r\n            }else if(line.startsWith(\"vt\")){\r\n                const values = line.replace(\"vt \", \"\").split(\" \").map(Number.parseFloat);\r\n                texCoords.push(...values);\r\n            }else if(line.startsWith(\"v\")){\r\n                const values = line.replace(\"v \", \"\").split(\" \").map(Number.parseFloat);\r\n                vertices.push(...values, 1);\r\n            }else if(line.startsWith(\"f\")){\r\n                const values = line.replace(\"f \", \"\").split(\" \").map(val => {\r\n                    const init = val.indexOf(\"/\");\r\n                    const vIndex = val.slice(0, init);\r\n                    return Number.parseInt(vIndex)-1;\r\n                });\r\n                indexes.push(...values);\r\n            }\r\n\r\n        }\r\n\r\n        console.log(border.values());\r\n\r\n        const mesh = new IndexedMeshT(gl, vertShader, fragShader, indexes);\r\n        mesh.addAttribute(\"position\", vertices);\r\n        mesh.addAttribute(\"normal\", normals);\r\n\r\n        if(texCoords.length!==0){\r\n            if(!texturePath)\r\n                throw new Error(\"This mesh need to a texture path\");\r\n\r\n            mesh.addAttribute(\"texCoord\", texCoords, 3);\r\n\r\n            const image = await ImageGL.loadImage(texturePath);\r\n\r\n            mesh.createTex(image, \"uTexture\");\r\n        }\r\n\r\n        return mesh;\r\n    }\r\n}\r\n\r\nconst dotProduct = (v1, v2) =>{\r\n    return v1.reduce((ac, curr, i)=>ac+=curr*v2[i], 0);\r\n}","export default class Light{\r\n    ambColor = [0.0, 0.0, 0.0];\r\n    ambK = 3.0;\r\n\r\n    difColor = [0.3, 0.3, 0.3];\r\n    difK = 4.0;\r\n\r\n    espColor = [1.0, 1.0, 1.0];\r\n    espK = 3.0;\r\n    espExp = 20.0;\r\n\r\n    pos;\r\n\r\n    constructor(pos){\r\n        this.pos = pos;\r\n    }\r\n\r\n    createUniforms(mesh){\r\n        mesh.setUniformValue(\"amb_c\", this.ambColor, \"3fv\");\r\n        mesh.setUniformValue(\"amb_k\", this.ambK, \"1f\");\r\n        mesh.setUniformValue(\"dif_c\", this.difColor, \"3fv\");\r\n        mesh.setUniformValue(\"dif_k\", this.difK, \"1f\");\r\n        mesh.setUniformValue(\"esp_c\", this.espColor, \"3fv\");\r\n        mesh.setUniformValue(\"esp_k\", this.espK, \"1f\");\r\n        mesh.setUniformValue(\"esp_p\", this.espExp, \"1f\");\r\n    }\r\n\r\n}","import Mesh from \"../webgl/mesh\";\r\nimport ImageGL from \"./image\";\r\n\r\nexport default class CanvasImage extends ImageGL{\r\n    #canvas;\r\n\r\n    async init(gl, canvasDimension = 1000){\r\n        const canvas = document.createElement(\"canvas\");\r\n        const image = canvas.toDataURL(\"image/png\");\r\n\r\n        [canvas.width, canvas.height] = [canvasDimension, canvasDimension];\r\n\r\n        await super.init(gl, image);\r\n        this.#canvas = canvas;\r\n    }\r\n\r\n    async update(drawCanvas = ()=>{}, gl){\r\n        const ctx = this.#canvas.getContext(\"2d\");\r\n\r\n        drawCanvas(ctx);\r\n\r\n        const image = this.#canvas.toDataURL(\"image/png\");\r\n        const imageElement = await ImageGL.loadImage(image);\r\n    \r\n        Mesh.changeTex(gl, this._tex, imageElement);\r\n    }\r\n\r\n}","import ImageGL from \"./view/image\";\r\nimport Camera from \"./webgl/camera\";\r\nimport IndexedMeshT from \"./webgl/indexed-mesh\";\r\nimport countryVert from \"./shaders/countryVert\";\r\nimport phongFrag from \"./shaders/phongFrag\";\r\nimport Light from \"./webgl/light\";\r\nimport CanvasImage from \"./view/canvasImage\";\r\nimport texPhongVert from \"./shaders/tex-phong-vert\";\r\nimport texPhongFrag from \"./shaders/tex-phong-frag\";\r\n\r\nconst canvas = document.querySelector(\"#game-screen\");\r\n\r\nlet screen = 0;\r\n\r\nconst gl = canvas.getContext(\"webgl2\");\r\n\r\ngl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\ngl.clearColor(0.0, 0.0, 0.0, 1.0);\r\ngl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n\r\nasync function drawImage(gl){\r\n    //initialize\r\n    const background = new ImageGL();\r\n    await background.init(gl, \"./assets/menu/fundo.jpg\");\r\n\r\n    const logo_war = new ImageGL();\r\n    await logo_war.init(gl, \"./assets/menu/logo_war.png\");\r\n\r\n    const play_button = new ImageGL();\r\n    await play_button.init(gl, \"./assets/menu/play_button.png\");\r\n\r\n    const settings_button = new ImageGL();\r\n    await settings_button.init(gl, \"./assets/buttons/Group_17settings_button.png\");\r\n    \r\n    const max_button = new ImageGL();\r\n    await max_button.init(gl, \"./assets/menu/max_button.png\");\r\n\r\n    //scales\r\n    background.scaleY = 1.85\r\n    logo_war.scale = [0.35, 0.56] \r\n    play_button.scale = [0.15, 0.26]\r\n    settings_button.scale = [0.05, 0.08]  \r\n    max_button.scale = [0.05, 0.08]  \r\n\r\n    //position\r\n    logo_war.positionY = 0.25\r\n    \r\n    play_button.positionY = -0.55\r\n    \r\n    settings_button.positionX = 0.9\r\n    settings_button.positionY = 0.8\r\n\r\n    max_button.positionX = 0.9\r\n    max_button.positionY = 0.57\r\n    \r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LESS);\r\n\r\n    //draw\r\n    logo_war.draw()\r\n    play_button.draw()\r\n    settings_button.draw()\r\n    max_button.draw()\r\n    background.draw()\r\n\r\n    gl.disable(gl.DEPTH_TEST);\r\n\r\n    canvas.addEventListener(\"click\", e=>{\r\n        // e.clientX e e.clientY são a posição do mouse\r\n\r\n        const point = mapClickInCanvas(e.clientX, e.clientY, canvas);\r\n\r\n        if(play_button.pointCollision(...point)){\r\n            screen = 1;\r\n            drawNewScreen(gl);\r\n        }\r\n\r\n    })\r\n}\r\n\r\nasync function drawNewScreen(gl){\r\n    const mapa = new ImageGL();\r\n    await mapa.init(gl, \"./assets/mapa.jpg\");\r\n\r\n    mapa.scale = [2.7, 2.7];\r\n\r\n    const brasil = await IndexedMeshT.loadMeshFromObj(\r\n        \"./assets/meshes/brasil-rotacionado.obj\", \r\n        gl, countryVert, phongFrag\r\n    );\r\n    brasil.createVAO();\r\n    brasil.scale = [1.2, 1.2, 1];\r\n    brasil.position = [0*-1.2, 0*-0.9, 0.3];\r\n    brasil.rotation[1] = -0.2;\r\n\r\n    const camera = new Camera(canvas);\r\n    //camera.projectionType = \"orthogonal\";\r\n    camera.camPosition[2] = 1.7;\r\n    camera.camPosition[1] = -0.3;\r\n\r\n    const light = new Light([1.0, 0.0, 0.3]);\r\n\r\n    const cImage = new CanvasImage();\r\n    await cImage.init(gl);\r\n\r\n    await cImage.update(ctx =>{\r\n        if (!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n        ctx.fillStyle = \"white\";\r\n\r\n        ctx.ellipse(500, 500, 400, 500, 0, 0, Math.PI*2);\r\n\r\n        ctx.lineWidth = 100;\r\n\r\n        ctx.stroke();\r\n\r\n        ctx.font = \"600px Arial\";\r\n        ctx.fillText(\"1\", 320, 600);\r\n    }, gl);\r\n\r\n    cImage.scale = [0.1, 0.1];\r\n    cImage.positionY = 0.2;\r\n\r\n    //colocar a view e a projection\r\n    brasil.setUniformValue(\"view\", camera.viewMatrix, \"Matrix4fv\");\r\n    brasil.setUniformValue(\"projection\", camera.projMatrix, \"Matrix4fv\");\r\n    light.createUniforms(brasil);\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LESS);\r\n\r\n    mapa.draw(camera);\r\n    brasil.draw(camera);\r\n\r\n    gl.disable(gl.DEPTH_TEST);\r\n\r\n    cImage.draw(camera);\r\n\r\n}\r\n\r\n// use essa função para conseguir a posição do mouse no sistema de coordenadas do webgl\r\nfunction mapClickInCanvas(x, y, canvas){\r\n    const mappedOnCenter = [(x - canvas.offsetLeft) - canvas.width/2, (canvas.height/2) - (y - canvas.offsetTop)];\r\n    return [mappedOnCenter[0]*2/canvas.width, mappedOnCenter[1]*2/canvas.height];\r\n}\r\n\r\nasync function loadBtn(gl){\r\n    const button = await IndexedMeshT.loadMeshFromObj(\r\n        \"./assets/meshes/butau2.obj\", \r\n        gl, texPhongVert, texPhongFrag, \"./assets/buttons/Group_17settings_button.png\"\r\n    );\r\n    button.createVAO();\r\n\r\n    const camera = new Camera(canvas);\r\n    camera.camPosition[2] = 1.5;\r\n\r\n    const light = new Light([0.0, 0.0, 2.0]);\r\n\r\n    const image = new ImageGL();\r\n    await image.init(gl, \"./assets/buttons/Group_17settings_button.png\");\r\n\r\n    button.setUniformValue(\"view\", camera.viewMatrix, \"Matrix4fv\");\r\n    button.setUniformValue(\"projection\", camera.projMatrix, \"Matrix4fv\");\r\n    light.createUniforms(button);\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LESS);\r\n\r\n    button.draw(camera);\r\n    //image.draw(camera);\r\n\r\n    gl.disable(gl.DEPTH_TEST);\r\n}\r\n\r\ndrawImage(gl);\r\n//loadBtn(gl);","export default \r\n    `#version 300 es\r\n    precision highp float;\r\n\r\n    uniform mat4 model;\r\n    uniform mat4 view;\r\n    uniform mat4 projection;\r\n\r\n    in vec4 position;\r\n    in vec4 normal;\r\n\r\n    out vec4 fPos;\r\n    out vec4 fColor;\r\n    out vec4 fNormal;\r\n\r\n    void main() {\r\n        gl_Position = (projection*view*model) * position;\r\n        gl_Position /= gl_Position.w;\r\n        fColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n        fPos = position;\r\n        fNormal = normal;\r\n    }\r\n`","export default \r\n    `#version 300 es\r\n    precision highp float;\r\n    \r\n    uniform mat4 model;\r\n    uniform mat4 view;\r\n    uniform mat4 projection;\r\n\r\n    uniform vec3 amb_c;\r\n    uniform vec3 dif_c;\r\n    uniform vec3 esp_c;\r\n    uniform vec3 pos;\r\n    uniform float amb_k;\r\n    uniform float dif_k;\r\n    uniform float esp_k;\r\n    uniform float esp_p;\r\n\r\n    in vec4 fColor;\r\n    in vec4 normal;\r\n    in vec4 fPos;\r\n    in vec4 fNormal;\r\n\r\n    out vec4 color;\r\n\r\n    void main() {\r\n        mat4 modelView = view*model;\r\n\r\n        vec3 lightPos = (view * vec4(pos, 1.0)).xyz;\r\n        vec3 pos = -(modelView * fPos).xyz;\r\n\r\n        vec3 vNormal = normalize(inverse(transpose(modelView)) * fNormal).xyz;\r\n        vec3 vDistance = normalize(pos - lightPos);\r\n\r\n        vec3 normalPos = normalize(pos);\r\n\r\n        vec3 halfVector= normalize(vDistance + normalPos);\r\n\r\n        vec3 amb = amb_k * amb_c;\r\n\r\n        vec3 diff = max(dot(vNormal, vDistance), 0.0) * dif_k * dif_c;\r\n\r\n        vec3 spec = max(pow(dot(vNormal, halfVector), esp_p), 0.0) * esp_c * esp_k;\r\n\r\n        vec3 color3 = vec3(fColor);\r\n        \r\n        color3 = 0.5*color3 + 0.5*(diff + amb + spec);\r\n\r\n        color = vec4(color3, 1.0);\r\n    }\r\n`"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","create","out","copy","a","identity","multiply","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","Math","random","PI","hypot","y","i","arguments","length","sqrt","GLUtil","static","gl","type","source_code","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","getShaderInfoLog","Error","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","data","buffer","ArrayBuffer","undefined","byteLength","console","warn","createBuffer","bindBuffer","bufferData","STATIC_DRAW","attributes","WebGL2RenderingContext","vao","createVertexArray","size","bindVertexArray","attribute","loc","enableVertexAttribArray","dimension","FLOAT","ARRAY_BUFFER","vertexAttribPointer","Mesh","_gl","position","rotation","scale","_program","_primitive","_vaoLoc","_useModelMatrix","modelMatrix","this","_updateModelMatrix","useModelMatrix","use","Boolean","addAttribute","name","pointDim","forEach","val","count","f32Array","push","getAttribLocation","constructor","vertShaderSrc","fragShaderSrc","primitive","VERTEX_SHADER","FRAGMENT_SHADER","useProgram","createVAO","v","x","z","rad","s","sin","c","cos","createTex","texData","textureName","getUniformLocation","createTexture","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA32F","RGBA","uniform1i","tex","index","setUniformValue","value","uniformLoc","startsWith","draw","cam","frontFace","CCW","enable","CULL_FACE","cullFace","BACK","modelLoc","mvLoc","mvpLoc","uniformMatrix4fv","mv","viewMatrix","mvp","viewProjection","drawArrays","disable","scaleX","scaleY","positionX","positionY","depth","theta","vec","opacity","alpha","async","src","TRIANGLES","coords","texCoords","url","Promise","resolve","image","Image","addEventListener","imgSrc","img","loadImage","decode","imageBitmap","createImageBitmap","_tex","width","height","proportion","newWidth","newHeight","v1","v2","v3","v4","pointCollision","camera","point","inverse","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","pointT","mat","fill","round","j","multiplyMatWithVec","abs","camPosition","lookDirection","upDirection","left","right","bottom","top","near","far","fovy","aspect","canvas","projectionType","projMatrix","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","nf","f","tan","Infinity","lr","bt","log","Vertex","Map","id","hEdge","HalfEdge","opositte","next","vertex","Face","HalfEdgeDS","indexes","i1","i2","i3","h1","h2","h3","face","setOposittes","v0","hEdge1","setAttribute","values","vertlen","attrib","slice","set","createVBOs","keys","get","super","vbos","from","entries","map","entry","ELEMENT_ARRAY_BUFFER","Uint32Array","_count","drawElements","UNSIGNED_INT","path","vertShader","fragShader","texturePath","obj","fetch","text","border","lines","split","vertices","normals","borderIndex","line","replace","Number","parseFloat","d","dotProduct","key","join","init","indexOf","vIndex","parseInt","mesh","reduce","ac","curr","ambColor","ambK","difColor","difK","espColor","espK","espExp","pos","createUniforms","CanvasImage","canvasDimension","document","createElement","toDataURL","drawCanvas","getContext","imageElement","changeTex","querySelector","screen","viewport","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","background","logo_war","play_button","settings_button","max_button","DEPTH_TEST","depthFunc","LESS","e","mappedOnCenter","offsetLeft","offsetTop","mapClickInCanvas","clientX","clientY","mapa","brasil","light","cImage","update","ctx","CanvasRenderingContext2D","fillStyle","ellipse","lineWidth","stroke","font","fillText","drawNewScreen","drawImage"],"sourceRoot":""}