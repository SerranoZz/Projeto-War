(()=>{"use strict";var t=1e-6,e="undefined"!=typeof Float32Array?Float32Array:Array;function i(){var t=new e(16);return e!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function a(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function r(t,e){var i=e[0],s=e[1],a=e[2],r=e[3],o=e[4],n=e[5],h=e[6],c=e[7],l=e[8],m=e[9],u=e[10],f=e[11],g=e[12],d=e[13],p=e[14],v=e[15],w=i*n-s*o,M=i*h-a*o,x=i*c-r*o,_=s*h-a*n,b=s*c-r*n,j=a*c-r*h,U=l*d-m*g,V=l*p-u*g,S=l*v-f*g,E=m*p-u*d,T=m*v-f*d,y=u*v-f*p,C=w*y-M*T+x*E+_*S-b*V+j*U;return C?(C=1/C,t[0]=(n*y-h*T+c*E)*C,t[1]=(a*T-s*y-r*E)*C,t[2]=(d*j-p*b+v*_)*C,t[3]=(u*b-m*j-f*_)*C,t[4]=(h*S-o*y-c*V)*C,t[5]=(i*y-a*S+r*V)*C,t[6]=(p*x-g*j-v*M)*C,t[7]=(l*j-u*x+f*M)*C,t[8]=(o*T-n*S+c*U)*C,t[9]=(s*S-i*T-r*U)*C,t[10]=(g*b-d*x+v*w)*C,t[11]=(m*x-l*b-f*w)*C,t[12]=(n*V-o*E-h*U)*C,t[13]=(i*E-s*V+a*U)*C,t[14]=(d*M-g*_-p*w)*C,t[15]=(l*_-m*M+u*w)*C,t):null}function o(t,e,i){var s=e[0],a=e[1],r=e[2],o=e[3],n=e[4],h=e[5],c=e[6],l=e[7],m=e[8],u=e[9],f=e[10],g=e[11],d=e[12],p=e[13],v=e[14],w=e[15],M=i[0],x=i[1],_=i[2],b=i[3];return t[0]=M*s+x*n+_*m+b*d,t[1]=M*a+x*h+_*u+b*p,t[2]=M*r+x*c+_*f+b*v,t[3]=M*o+x*l+_*g+b*w,M=i[4],x=i[5],_=i[6],b=i[7],t[4]=M*s+x*n+_*m+b*d,t[5]=M*a+x*h+_*u+b*p,t[6]=M*r+x*c+_*f+b*v,t[7]=M*o+x*l+_*g+b*w,M=i[8],x=i[9],_=i[10],b=i[11],t[8]=M*s+x*n+_*m+b*d,t[9]=M*a+x*h+_*u+b*p,t[10]=M*r+x*c+_*f+b*v,t[11]=M*o+x*l+_*g+b*w,M=i[12],x=i[13],_=i[14],b=i[15],t[12]=M*s+x*n+_*m+b*d,t[13]=M*a+x*h+_*u+b*p,t[14]=M*r+x*c+_*f+b*v,t[15]=M*o+x*l+_*g+b*w,t}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var n;class h{static createShader(t,e,i){const s=t.createShader(e);if(t.shaderSource(s,i),t.compileShader(s),!t.getShaderParameter(s,t.COMPILE_STATUS)){const e=t.getShaderInfoLog(s);throw new Error("Shader compilation error: "+e)}return s}static createProgram(t,e,i){const s=t.createProgram();if(t.attachShader(s,e),t.attachShader(s,i),t.linkProgram(s),!t.getProgramParameter(s,t.LINK_STATUS)){const e=t.getProgramInfoLog(s);throw new Error("Could not compile WebGL program:"+e)}return s}static createBuffer(t,e,i){if(0==i.length)return null;if(!(i&&i.buffer instanceof ArrayBuffer&&void 0!==i.byteLength))return console.warn("Data is not an instance of ArrayBuffer"),null;const s=t.createBuffer();return t.bindBuffer(e,s),t.bufferData(e,i,t.STATIC_DRAW),s}static createVAO(t,...e){if(!(t instanceof WebGL2RenderingContext))return;const i=t.createVertexArray();let s,a;t.bindVertexArray(i);for(let i of e)null!=i.loc&&null!=i.loc&&(t.enableVertexAttribArray(i.loc),s=i.dimension,a=t.FLOAT,t.bindBuffer(t.ARRAY_BUFFER,i.buffer),t.vertexAttribPointer(i.loc,s,a,!1,0,0));return i}}class c{_gl;position=[0,0,0];rotation=[0,0,0];scale=[1,1,1];static#t=0;#e=i();#i=[];#s=null;#a=null;_program=null;_primitive;#r;_vaoLoc;#o;#n;#h=!1;useDepthTest=!1;get modelMatrix(){return this.updateModelMatrix(),this.#e}addAttribute(t,e,i=4){if(!(e instanceof Array))throw new Error("The info parameter needs to be a Array.");e.forEach((t=>{if("number"!=typeof t)throw new Error("The info array need to be numeric.")}));const s=e.length/i;if(this.#r){if(s!==this.#r)throw new Error("The VBOs need to contain the same number of vertex.")}else this.#r=s;const a=new Float32Array(e);this.#i.push({loc:this._gl.getAttribLocation(this._program,t),buffer:h.createBuffer(this._gl,this._gl.ARRAY_BUFFER,a),dimension:i}),this.#h=!1}constructor(t,e,i,s){this._primitive=s,this._gl=t,this.#c(e,i)}#c(t,e){this.#s=h.createShader(this._gl,this._gl.VERTEX_SHADER,t),this.#a=h.createShader(this._gl,this._gl.FRAGMENT_SHADER,e),this._program=h.createProgram(this._gl,this.#s,this.#a),this._gl.useProgram(this._program)}#l(){this._vaoLoc=h.createVAO(this._gl,...this.#i)}updateModelMatrix(){var t,e,i,s,r,o,n,h,c,l,m,u,f,g,d,p,v,w;a(this.#e),t=this.#e,e=this.#e,p=(i=this.position)[0],v=i[1],w=i[2],e===t?(t[12]=e[0]*p+e[4]*v+e[8]*w+e[12],t[13]=e[1]*p+e[5]*v+e[9]*w+e[13],t[14]=e[2]*p+e[6]*v+e[10]*w+e[14],t[15]=e[3]*p+e[7]*v+e[11]*w+e[15]):(s=e[0],r=e[1],o=e[2],n=e[3],h=e[4],c=e[5],l=e[6],m=e[7],u=e[8],f=e[9],g=e[10],d=e[11],t[0]=s,t[1]=r,t[2]=o,t[3]=n,t[4]=h,t[5]=c,t[6]=l,t[7]=m,t[8]=u,t[9]=f,t[10]=g,t[11]=d,t[12]=s*p+h*v+u*w+e[12],t[13]=r*p+c*v+f*w+e[13],t[14]=o*p+l*v+g*w+e[14],t[15]=n*p+m*v+d*w+e[15]),function(t,e,i){var s=Math.sin(i),a=Math.cos(i),r=e[4],o=e[5],n=e[6],h=e[7],c=e[8],l=e[9],m=e[10],u=e[11];e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=r*a+c*s,t[5]=o*a+l*s,t[6]=n*a+m*s,t[7]=h*a+u*s,t[8]=c*a-r*s,t[9]=l*a-o*s,t[10]=m*a-n*s,t[11]=u*a-h*s}(this.#e,this.#e,this.rotation[0]),function(t,e,i){var s=Math.sin(i),a=Math.cos(i),r=e[0],o=e[1],n=e[2],h=e[3],c=e[8],l=e[9],m=e[10],u=e[11];e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=r*a-c*s,t[1]=o*a-l*s,t[2]=n*a-m*s,t[3]=h*a-u*s,t[8]=r*s+c*a,t[9]=o*s+l*a,t[10]=n*s+m*a,t[11]=h*s+u*a}(this.#e,this.#e,this.rotation[1]),function(t,e,i){var s=Math.sin(i),a=Math.cos(i),r=e[0],o=e[1],n=e[2],h=e[3],c=e[4],l=e[5],m=e[6],u=e[7];e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=r*a+c*s,t[1]=o*a+l*s,t[2]=n*a+m*s,t[3]=h*a+u*s,t[4]=c*a-r*s,t[5]=l*a-o*s,t[6]=m*a-n*s,t[7]=u*a-h*s}(this.#e,this.#e,this.rotation[2]),function(t,e,i){var s=i[0],a=i[1],r=i[2];t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*a,t[5]=e[5]*a,t[6]=e[6]*a,t[7]=e[7]*a,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=e[11]*r,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]}(this.#e,this.#e,this.scale)}loadMVP(t){const e=this._gl.getUniformLocation(this._program,"model"),a=this._gl.getUniformLocation(this._program,"modelView"),r=this._gl.getUniformLocation(this._program,"mvp"),n=this._gl.getUniformLocation(this._program,"view"),h=this._gl.getUniformLocation(this._program,"viewProjection"),c=this._gl.getUniformLocation(this._program,"projection");if(e)this._gl.uniformMatrix4fv(e,!1,this.#e);else if(a){const e=i();t?o(e,t.viewMatrix,this.#e):s(e,this.#e),this._gl.uniformMatrix4fv(a,!1,e)}else if(r){const e=i();t?o(e,t.viewProjection,this.#e):s(e,this.#e),this._gl.uniformMatrix4fv(r,!1,e)}n&&this._gl.uniformMatrix4fv(e,!1,t.viewMatrix),c&&this._gl.uniformMatrix4fv(e,!1,t.projMatrix),h&&this._gl.uniformMatrix4fv(e,!1,t.viewProjection)}createTex(t,e){return this.#o=this._gl.getUniformLocation(this._program,e),this.#n=this._gl.createTexture(),this._gl.activeTexture(this._gl[`TEXTURE${c.#t}`]),this._gl.bindTexture(this._gl.TEXTURE_2D,this.#n),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_WRAP_S,this._gl.CLAMP_TO_EDGE),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_WRAP_T,this._gl.CLAMP_TO_EDGE),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_MIN_FILTER,this._gl.NEAREST),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_MAG_FILTER,this._gl.NEAREST),this._gl.texImage2D(this._gl.TEXTURE_2D,0,this._gl.RGBA32F,this._gl.RGBA,this._gl.FLOAT,t),this._gl.useProgram(this._program),this._gl.uniform1i(this.#o,c.#t),c.#t++,{tex:this.#n,index:c.#t-1}}setUniformValue(t,e,i){const s=this._gl.getUniformLocation(this._program,t);if(-1===s)throw new Error("This uniform doesn't exist in the shader code.");this._gl.useProgram(this._program),i.startsWith("Matrix")?this._gl["uniform"+i](s,!1,e):this._gl["uniform"+i](s,e)}draw(t){this.#h||(this.#h=!0,this.#l()),this._gl.frontFace(this._gl.CCW),this._gl.enable(this._gl.CULL_FACE),this._gl.cullFace(this._gl.BACK),this.useDepthTest&&(this._gl.enable(this._gl.DEPTH_TEST),this._gl.depthFunc(this._gl.LESS)),this.updateModelMatrix(),this._gl.bindVertexArray(this._vaoLoc),this._gl.useProgram(this._program),this.loadMVP(t),this._gl.drawArrays(this._primitive,0,this.#r),this._gl.disable(this._gl.CULL_FACE),this.useDepthTest&&this.gl.disable(this._gl.DEPTH_TEST)}static changeTex(t,{tex:e,index:i},s){t.bindTexture(t.TEXTURE_2D,e),t.texImage2D(t.TEXTURE_2D,0,t.RGBA32F,t.RGBA,t.FLOAT,s)}}n=new e(3),e!=Float32Array&&(n[0]=0,n[1]=0,n[2]=0);class l{#m;#u;#f;get width(){return this.#u}get height(){return this.#f}set scaleX(t){if(t<=0)throw new Error("the scale of a image need to be greater than 0");this.#m.scale[0]=t}set scaleY(t){if(t<=0)throw new Error("the scale of a image need to be greater than 0");this.#m.scale[1]=t}set positionX(t){this.#m.position[0]=t}set positionY(t){this.#m.position[1]=t}set depth(t){this.#m.position[2]=t}set rotation(t){this.#m.rotation[2]=t}set scale(t){if(!(t instanceof Array)||2!==t.length)throw new Error("scale need to be a vector with two positions.");this.#m.scale=function(t,i,s){var a=new e(3);return a[0]=t,a[1]=i,a[2]=1,a}(t[0],t[1])}set opacity(t){this.#m.setUniformValue("alpha",t,"1f")}get positionX(){return this.#m.position[0]}get positionY(){return this.#m.position[1]}async init(t,e){this.#m=new c(t,"#version 300 es\n    precision highp float;\n\n    uniform mat4 mvp;\n\n    in vec4 position;\n    in vec2 texCoord;\n\n    out vec2 fTexCoord;\n\n    void main() {\n        gl_Position  = mvp * position;\n        fTexCoord = texCoord;\n    }\n","#version 300 es\n    precision highp float;\n    \n    in vec2 fTexCoord;\n\n    uniform sampler2D uTexture;\n    uniform float alpha;\n\n    out vec4 color;\n\n    void main() {\n        color = texture(uTexture, fTexCoord);\n\n        if(color.a < 0.2) discard;\n\n        color *= alpha;\n    }\n",t.TRIANGLES);const i=await this.#g(e),s=this.#d(...i);this.#m.addAttribute("position",s.coords),this.#m.addAttribute("texCoord",s.texCoords,2),this.opacity=1}static async loadImage(t){return new Promise((e=>{const i=new Image;i.addEventListener("load",(()=>{e(i)})),i.src=t}))}async#g(t){const e=await l.loadImage(t);await e.decode();const i=await createImageBitmap(e);return this._tex=this.#m.createTex(e,"uTexture"),[i.width,i.height]}#d(t,e){const i=t/e;let s=1,a=1;i<1?s*=i:a/=i,this.#u=s,this.#f=a;const r=[-s,-a,0,1],o=[s,-a,0,1],n=[s,a,0,1],h=[-s,a,0,1];return{coords:[...r,...o,...n,...r,...n,...h],texCoords:[0,1,1,1,1,0,0,1,1,0,0,0]}}pointCollision(t,e,a){const n=i();s(n,this.#m.modelMatrix),a&&o(n,a.viewProjection,n);const h=i();r(h,n);const c=a?a.near:1,l=a?a.far:1,g=u(h,[t,e,c,1]),d=u(h,[t,e,l,1]),p=m(g,1/g[3]),v=m(d,1/d[3]),w=new f(v,p).pointWhenZIs(0);return Math.abs(w[0])<this.#u&&Math.abs(w[1])<this.#f}draw(t){this.#m&&this.#m.draw(t)}}function m(t,e){return t.map((t=>t*e))}function u(t,e){const i=new Array(e.length).fill(0);if(Math.round(e.length**2)===t.length){for(let s=0;s<e.length;s++)for(let a=0;a<t.length;a+=4)i[s]+=t[a+s]*e[a/4];return i}}class f{#p;#v;constructor(t,e){const i=this.#w(t,e);this.#v=i,this.#p=e}getPoint(t){return this.#p.map(((e,i)=>e+t*this.#v[i]))}pointWhenZIs(t){const e=this.#v[2]?(t-this.#p[2])/this.#v[2]:0;return this.getPoint(e)}#w(t,e){const i=t.map(((t,i)=>t-e[i])),s=Math.sqrt(i.reduce(((t,e)=>t+e**2),0));return s?i.map((t=>t/s)):i}}class g{attributes=new Map;id;hEdge;constructor(t){this.id=t}}class d{opositte;next;vertex;constructor(t){this.vertex=t}}class p{hEdge;constructor(t){this.hEdge=t}}class v{#M=[];#x=[];#_=[];constructor(t){for(let e=0;e<t.length;e+=3){const i=t[e],s=t[e+1],a=t[e+2];this.#x[i]||(this.#x[i]=new g(i)),this.#x[s]||(this.#x[s]=new g(s)),this.#x[a]||(this.#x[a]=new g(a));const r=new d(this.#x[i]),o=new d(this.#x[s]),n=new d(this.#x[a]);r.next=o,o.next=n,n.next=r;const h=new p(r);this.#M[e]=r,this.#M[e+1]=o,this.#M[e+2]=n,this.#_[Math.round(e/3)]=h}this.setOposittes()}setOposittes(){for(let t of this.#M){const e=t.vertex,i=t.next.vertex;if(e.hEdge||(e.hEdge=t),!t.opositte)for(let s of this.#M)if(s.vertex===i&&s.next.vertex===e){t.opositte=s,s.opositte=t;break}}}setAttribute(t,e,i){if(t.length/e!==this.#x.length)throw new Error(`Mesh haves ${this.#x.length} vertices, but only ${t.length/e} were given.`);for(let s=0;s<t.length;s+=e){const a=t.slice(s,s+e);this.#x[Math.round(s/e)].attributes.set(i,a)}}createVBOs(){const t=new Map,e=[];for(let e of this.#x)for(let i of e.attributes.keys())t.get(i)||t.set(i,[]),t.get(i).push(...e.attributes.get(i));for(let t of this.#M)e.push(t.vertex.id);return{attributes:t,indexes:e,count:this.#x.length}}}class w extends c{#b;#j=-1;#U;#h=!1;set border(t){this.#U=t}constructor(t,e,i,s){super(t,e,i,t.TRIANGLES),this.#b=new v(s)}addAttribute(t,e,i=4){if(!(e instanceof Array))throw new Error("The info parameter needs to be a Array.");if(e.forEach((t=>{if("number"!=typeof t)throw new Error("The info array need to be numeric.")})),-1===this._gl.getAttribLocation(this._program,t))throw new Error(`the attribute ${t} doesn't exists in the shader code.`);this.#b.setAttribute(e,i,t),this.#h=!1}#l(){const t=this.#b.createVBOs(),e=Array.from(t.attributes.entries()).map((e=>({loc:this._gl.getAttribLocation(this._program,e[0]),buffer:h.createBuffer(this._gl,this._gl.ARRAY_BUFFER,new Float32Array(e[1])),dimension:Math.round(e[1].length/t.count)})));this._vaoLoc=h.createVAO(this._gl,...e),this.#j=h.createBuffer(this._gl,this._gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(t.indexes)),this._count=t.indexes.length,this.#h=!0}draw(t){this.#h||this.#l(),this.useDepthTest&&(this._gl.enable(this._gl.DEPTH_TEST),this._gl.depthFunc(this._gl.LESS)),this._gl.frontFace(this._gl.CCW),this._gl.enable(this._gl.CULL_FACE),this._gl.cullFace(this._gl.BACK),this._gl.bindVertexArray(this._vaoLoc),this._gl.useProgram(this._program),this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER,this.#j);const e=this._gl.getUniformLocation(this._program,"model"),s=this._gl.getUniformLocation(this._program,"modelView"),a=this._gl.getUniformLocation(this._program,"mvp");if(e)this._gl.uniformMatrix4fv(e,!1,this.modelMatrix);else if(s){const s=i();o(s,t.viewMatrix,this.modelMatrix),this._gl.uniformMatrix4fv(e,!1,s)}else if(a){const s=i();o(s,t.viewProjection,this.modelMatrix),this._gl.uniformMatrix4fv(e,!1,s)}this._gl.drawElements(this._primitive,this._count,this._gl.UNSIGNED_INT,0),this._gl.disable(this._gl.CULL_FACE),this.useDepthTest&&this._gl.disable(this._gl.DEPTH_TEST)}pointCollision(t,e,i){return!!this.#U&&this.#U.pointCollision(t,e,i,this)}get drawBorder(){return this.#U.draw()}static async loadMeshFromObj(t,e,i,s,a){const r=await fetch(t),o=await r.text(),n=new Map,h=o.split("\n"),c=[],m=[],u=[],f=[];let g=0;for(let t of h)if(t.startsWith("vn")){const e=t.replace("vn ","").split(" ").map(Number.parseFloat);m.push(...e,1);const i=Math.sqrt(M(e,e));if(Math.abs(M(e,[0,0,1])/i)<.5){const t=e.join(",");n.get(t)||n.set(t,g)}g++}else if(t.startsWith("vt")){const e=t.replace("vt ","").split(" ").map(Number.parseFloat);u.push(...e)}else if(t.startsWith("v")){const e=t.replace("v ","").split(" ").map(Number.parseFloat);c.push(...e,1)}else if(t.startsWith("f")){const e=t.replace("f ","").split(" ").map((t=>{const e=t.indexOf("/"),i=t.slice(0,e);return Number.parseInt(i)-1}));f.push(...e)}const d=new x(n,c,e),p=new w(e,i,s,f);if(p.addAttribute("position",c),p.addAttribute("normal",m),p.useDepthTest=!0,0!==u.length){if(!a)throw new Error("This mesh need to a texture path");p.addAttribute("texCoord",u,3);const t=await l.loadImage(a);p.createTex(t,"uTexture")}return p.border=d,p}}const M=(t,e)=>t.reduce(((t,i,s)=>t+i*e[s]),0);class x{#V;#S;#E;#T;#y;#C;constructor(t,e){this.#V=t,this.#S=e;let i=1/0,s=-1/0;for(let t=0;t<this.#S.length;t+=4)this.#S[t+2]<i&&(i=this.#S[t+2]),this.#S[t+2]>s&&(s=this.#S[t+2]);this.#y=i,this.#C=s}pointCollision(t,e,i,s){return this.#E=null,this.#T=null,this.#P(t,e,this.#y,i,s)||this.#P(t,e,this.#C,i,s)}#P(t,e,a,n,h){const c=i();s(c,h.modelMatrix),n&&o(c,n.viewProjection,c);const l=i();r(l,c);const m=n?n.near:1,u=n?n.far:1,f=x.multiplyMatWithVec(l,[t,e,m,1]),g=x.multiplyMatWithVec(l,[t,e,u,1]),d=x.scalarMulti(f,1/f[3]),p=x.scalarMulti(g,1/g[3]),v=new _(p,d).pointWhenZIs(a);return this.#E?this.#T=v:this.#E=v,this.#A(v)}#A(t){let e,i,s=0;for(let a of this.#V.entries()){const r=4*a[1],o=[this.#S[r],this.#S[r+1]];if(!e){e=o,i=o;continue}const n=this.leftToEdge(t,i,o);if(2===n)return!0;n&&s++,i=o}return this.leftToEdge(t,i,e)&&s++,s%2==1}leftToEdge(t,e,i){if(i[0]===t[0]&&i[1]===t[1])return!0;if(e[0]===t[0]&&e[1]===t[1])return!0;const s=[i[1],e[1]];s.sort();const[a,r]=s;if(t[1]>=r||t[1]<=a)return!1;const o=e[0]-i[0];if(!o)return t[0]<=e[0];const n=(e[1]-i[1])/o,h=e[0]-e[0]*n;return t[0]<=(t[1]-h)/n}draw(){const t=document.createElement("canvas");t.width=1e3,t.height=1e3,t.style.backgroundColor="rgb(100, 0, 0)";const e=t.getContext("2d");let i;e.beginPath();for(let t of this.#V.entries()){const s=4*t[1],a=[this.#S[s],this.#S[s+1],this.#S[s+2]];i?e.lineTo(500*a[0]+250,500*(1-a[1])):(i=a,e.moveTo(500*a[0]+250,500*(1-a[1])))}return e.lineTo(500*i[0]+250,500*(1-i[1])),e.stroke(),this.#E&&e.fillRect(500*this.#E[0]+250,500*(1-this.#E[1]),5,5),this.#T&&e.fillRect(500*this.#T[0]+250,500*(1-this.#T[1]),5,5),t}static multiplyMatWithVec(t,e){const i=new Array(e.length).fill(0);if(Math.round(e.length**2)===t.length){for(let s=0;s<e.length;s++)for(let a=0;a<t.length;a+=4)i[s]+=t[a+s]*e[a/4];return i}}static scalarMulti(t,e){return t.map((t=>t*e))}}class _{#p;#v;constructor(t,e){const i=this.#w(t,e);this.#v=i,this.#p=e}getPoint(t){return this.#p.map(((e,i)=>e+t*this.#v[i]))}pointWhenZIs(t){const e=(t-this.#p[2])/this.#v[2];return this.getPoint(e)}#w(t,e){const i=t.map(((t,i)=>t-e[i])),s=Math.sqrt(i.reduce(((t,e)=>t+e**2),0));return i.map((t=>t/s))}}const b="#version 300 es\n    precision highp float;\n\n    uniform mat4 model;\n    uniform mat4 view;\n    uniform mat4 projection;\n    uniform vec4 color;\n\n    in vec4 position;\n    in vec4 normal;\n\n    out vec4 fPos;\n    out vec4 fColor;\n    out vec4 fNormal;\n\n    void main() {\n        gl_Position = (projection*view*model) * position;\n        gl_Position /= gl_Position.w;\n        fColor = color;\n        fPos = position;\n        fNormal = normal;\n    }\n",j="#version 300 es\n    precision highp float;\n    \n    uniform mat4 model;\n    uniform mat4 view;\n    uniform mat4 projection;\n\n    uniform vec3 amb_c;\n    uniform vec3 dif_c;\n    uniform vec3 esp_c;\n    uniform vec3 pos;\n    uniform float amb_k;\n    uniform float dif_k;\n    uniform float esp_k;\n    uniform float esp_p;\n\n    in vec4 fColor;\n    in vec4 normal;\n    in vec4 fPos;\n    in vec4 fNormal;\n\n    out vec4 color;\n\n    void main() {\n        mat4 modelView = view*model;\n\n        vec3 lightPos = (view * vec4(pos, 1.0)).xyz;\n        vec3 pos = -(modelView * fPos).xyz;\n\n        vec3 vNormal = normalize(inverse(transpose(modelView)) * fNormal).xyz;\n        vec3 vDistance = normalize(pos - lightPos);\n\n        vec3 normalPos = normalize(pos);\n\n        vec3 halfVector= normalize(vDistance + normalPos);\n\n        vec3 amb = amb_k * amb_c;\n\n        vec3 diff = max(dot(vNormal, vDistance), 0.0) * dif_k * dif_c;\n\n        vec3 spec = max(pow(dot(vNormal, halfVector), esp_p), 0.0) * esp_c * esp_k;\n\n        vec3 color3 = vec3(fColor);\n        \n        color3 = 0.5*color3 + 0.5*(diff + amb + spec);\n\n        color = vec4(color3, 1.0);\n    }\n";class U extends l{#F;async init(t,e=1e3){const i=document.createElement("canvas"),s=i.toDataURL("image/png");[i.width,i.height]=[e,e],await super.init(t,s),this.#F=i}async update(t=(()=>{}),e){t(this.#F.getContext("2d"));const i=this.#F.toDataURL("image/png"),s=await l.loadImage(i);c.changeTex(e,this._tex,s)}}class V{#O=i();#I=i();#R=i();camPosition=[0,0,1];lookDirection=[0,0,0];upDirection=[0,1,0];left=-4;right=4;bottom=-4;top=4;near=1;far=9;fovy=Math.PI/2;aspect;constructor(t){this.aspect=t.width/t.height}#L="perspective";set projectionType(t){if("orthogonal"!==t&&"perspective"!==t)throw new Error("Invalid type of projection.");this.#L=t}get viewMatrix(){return this.#k(),this.#O}get projMatrix(){return this.#D(),this.#I}#k(){a(this.#O),function(e,i,s,r){var o,n,h,c,l,m,u,f,g,d,p=i[0],v=i[1],w=i[2],M=r[0],x=r[1],_=r[2],b=s[0],j=s[1],U=s[2];Math.abs(p-b)<t&&Math.abs(v-j)<t&&Math.abs(w-U)<t?a(e):(u=p-b,f=v-j,g=w-U,o=x*(g*=d=1/Math.hypot(u,f,g))-_*(f*=d),n=_*(u*=d)-M*g,h=M*f-x*u,(d=Math.hypot(o,n,h))?(o*=d=1/d,n*=d,h*=d):(o=0,n=0,h=0),c=f*h-g*n,l=g*o-u*h,m=u*n-f*o,(d=Math.hypot(c,l,m))?(c*=d=1/d,l*=d,m*=d):(c=0,l=0,m=0),e[0]=o,e[1]=c,e[2]=u,e[3]=0,e[4]=n,e[5]=l,e[6]=f,e[7]=0,e[8]=h,e[9]=m,e[10]=g,e[11]=0,e[12]=-(o*p+n*v+h*w),e[13]=-(c*p+l*v+m*w),e[14]=-(u*p+f*v+g*w),e[15]=1)}(this.#O,this.camPosition,this.lookDirection,this.upDirection)}#D(){a(this.#I),"perspective"===this.#L?function(t,e,i,s,a){var r,o=1/Math.tan(e/2);t[0]=o/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=a&&a!==1/0?(r=1/(s-a),t[10]=(a+s)*r,t[14]=2*a*s*r):(t[10]=-1,t[14]=-2*s)}(this.#I,this.fovy,this.aspect,this.near,this.far):function(t,e,i,s,a,r,o){var n=1/(e-i),h=1/(s-a),c=1/(r-o);t[0]=-2*n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+i)*n,t[13]=(a+s)*h,t[14]=(o+r)*c,t[15]=1}(this.#I,this.left*this.aspect,this.right*this.aspect,this.bottom,this.top,this.left,this.right)}get viewProjection(){return this.#k(),this.#D(),a(this.#R),o(this.#R,this.#I,this.#O),this.#R}}class S{ambColor=[0,0,0];ambK=3;difColor=[.3,.3,.3];difK=4;espColor=[1,1,1];espK=3;espExp=20;pos;constructor(t){this.pos=t}createUniforms(t){t.setUniformValue("amb_c",this.ambColor,"3fv"),t.setUniformValue("amb_k",this.ambK,"1f"),t.setUniformValue("dif_c",this.difColor,"3fv"),t.setUniformValue("dif_k",this.difK,"1f"),t.setUniformValue("esp_c",this.espColor,"3fv"),t.setUniformValue("esp_k",this.espK,"1f"),t.setUniformValue("esp_p",this.espExp,"1f")}}class E{#B=[];#N;#Y;get camera(){return this.#Y}constructor(t,e=[0,0,0,1]){if(t instanceof WebGL2RenderingContext){if(t.viewport(0,0,t.canvas.width,t.canvas.height),!e||!e.length||4!==e.length)throw new Error("The clear color need to be a array with 4 floats");t.clearColor(0,0,0,1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),this.gl=t}}createCamera(t){this.#Y=new V(t)}createLight(t){this.#N=new S(t)}appendElement(...t){t.forEach((t=>{if(!t.draw)throw new Error("Element need to have a draw function");this.#B.push(t),this.#N&&t instanceof c&&this.#N.createUniforms(t)}))}draw(){for(let t of this.#B)t.draw(this.#Y)}}class T{#X;#G;#W;#K;#q;constructor(t,e,i){this.#X=t,this.#G=e,this.#W=[],this.#K=i,this.#q=0}conquestTerritory(t){this.#W.push(t)}receiveTroop(){const t=Math.floor(this.#W.length/2);this.#q=t}addTroops(t,e){e<=this.#q&&(t.soldiers=t.soldiers+e,this.#q-=e)}get name(){return this.#X}get color(){return this.#G}get freeTroops(){return this.#q}}class y{#X;#z;#H;#Z;constructor(t,e){this.#X=t,this.#z=[],this.#H=e,this.#Z=null}addCountry(t){this.#z.push(t)}get name(){return this.#X}get countries(){return this.#z}get bonus(){return this.#H}get owner(){return this.#Z}set owner(t){this.#Z=t}}class C{#X;#$;#J;#Z;#Q;#tt;constructor(t,e,i,s){this.#X=t,this.#$=e,this.#J=s,this.#Z=null,this.#Q=null,this.continent=i,this.#tt=0}get name(){return this.#X}get path(){return this.#$}get neighbors(){return this.#J}get owner(){return this.#Z}get continent(){return this.#Q}get soldiers(){return this.#tt}set continent(t){this.#Q=t,t.addCountry(this)}set owner(t){this.#Z=t}set soldiers(t){this.#tt=t}findNeighbor(t){for(let e=0;e<this.#J.length;e++)if(this.#J[e]==t)return e;return-1}}class P{#et;#z;async init(){this.#et=[],this.#z=[],await this.loadContinents(),await this.loadCountries()}async loadContinents(){const t=await fetch("./assets/data/continent-constructor.json"),e=await t.json();for(let t=0;t<e.length;t++){let i=new y(e[t].name,e[t].bonus);this.#et.push(i)}}async loadCountries(){const t=await fetch("./assets/data/country-constructor.json"),e=await t.json();for(let t=0;t<e.length;t++){let i=new C(e[t].name,e[t].path,e[t].continent,e[t].neighbors);this.#z.push(i)}}conquerCountry(t,e){countryFound=this.findCountry(t),countryFound||(countryFound.owner=e)}findCountry(t){for(let e=0;e<this.#z;e++)if(this.#z[e].name==t)return this.#z[e];return null}get continents(){return this.#et}get countries(){return this.#z}troop_reassignment(t,e,i){if(!(t instanceof C&&e instanceof C&&i instanceof int))throw new Error("Parametro invalido");if(t.findNeighbor(e)){if(!(t.soldier>i))throw new Error("quantidade de tropas invalidas");t.soldier-=i,e.soldier+=i}}}class A{#it;#st;#at;static DISTRIBUCTION=0;static ATTACK=1;static REMELATION=2;static EXCHANGE_CARDS=3;static FREEZE=4;constructor(t){this.#at=t,this.#st=0,this.#it=A.DISTRIBUCTION}nextPlayer(){this.#st++,this.#it=A.DISTRIBUCTION}get player(){this.#at[this.#st]}get state(){return this.#it}nextState(){this.#it<A.FREEZE&&this.#it++}}class F{#rt;#ot;#nt;#ht;#ct=4.5;#lt=!1;#at=[];#mt;static async build(t){const e=new F;return await e.init(t),e}async init(t){this.gl=t.getContext("webgl2"),await this.#ut(),await this.#ft();const e=["claudio","et bilu","dom pedro","saci","uantedeguemon","Serrano"],i=[[.2,.2,.2,1],[.9,.9,.9,1],[0,.8,.8,1],[0,0,.8,1],[.8,0,0,1],[.5,.5,.5,1]];for(let t=0;t<6;t++){const s=Math.floor(Math.random()*i.length),a=i[s];i.splice(s,1),this.#at[t]=new T(e[t],a,"mata todo mundo")}this.#ht=new P,await this.#ht.init();const s=[...this.#ht.countries],a=Math.floor(s.length/this.#at.length);for(let t of this.#at)for(let e=0;e<a;e++){const i=Math.floor(Math.random()*s.length);s[e].owner=t,s[e].troops=1,s.splice(i,1)}this.#mt=new A(this.#at)}async#ut(){this.#rt=new E(this.gl);const t=new l;await t.init(this.gl,"./assets/menu/fundo.jpg");const e=new l;await e.init(this.gl,"./assets/menu/logo_war.png");const i=new l;await i.init(this.gl,"./assets/menu/play_button.png");const s=new l;await s.init(this.gl,"./assets/menu/settings_button.png");const a=new l;await a.init(this.gl,"./assets/menu/max_button.png"),t.scaleY=1.85,e.scale=[.35,.56],i.scale=[.15,.26],s.scale=[.046,.08],a.scale=[.046,.08],e.positionY=.25,i.positionY=-.55,s.positionX=.9,s.positionY=.8,this.#rt.appendElement(t,e,i,s),this.gl.canvas.addEventListener("click",(t=>{const e=F.mapClickInCanvas(t.clientX,t.clientY,this.gl.canvas);i.pointCollision(...e)&&(this.#lt=!0)}))}async#ft(){const t=new O;await t.init(this.gl);const e=new I;await e.init(this.gl);const i=new R;await i.init(this.gl);const s=await w.loadMeshFromObj("./assets/meshes/south_america/brasil.obj",this.gl,b,j);s.scale=[this.#ct,this.#ct,1];const a=await w.loadMeshFromObj("./assets/meshes/south_america/argentina.obj",this.gl,b,j);a.scale=[this.#ct,this.#ct,1];const r=await w.loadMeshFromObj("./assets/meshes/south_america/chile.obj",this.gl,b,j);r.scale=[this.#ct,this.#ct,1];const o=await w.loadMeshFromObj("./assets/meshes/south_america/venezuela.obj",this.gl,b,j);o.scale=[this.#ct,this.#ct,1];const n=await w.loadMeshFromObj("./assets/meshes/north_america/mexico.obj",this.gl,b,j);n.scale=[this.#ct,this.#ct,1];const h=await w.loadMeshFromObj("./assets/meshes/north_america/california.obj",this.gl,b,j);h.scale=[this.#ct,this.#ct,1];const c=await w.loadMeshFromObj("./assets/meshes/north_america/nova_york.obj",this.gl,b,j);c.scale=[this.#ct,this.#ct,1];const l=await w.loadMeshFromObj("./assets/meshes/north_america/ottawa.obj",this.gl,b,j);l.scale=[this.#ct,this.#ct,1];const m=await w.loadMeshFromObj("./assets/meshes/north_america/labrador.obj",this.gl,b,j);m.scale=[this.#ct,this.#ct,1];const u=await w.loadMeshFromObj("./assets/meshes/north_america/vancouver.obj",this.gl,b,j);u.scale=[this.#ct,this.#ct,1];const f=await w.loadMeshFromObj("./assets/meshes/north_america/alaska.obj",this.gl,b,j);f.scale=[this.#ct,this.#ct,1];const g=await w.loadMeshFromObj("./assets/meshes/north_america/mackenzie.obj",this.gl,b,j);g.scale=[this.#ct,this.#ct,1];const d=await w.loadMeshFromObj("./assets/meshes/north_america/groelandia.obj",this.gl,b,j);d.scale=[this.#ct,this.#ct,1];const p=await w.loadMeshFromObj("./assets/meshes/africa/africa_sul.obj",this.gl,b,j);p.scale=[this.#ct,this.#ct,1];const v=await w.loadMeshFromObj("./assets/meshes/africa/argelia.obj",this.gl,b,j);v.scale=[this.#ct,this.#ct,1];const M=await w.loadMeshFromObj("./assets/meshes/africa/congo.obj",this.gl,b,j);M.scale=[this.#ct,this.#ct,1];const x=await w.loadMeshFromObj("./assets/meshes/africa/egito.obj",this.gl,b,j);x.scale=[this.#ct,this.#ct,1];const _=await w.loadMeshFromObj("./assets/meshes/africa/madagascar.obj",this.gl,b,j);_.scale=[this.#ct,this.#ct,1];const V=await w.loadMeshFromObj("./assets/meshes/africa/sudao.obj",this.gl,b,j);V.scale=[this.#ct,this.#ct,1];const S=await w.loadMeshFromObj("./assets/meshes/oceania/australia.obj",this.gl,b,j);S.scale=[this.#ct,this.#ct,1];const T=await w.loadMeshFromObj("./assets/meshes/oceania/borneu.obj",this.gl,b,j);T.scale=[this.#ct,this.#ct,1];const y=await w.loadMeshFromObj("./assets/meshes/oceania/nova_guine.obj",this.gl,b,j);y.scale=[this.#ct,this.#ct,1];const C=await w.loadMeshFromObj("./assets/meshes/oceania/sumatra.obj",this.gl,b,j);C.scale=[this.#ct,this.#ct,1];const P=await w.loadMeshFromObj("./assets/meshes/asia/aral.obj",this.gl,b,j);P.scale=[this.#ct,this.#ct,1];const A=await w.loadMeshFromObj("./assets/meshes/asia/china.obj",this.gl,b,j);A.scale=[this.#ct,this.#ct,1];const k=await w.loadMeshFromObj("./assets/meshes/asia/dudinka.obj",this.gl,b,j);k.scale=[this.#ct,this.#ct,1];const D=await w.loadMeshFromObj("./assets/meshes/asia/india.obj",this.gl,b,j);D.scale=[this.#ct,this.#ct,1];const B=await w.loadMeshFromObj("./assets/meshes/asia/japao.obj",this.gl,b,j);B.scale=[this.#ct,this.#ct,1];const N=await w.loadMeshFromObj("./assets/meshes/asia/mongolia.obj",this.gl,b,j);N.scale=[this.#ct,this.#ct,1];const Y=await w.loadMeshFromObj("./assets/meshes/asia/omek.obj",this.gl,b,j);Y.scale=[this.#ct,this.#ct,1];const X=await w.loadMeshFromObj("./assets/meshes/asia/oriente_medio.obj",this.gl,b,j);X.scale=[this.#ct,this.#ct,1];const G=await w.loadMeshFromObj("./assets/meshes/asia/siberia.obj",this.gl,b,j);G.scale=[this.#ct,this.#ct,1];const W=await w.loadMeshFromObj("./assets/meshes/asia/tchita.obj",this.gl,b,j);W.scale=[this.#ct,this.#ct,1];const K=await w.loadMeshFromObj("./assets/meshes/asia/vietna.obj",this.gl,b,j);K.scale=[this.#ct,this.#ct,1];const q=await w.loadMeshFromObj("./assets/meshes/asia/vladvostok.obj",this.gl,b,j);q.scale=[this.#ct,this.#ct,1];const z=await w.loadMeshFromObj("./assets/meshes/europa/alemanha.obj",this.gl,b,j);z.scale=[this.#ct,this.#ct,1];const H=await w.loadMeshFromObj("./assets/meshes/europa/franca.obj",this.gl,b,j);H.scale=[this.#ct,this.#ct,1];const Z=await w.loadMeshFromObj("./assets/meshes/europa/inglaterra.obj",this.gl,b,j);Z.scale=[this.#ct,this.#ct,1];const $=await w.loadMeshFromObj("./assets/meshes/europa/islandia.obj",this.gl,b,j);$.scale=[this.#ct,this.#ct,1];const J=await w.loadMeshFromObj("./assets/meshes/europa/moscou.obj",this.gl,b,j);J.scale=[this.#ct,this.#ct,1];const Q=await w.loadMeshFromObj("./assets/meshes/europa/polonia.obj",this.gl,b,j);Q.scale=[this.#ct,this.#ct,1];const tt=await w.loadMeshFromObj("./assets/meshes/europa/suecia.obj",this.gl,b,j);tt.scale=[this.#ct,this.#ct,1],this.#ot=new E(this.gl),this.#ot.createCamera(L),this.#ot.camera.camPosition[2]=1.8,this.#ot.camera.camPosition[1]=-.3,this.#ot.createLight([1,0,.3]),this.#nt=new E(this.gl);const et=new U;await et.init(this.gl),await et.update((t=>{t instanceof CanvasRenderingContext2D&&(t.fillStyle="white",t.ellipse(500,500,400,500,0,0,2*Math.PI),t.lineWidth=100,t.stroke(),t.font="600px Arial",t.fillText("1",320,600))}),this.gl),et.scale=[.1,.1],et.positionY=.2,this.#ot.appendElement(s,a,r,o,n,h,c,l,m,u,f,g,d,p,v,M,x,_,V,S,T,y,C,P,A,k,D,B,N,Y,X,G,W,K,q,z,H,Z,$,J,Q,tt),this.#nt.appendElement(t,e,i),s.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),s.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),s.setUniformValue("color",[0,0,1,1],"4fv"),a.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),a.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),a.setUniformValue("color",[0,0,1,1],"4fv"),r.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),r.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),r.setUniformValue("color",[0,0,1,1],"4fv"),o.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),o.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),o.setUniformValue("color",[0,0,1,1],"4fv"),n.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),n.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),n.setUniformValue("color",[0,0,1,1],"4fv"),h.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),h.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),h.setUniformValue("color",[0,0,1,1],"4fv"),c.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),c.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),c.setUniformValue("color",[0,0,1,1],"4fv"),l.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),l.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),l.setUniformValue("color",[0,0,1,1],"4fv"),m.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),m.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),m.setUniformValue("color",[0,0,1,1],"4fv"),u.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),u.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),u.setUniformValue("color",[0,0,1,1],"4fv"),f.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),f.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),f.setUniformValue("color",[0,0,1,1],"4fv"),g.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),g.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),g.setUniformValue("color",[0,0,1,1],"4fv"),d.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),d.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),d.setUniformValue("color",[0,0,1,1],"4fv"),p.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),p.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),p.setUniformValue("color",[0,0,1,1],"4fv"),v.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),v.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),v.setUniformValue("color",[0,0,1,1],"4fv"),M.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),M.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),M.setUniformValue("color",[0,0,1,1],"4fv"),x.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),x.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),x.setUniformValue("color",[0,0,1,1],"4fv"),_.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),_.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),_.setUniformValue("color",[0,0,1,1],"4fv"),V.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),V.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),V.setUniformValue("color",[0,0,1,1],"4fv"),S.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),S.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),S.setUniformValue("color",[0,0,1,1],"4fv"),T.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),T.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),T.setUniformValue("color",[0,0,1,1],"4fv"),y.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),y.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),y.setUniformValue("color",[0,0,1,1],"4fv"),C.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),C.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),C.setUniformValue("color",[0,0,1,1],"4fv"),P.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),P.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),P.setUniformValue("color",[0,0,1,1],"4fv"),A.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),A.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),A.setUniformValue("color",[0,0,1,1],"4fv"),k.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),k.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),k.setUniformValue("color",[0,0,1,1],"4fv"),D.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),D.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),D.setUniformValue("color",[0,0,1,1],"4fv"),B.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),B.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),B.setUniformValue("color",[0,0,1,1],"4fv"),N.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),N.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),N.setUniformValue("color",[0,0,1,1],"4fv"),Y.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),Y.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),Y.setUniformValue("color",[0,0,1,1],"4fv"),X.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),X.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),X.setUniformValue("color",[0,0,1,1],"4fv"),G.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),G.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),G.setUniformValue("color",[0,0,1,1],"4fv"),W.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),W.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),W.setUniformValue("color",[0,0,1,1],"4fv"),K.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),K.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),K.setUniformValue("color",[0,0,1,1],"4fv"),q.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),q.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),q.setUniformValue("color",[0,0,1,1],"4fv"),z.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),z.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),z.setUniformValue("color",[0,0,1,1],"4fv"),H.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),H.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),H.setUniformValue("color",[0,0,1,1],"4fv"),Z.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),Z.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),Z.setUniformValue("color",[0,0,1,1],"4fv"),$.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),$.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),$.setUniformValue("color",[0,0,1,1],"4fv"),J.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),J.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),J.setUniformValue("color",[0,0,1,1],"4fv"),Q.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),Q.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),Q.setUniformValue("color",[0,0,1,1],"4fv"),tt.setUniformValue("view",this.#ot.camera.viewMatrix,"Matrix4fv"),tt.setUniformValue("projection",this.#ot.camera.projMatrix,"Matrix4fv"),tt.setUniformValue("color",[0,0,1,1],"4fv"),this.gl.canvas.addEventListener("click",(t=>{if(!this.#lt)return;const e=F.mapClickInCanvas(t.clientX,t.clientY,this.gl.canvas);a.pointCollision(...e)&&alert("argentina")}))}draw(){this.#lt?(this.#ot.draw(),this.#nt.draw()):this.#rt.draw()}run(){const t=()=>{this.draw(),requestAnimationFrame(t)};t()}static mapClickInCanvas(t,e,i){const s=[t-i.offsetLeft-i.width/2,i.height/2-(e-i.offsetTop)];return[2*s[0]/i.width,2*s[1]/i.height]}}class O{async init(t){this.settingsButton=new l,await this.settingsButton.init(t,"./assets/menu/settings_button.png"),this.settingsButton.scale=[.046,.08],O.setInitialPosition(.9,.8,.2,this.settingsButton),this.card_button=new l,await this.card_button.init(t,"./assets/game/card_button.png"),this.card_button.scale=[.08,.15],O.setInitialPosition(.76,-.85,.2,this.card_button),this.objective_button=new l,await this.objective_button.init(t,"./assets/game/objective_button.png"),this.objective_button.scale=[.065,.11],O.setInitialPosition(.92,-.85,.2,this.objective_button),this.current_player=new l,await this.current_player.init(t,"./assets/game/current_player.png"),this.current_player.scale=[.4,.6],O.setInitialPosition(0,-.85,.2,this.current_player),this.show_players=new l,await this.show_players.init(t,"./assets/game/show_players.png"),this.show_players.scale=[.065,.115],O.setInitialPosition(-.92,-.85,.2,this.show_players)}static setInitialPosition(t,e,i,s){s.positionX=t,s.positionY=e,s.depth=i}moveAll(t){this.card_button.positionY+=t,this.objective_button._tex.positionY+=t,this.current_player.positionY+=t}draw(t){this.settingsButton.draw(t),this.card_button.draw(t),this.objective_button.draw(t),this.current_player.draw(t),this.show_players.draw(t)}}class I{async init(t){this.show_cards=new l,await this.show_cards.init(t,"./assets/game/show_cards.png"),this.show_cards.scale=[.4,.7],I.setInitialPosition(this.show_cards.positionX,-1.85,.3,this.show_cards),this.cancel_button=new l,await this.cancel_button.init(t,"./assets/game/cancel_button.png"),this.cancel_button.scale=[.046,.083],I.setInitialPosition(-.34,-1.81,.4,this.cancel_button),this.ok_button=new l,await this.ok_button.init(t,"./assets/game/ok_button.png"),this.ok_button.scale=[.046,.083],I.setInitialPosition(.34,-1.81,.4,this.ok_button),this.cards_info=new l,await this.cards_info.init(t,"assets/game/cards_info.png"),this.cards_info.scale=[.2,.35],I.setInitialPosition(.832+1,this.cards_info.positionY,.3,this.cards_info)}static setInitialPosition(t,e,i,s){s.positionX=t,s.positionY=e,s.depth=i}moveAll(t,e){this.show_cards.positionY+=e,this.cancel_button.positionY+=e,this.ok_button.positionY+=e,this.cards_info.positionX+=t}draw(t){this.show_cards.draw(t),this.cancel_button.draw(t),this.ok_button.draw(t),this.cards_info.draw(t)}}class R{async init(t){this.fortify=new l,await this.fortify.init(t,"./assets/game/fortify.png"),this.fortify.scale=[.4,.7],R.setInitialPosition(this.fortify.positionX,-1.825,.3,this.fortify),this.cancel_button=new l,await this.cancel_button.init(t,"./assets/game/cancel_button.png"),this.cancel_button.scale=[.046,.083],R.setInitialPosition(-.34,-1.81,.4,this.cancel_button),this.ok_button=new l,await this.ok_button.init(t,"./assets/game/ok_button.png"),this.ok_button.scale=[.046,.083],R.setInitialPosition(.34,-1.81,.4,this.ok_button),this.plus_button=new l,await this.plus_button.init(t,"./assets/game/plus_button.png"),this.plus_button.scale=[.046,.083],R.setInitialPosition(.168,-.86-1,.4,this.plus_button),this.minus_button=new l,await this.minus_button.init(t,"./assets/game/minus_button.png"),this.minus_button.scale=[.046,.083],R.setInitialPosition(-.168,-.86-1,.4,this.minus_button)}static setInitialPosition(t,e,i,s){s.positionX=t,s.positionY=e,s.depth=i}moveAll(t){this.fortify.positionY+=t,this.cancel_button.positionY+=t,this.ok_button.positionY+=t,this.plus_button.positionY+=t,this.minus_button.positionY+=t}draw(t){this.fortify.draw(t),this.cancel_button.draw(t),this.ok_button.draw(t),this.plus_button.draw(t),this.minus_button.draw(t)}}const L=document.querySelector("#game-screen");F.build(L).then((t=>{t.run()}))})();
//# sourceMappingURL=main.bundle.js.map