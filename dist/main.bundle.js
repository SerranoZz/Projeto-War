(()=>{"use strict";var t=1e-6,e="undefined"!=typeof Float32Array?Float32Array:Array;function i(){var t=new e(16);return e!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function a(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function o(t,e){var i=e[0],s=e[1],a=e[2],o=e[3],r=e[4],n=e[5],c=e[6],h=e[7],l=e[8],m=e[9],f=e[10],u=e[11],g=e[12],v=e[13],p=e[14],d=e[15],w=i*n-s*r,_=i*c-a*r,x=i*h-o*r,M=s*c-a*n,b=s*h-o*n,j=a*h-o*c,U=l*v-m*g,V=l*p-f*g,S=l*d-u*g,E=m*p-f*v,T=m*d-u*v,y=f*d-u*p,A=w*y-_*T+x*E+M*S-b*V+j*U;return A?(A=1/A,t[0]=(n*y-c*T+h*E)*A,t[1]=(a*T-s*y-o*E)*A,t[2]=(v*j-p*b+d*M)*A,t[3]=(f*b-m*j-u*M)*A,t[4]=(c*S-r*y-h*V)*A,t[5]=(i*y-a*S+o*V)*A,t[6]=(p*x-g*j-d*_)*A,t[7]=(l*j-f*x+u*_)*A,t[8]=(r*T-n*S+h*U)*A,t[9]=(s*S-i*T-o*U)*A,t[10]=(g*b-v*x+d*w)*A,t[11]=(m*x-l*b-u*w)*A,t[12]=(n*V-r*E-c*U)*A,t[13]=(i*E-s*V+a*U)*A,t[14]=(v*_-g*M-p*w)*A,t[15]=(l*M-m*_+f*w)*A,t):null}function r(t,e,i){var s=e[0],a=e[1],o=e[2],r=e[3],n=e[4],c=e[5],h=e[6],l=e[7],m=e[8],f=e[9],u=e[10],g=e[11],v=e[12],p=e[13],d=e[14],w=e[15],_=i[0],x=i[1],M=i[2],b=i[3];return t[0]=_*s+x*n+M*m+b*v,t[1]=_*a+x*c+M*f+b*p,t[2]=_*o+x*h+M*u+b*d,t[3]=_*r+x*l+M*g+b*w,_=i[4],x=i[5],M=i[6],b=i[7],t[4]=_*s+x*n+M*m+b*v,t[5]=_*a+x*c+M*f+b*p,t[6]=_*o+x*h+M*u+b*d,t[7]=_*r+x*l+M*g+b*w,_=i[8],x=i[9],M=i[10],b=i[11],t[8]=_*s+x*n+M*m+b*v,t[9]=_*a+x*c+M*f+b*p,t[10]=_*o+x*h+M*u+b*d,t[11]=_*r+x*l+M*g+b*w,_=i[12],x=i[13],M=i[14],b=i[15],t[12]=_*s+x*n+M*m+b*v,t[13]=_*a+x*c+M*f+b*p,t[14]=_*o+x*h+M*u+b*d,t[15]=_*r+x*l+M*g+b*w,t}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var n;class c{static createShader(t,e,i){const s=t.createShader(e);if(t.shaderSource(s,i),t.compileShader(s),!t.getShaderParameter(s,t.COMPILE_STATUS)){const e=t.getShaderInfoLog(s);throw new Error("Shader compilation error: "+e)}return s}static createProgram(t,e,i){const s=t.createProgram();if(t.attachShader(s,e),t.attachShader(s,i),t.linkProgram(s),!t.getProgramParameter(s,t.LINK_STATUS)){const e=t.getProgramInfoLog(s);throw new Error("Could not compile WebGL program:"+e)}return s}static createBuffer(t,e,i){if(0==i.length)return null;if(!(i&&i.buffer instanceof ArrayBuffer&&void 0!==i.byteLength))return console.warn("Data is not an instance of ArrayBuffer"),null;const s=t.createBuffer();return t.bindBuffer(e,s),t.bufferData(e,i,t.STATIC_DRAW),s}static createVAO(t,...e){if(!(t instanceof WebGL2RenderingContext))return;const i=t.createVertexArray();let s,a;t.bindVertexArray(i);for(let i of e)null!=i.loc&&null!=i.loc&&(t.enableVertexAttribArray(i.loc),s=i.dimension,a=t.FLOAT,t.bindBuffer(t.ARRAY_BUFFER,i.buffer),t.vertexAttribPointer(i.loc,s,a,!1,0,0));return i}}class h{_gl;position=[0,0,0];rotation=[0,0,0];scale=[1,1,1];static#t=0;#e=i();#i=[];#s=null;#a=null;_program=null;_primitive;#o;_vaoLoc;#r;#n;#c=!1;useDepthTest=!1;get modelMatrix(){return this.updateModelMatrix(),this.#e}addAttribute(t,e,i=4){if(!(e instanceof Array))throw new Error("The info parameter needs to be a Array.");e.forEach((t=>{if("number"!=typeof t)throw new Error("The info array need to be numeric.")}));const s=e.length/i;if(this.#o){if(s!==this.#o)throw new Error("The VBOs need to contain the same number of vertex.")}else this.#o=s;const a=new Float32Array(e);this.#i.push({loc:this._gl.getAttribLocation(this._program,t),buffer:c.createBuffer(this._gl,this._gl.ARRAY_BUFFER,a),dimension:i}),this.#c=!1}constructor(t,e,i,s){this._primitive=s,this._gl=t,this.#h(e,i)}#h(t,e){this.#s=c.createShader(this._gl,this._gl.VERTEX_SHADER,t),this.#a=c.createShader(this._gl,this._gl.FRAGMENT_SHADER,e),this._program=c.createProgram(this._gl,this.#s,this.#a),this._gl.useProgram(this._program)}#l(){this._vaoLoc=c.createVAO(this._gl,...this.#i)}updateModelMatrix(){var t,e,i,s,o,r,n,c,h,l,m,f,u,g,v,p,d,w;a(this.#e),t=this.#e,e=this.#e,p=(i=this.position)[0],d=i[1],w=i[2],e===t?(t[12]=e[0]*p+e[4]*d+e[8]*w+e[12],t[13]=e[1]*p+e[5]*d+e[9]*w+e[13],t[14]=e[2]*p+e[6]*d+e[10]*w+e[14],t[15]=e[3]*p+e[7]*d+e[11]*w+e[15]):(s=e[0],o=e[1],r=e[2],n=e[3],c=e[4],h=e[5],l=e[6],m=e[7],f=e[8],u=e[9],g=e[10],v=e[11],t[0]=s,t[1]=o,t[2]=r,t[3]=n,t[4]=c,t[5]=h,t[6]=l,t[7]=m,t[8]=f,t[9]=u,t[10]=g,t[11]=v,t[12]=s*p+c*d+f*w+e[12],t[13]=o*p+h*d+u*w+e[13],t[14]=r*p+l*d+g*w+e[14],t[15]=n*p+m*d+v*w+e[15]),function(t,e,i){var s=Math.sin(i),a=Math.cos(i),o=e[4],r=e[5],n=e[6],c=e[7],h=e[8],l=e[9],m=e[10],f=e[11];e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=o*a+h*s,t[5]=r*a+l*s,t[6]=n*a+m*s,t[7]=c*a+f*s,t[8]=h*a-o*s,t[9]=l*a-r*s,t[10]=m*a-n*s,t[11]=f*a-c*s}(this.#e,this.#e,this.rotation[0]),function(t,e,i){var s=Math.sin(i),a=Math.cos(i),o=e[0],r=e[1],n=e[2],c=e[3],h=e[8],l=e[9],m=e[10],f=e[11];e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*a-h*s,t[1]=r*a-l*s,t[2]=n*a-m*s,t[3]=c*a-f*s,t[8]=o*s+h*a,t[9]=r*s+l*a,t[10]=n*s+m*a,t[11]=c*s+f*a}(this.#e,this.#e,this.rotation[1]),function(t,e,i){var s=Math.sin(i),a=Math.cos(i),o=e[0],r=e[1],n=e[2],c=e[3],h=e[4],l=e[5],m=e[6],f=e[7];e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*a+h*s,t[1]=r*a+l*s,t[2]=n*a+m*s,t[3]=c*a+f*s,t[4]=h*a-o*s,t[5]=l*a-r*s,t[6]=m*a-n*s,t[7]=f*a-c*s}(this.#e,this.#e,this.rotation[2]),function(t,e,i){var s=i[0],a=i[1],o=i[2];t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*a,t[5]=e[5]*a,t[6]=e[6]*a,t[7]=e[7]*a,t[8]=e[8]*o,t[9]=e[9]*o,t[10]=e[10]*o,t[11]=e[11]*o,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]}(this.#e,this.#e,this.scale)}loadMVP(t){const e=this._gl.getUniformLocation(this._program,"model"),a=this._gl.getUniformLocation(this._program,"modelView"),o=this._gl.getUniformLocation(this._program,"mvp"),n=this._gl.getUniformLocation(this._program,"view"),c=this._gl.getUniformLocation(this._program,"viewProjection"),h=this._gl.getUniformLocation(this._program,"projection");if(e)this._gl.uniformMatrix4fv(e,!1,this.#e);else if(a){const e=i();t?r(e,t.viewMatrix,this.#e):s(e,this.#e),this._gl.uniformMatrix4fv(a,!1,e)}else if(o){const e=i();t?r(e,t.viewProjection,this.#e):s(e,this.#e),this._gl.uniformMatrix4fv(o,!1,e)}n&&this._gl.uniformMatrix4fv(e,!1,t.viewMatrix),h&&this._gl.uniformMatrix4fv(e,!1,t.projMatrix),c&&this._gl.uniformMatrix4fv(e,!1,t.viewProjection)}createTex(t,e){return this.#r=this._gl.getUniformLocation(this._program,e),this.#n=this._gl.createTexture(),this._gl.activeTexture(this._gl[`TEXTURE${h.#t}`]),this._gl.bindTexture(this._gl.TEXTURE_2D,this.#n),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_WRAP_S,this._gl.CLAMP_TO_EDGE),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_WRAP_T,this._gl.CLAMP_TO_EDGE),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_MIN_FILTER,this._gl.NEAREST),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_MAG_FILTER,this._gl.NEAREST),this._gl.texImage2D(this._gl.TEXTURE_2D,0,this._gl.RGBA32F,this._gl.RGBA,this._gl.FLOAT,t),this._gl.useProgram(this._program),this._gl.uniform1i(this.#r,h.#t),h.#t++,{tex:this.#n,index:h.#t-1}}setUniformValue(t,e,i){const s=this._gl.getUniformLocation(this._program,t);if(-1===s)throw new Error("This uniform doesn't exist in the shader code.");this._gl.useProgram(this._program),i.startsWith("Matrix")?this._gl["uniform"+i](s,!1,e):this._gl["uniform"+i](s,e)}draw(t){this.#c||(this.#c=!0,this.#l()),this._gl.frontFace(this._gl.CCW),this._gl.enable(this._gl.CULL_FACE),this._gl.cullFace(this._gl.BACK),this.useDepthTest&&(this._gl.enable(this._gl.DEPTH_TEST),this._gl.depthFunc(this._gl.LESS)),this.updateModelMatrix(),this._gl.bindVertexArray(this._vaoLoc),this._gl.useProgram(this._program),this.loadMVP(t),this._gl.drawArrays(this._primitive,0,this.#o),this._gl.disable(this._gl.CULL_FACE),this.useDepthTest&&this.gl.disable(this._gl.DEPTH_TEST)}static changeTex(t,{tex:e,index:i},s){t.bindTexture(t.TEXTURE_2D,e),t.texImage2D(t.TEXTURE_2D,0,t.RGBA32F,t.RGBA,t.FLOAT,s)}}n=new e(3),e!=Float32Array&&(n[0]=0,n[1]=0,n[2]=0);class l{#m;#f;#u;set scaleX(t){if(t<=0)throw new Error("the scale of a image need to be greater than 0");this.#m.scale[0]=t}set scaleY(t){if(t<=0)throw new Error("the scale of a image need to be greater than 0");this.#m.scale[1]=t}set positionX(t){this.#m.position[0]=t}set positionY(t){this.#m.position[1]=t}set depth(t){this.#m.position[2]=t}set rotation(t){this.#m.rotation[2]=t}set scale(t){if(!(t instanceof Array)||2!==t.length)throw new Error("scale need to be a vector with two positions.");this.#m.scale=function(t,i,s){var a=new e(3);return a[0]=t,a[1]=i,a[2]=1,a}(t[0],t[1])}set opacity(t){this.#m.setUniformValue("alpha",t,"1f")}get positionX(){return this.#m.position[0]}get positionY(){return this.#m.position[1]}async init(t,e){this.#m=new h(t,"#version 300 es\n    precision highp float;\n\n    uniform mat4 mvp;\n\n    in vec4 position;\n    in vec2 texCoord;\n\n    out vec2 fTexCoord;\n\n    void main() {\n        gl_Position  = mvp * position;\n        fTexCoord = texCoord;\n    }\n","#version 300 es\n    precision highp float;\n    \n    in vec2 fTexCoord;\n\n    uniform sampler2D uTexture;\n    uniform float alpha;\n\n    out vec4 color;\n\n    void main() {\n        color = texture(uTexture, fTexCoord);\n\n        if(color.a < 0.2) discard;\n\n        color *= alpha;\n    }\n",t.TRIANGLES);const i=await this.#g(e),s=this.#v(...i);this.#m.addAttribute("position",s.coords),this.#m.addAttribute("texCoord",s.texCoords,2),this.opacity=1}static async loadImage(t){return new Promise((e=>{const i=new Image;i.addEventListener("load",(()=>{e(i)})),i.src=t}))}async#g(t){const e=await l.loadImage(t);await e.decode();const i=await createImageBitmap(e);return this._tex=this.#m.createTex(e,"uTexture"),[i.width,i.height]}#v(t,e){const i=t/e;let s=1,a=1;i<1?s*=i:a/=i,this.#f=s,this.#u=a;const o=[-s,-a,0,1],r=[s,-a,0,1],n=[s,a,0,1],c=[-s,a,0,1];return{coords:[...o,...r,...n,...o,...n,...c],texCoords:[0,1,1,1,1,0,0,1,1,0,0,0]}}pointCollision(t,e,a){const n=[t,e,0,1],c=i();s(c,this.#m.modelMatrix),a&&r(c,a.viewProjection,c);const h=i();o(h,c);const l=function(t,e){const i=new Array(e.length).fill(0);if(Math.round(e.length**2)===t.length){for(let s=0;s<e.length;s++)for(let a=0;a<t.length;a+=4)i[s]+=t[a+s]*e[a/4];return i}}(h,n);return Math.abs(l[0])<this.#f&&Math.abs(l[1])<this.#u}draw(t){this.#m&&this.#m.draw(t)}}class m{attributes=new Map;id;hEdge;constructor(t){this.id=t}}class f{opositte;next;vertex;constructor(t){this.vertex=t}}class u{hEdge;constructor(t){this.hEdge=t}}class g{#p=[];#d=[];#w=[];constructor(t){for(let e=0;e<t.length;e+=3){const i=t[e],s=t[e+1],a=t[e+2];this.#d[i]||(this.#d[i]=new m(i)),this.#d[s]||(this.#d[s]=new m(s)),this.#d[a]||(this.#d[a]=new m(a));const o=new f(this.#d[i]),r=new f(this.#d[s]),n=new f(this.#d[a]);o.next=r,r.next=n,n.next=o;const c=new u(o);this.#p[e]=o,this.#p[e+1]=r,this.#p[e+2]=n,this.#w[Math.round(e/3)]=c}this.setOposittes()}setOposittes(){for(let t of this.#p){const e=t.vertex,i=t.next.vertex;if(e.hEdge||(e.hEdge=t),!t.opositte)for(let s of this.#p)if(s.vertex===i&&s.next.vertex===e){t.opositte=s,s.opositte=t;break}}}setAttribute(t,e,i){if(t.length/e!==this.#d.length)throw new Error(`Mesh haves ${this.#d.length} vertices, but only ${t.length/e} were given.`);for(let s=0;s<t.length;s+=e){const a=t.slice(s,s+e);this.#d[Math.round(s/e)].attributes.set(i,a)}}createVBOs(){const t=new Map,e=[];for(let e of this.#d)for(let i of e.attributes.keys())t.get(i)||t.set(i,[]),t.get(i).push(...e.attributes.get(i));for(let t of this.#p)e.push(t.vertex.id);return{attributes:t,indexes:e,count:this.#d.length}}}class v extends h{#_;#x=-1;#M;#c=!1;set border(t){this.#M=t}constructor(t,e,i,s){super(t,e,i,t.TRIANGLES),this.#_=new g(s)}addAttribute(t,e,i=4){if(!(e instanceof Array))throw new Error("The info parameter needs to be a Array.");if(e.forEach((t=>{if("number"!=typeof t)throw new Error("The info array need to be numeric.")})),-1===this._gl.getAttribLocation(this._program,t))throw new Error(`the attribute ${t} doesn't exists in the shader code.`);this.#_.setAttribute(e,i,t),this.#c=!1}#l(){const t=this.#_.createVBOs(),e=Array.from(t.attributes.entries()).map((e=>({loc:this._gl.getAttribLocation(this._program,e[0]),buffer:c.createBuffer(this._gl,this._gl.ARRAY_BUFFER,new Float32Array(e[1])),dimension:Math.round(e[1].length/t.count)})));this._vaoLoc=c.createVAO(this._gl,...e),this.#x=c.createBuffer(this._gl,this._gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(t.indexes)),this._count=t.indexes.length,this.#c=!0}draw(t){this.#c||this.#l(),this.useDepthTest&&(this._gl.enable(this._gl.DEPTH_TEST),this._gl.depthFunc(this._gl.LESS)),this._gl.frontFace(this._gl.CCW),this._gl.enable(this._gl.CULL_FACE),this._gl.cullFace(this._gl.BACK),this._gl.bindVertexArray(this._vaoLoc),this._gl.useProgram(this._program),this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER,this.#x);const e=this._gl.getUniformLocation(this._program,"model"),s=this._gl.getUniformLocation(this._program,"modelView"),a=this._gl.getUniformLocation(this._program,"mvp");if(e)this._gl.uniformMatrix4fv(e,!1,this.modelMatrix);else if(s){const s=i();r(s,t.viewMatrix,this.modelMatrix),this._gl.uniformMatrix4fv(e,!1,s)}else if(a){const s=i();r(s,t.viewProjection,this.modelMatrix),this._gl.uniformMatrix4fv(e,!1,s)}this._gl.drawElements(this._primitive,this._count,this._gl.UNSIGNED_INT,0),this._gl.disable(this._gl.CULL_FACE),this.useDepthTest&&this._gl.disable(this._gl.DEPTH_TEST)}pointCollision(t,e,i){return!!this.#M&&this.#M.pointCollision(t,e,i,this)}get drawBorder(){return this.#M.draw()}static async loadMeshFromObj(t,e,i,s,a){const o=await fetch(t),r=await o.text(),n=new Map,c=r.split("\n"),h=[],m=[],f=[],u=[];let g=0;for(let t of c)if(t.startsWith("vn")){const e=t.replace("vn ","").split(" ").map(Number.parseFloat);m.push(...e,1);const i=Math.sqrt(p(e,e));if(Math.abs(p(e,[0,0,1])/i)<.5){const t=e.join(",");n.get(t)||n.set(t,g)}g++}else if(t.startsWith("vt")){const e=t.replace("vt ","").split(" ").map(Number.parseFloat);f.push(...e)}else if(t.startsWith("v")){const e=t.replace("v ","").split(" ").map(Number.parseFloat);h.push(...e,1)}else if(t.startsWith("f")){const e=t.replace("f ","").split(" ").map((t=>{const e=t.indexOf("/"),i=t.slice(0,e);return Number.parseInt(i)-1}));u.push(...e)}const w=new d(n,h,e),_=new v(e,i,s,u);if(_.addAttribute("position",h),_.addAttribute("normal",m),_.useDepthTest=!0,0!==f.length){if(!a)throw new Error("This mesh need to a texture path");_.addAttribute("texCoord",f,3);const t=await l.loadImage(a);_.createTex(t,"uTexture")}return _.border=w,_}}const p=(t,e)=>t.reduce(((t,i,s)=>t+i*e[s]),0);class d{#b;#j;#U;#V;#S;constructor(t,e){this.#b=t,this.#j=e;let i=1/0,s=-1/0;for(let t=0;t<this.#j.length;t+=4)this.#j[t+2]<i&&(i=this.#j[t+2]),this.#j[t+2]>s&&(s=this.#j[t+2]);this.#V=i,this.#S=s}pointCollision(t,e,i,s){return this.#E(t,e,this.#V,i,s)||this.#E(t,e,this.#S,i,s)}#E(t,e,a,n,c){const h=[t,e,a,1],l=i();s(l,c.modelMatrix),n&&r(l,n.viewMatrix,l);const m=i();o(m,l);let f=d.multiplyMatWithVec(m,h);console.log(h,f);let u=this.#T(f);return u&&(this.#U=h),u}#T(t){let e,i,s=0;console.log("collide"),console.log(t);for(let a of this.#b.entries()){const o=4*a[1],r=[this.#j[o],this.#j[o+1],this.#j[o+2]];if(!e){e=r,i=r;continue}const n=[r[0],i[0]];n.sort();const[c,h]=n,l=[r[1],i[1]];l.sort();const[m,f]=l,u=(m-f)/(c-h),g=m-c*u;t[1]<=f&&t[1]>=m&&t[0]<=(t[1]-g)/u&&(s++,console.log(i,r,(t[1]-g)/u)),i=r}const a=Math.max(e[0],i[0]),o=[e[1],i[1]];o.sort();const[r,n]=o;return t[1]<=n&&t[1]>=r&&t[0]<=a&&s++,s%2==1}draw(){const t=document.createElement("canvas");t.width=1e3,t.height=1e3,t.style.backgroundColor="rgb(100, 0, 0)";const e=t.getContext("2d");let i;e.beginPath();for(let t of this.#b.entries()){const s=4*t[1],a=[this.#j[s],this.#j[s+1],this.#j[s+2]];i?e.lineTo(500*a[0]+250,500*(1-a[1])):(i=a,e.moveTo(500*a[0]+250,500*(1-a[1])))}return e.lineTo(500*i[0]+250,500*(1-i[1])),e.stroke(),this.#U&&e.fillRect(500*this.#U[0]+250,500*(1-this.#U[1]),5,5),t}static multiplyMatWithVec(t,e){const i=new Array(e.length).fill(0);if(Math.round(e.length**2)===t.length){for(let s=0;s<e.length;s++)for(let a=0;a<t.length;a+=4)i[s]+=t[a+s]*e[a/4];return i}}}const w="#version 300 es\n    precision highp float;\n\n    uniform mat4 model;\n    uniform mat4 view;\n    uniform mat4 projection;\n    uniform vec4 color;\n\n    in vec4 position;\n    in vec4 normal;\n\n    out vec4 fPos;\n    out vec4 fColor;\n    out vec4 fNormal;\n\n    void main() {\n        gl_Position = (projection*view*model) * position;\n        gl_Position /= gl_Position.w;\n        fColor = color;\n        fPos = position;\n        fNormal = normal;\n    }\n",_="#version 300 es\n    precision highp float;\n    \n    uniform mat4 model;\n    uniform mat4 view;\n    uniform mat4 projection;\n\n    uniform vec3 amb_c;\n    uniform vec3 dif_c;\n    uniform vec3 esp_c;\n    uniform vec3 pos;\n    uniform float amb_k;\n    uniform float dif_k;\n    uniform float esp_k;\n    uniform float esp_p;\n\n    in vec4 fColor;\n    in vec4 normal;\n    in vec4 fPos;\n    in vec4 fNormal;\n\n    out vec4 color;\n\n    void main() {\n        mat4 modelView = view*model;\n\n        vec3 lightPos = (view * vec4(pos, 1.0)).xyz;\n        vec3 pos = -(modelView * fPos).xyz;\n\n        vec3 vNormal = normalize(inverse(transpose(modelView)) * fNormal).xyz;\n        vec3 vDistance = normalize(pos - lightPos);\n\n        vec3 normalPos = normalize(pos);\n\n        vec3 halfVector= normalize(vDistance + normalPos);\n\n        vec3 amb = amb_k * amb_c;\n\n        vec3 diff = max(dot(vNormal, vDistance), 0.0) * dif_k * dif_c;\n\n        vec3 spec = max(pow(dot(vNormal, halfVector), esp_p), 0.0) * esp_c * esp_k;\n\n        vec3 color3 = vec3(fColor);\n        \n        color3 = 0.5*color3 + 0.5*(diff + amb + spec);\n\n        color = vec4(color3, 1.0);\n    }\n";class x extends l{#y;async init(t,e=1e3){const i=document.createElement("canvas"),s=i.toDataURL("image/png");[i.width,i.height]=[e,e],await super.init(t,s),this.#y=i}async update(t=(()=>{}),e){t(this.#y.getContext("2d"));const i=this.#y.toDataURL("image/png"),s=await l.loadImage(i);h.changeTex(e,this._tex,s)}}class M{#A=i();#F=i();#P=i();camPosition=[0,0,1];lookDirection=[0,0,0];upDirection=[0,1,0];left=-4;right=4;bottom=-4;top=4;near=1;far=9;fovy=Math.PI/2;aspect;constructor(t){this.aspect=t.width/t.height}#C="perspective";set projectionType(t){if("orthogonal"!==t&&"perspective"!==t)throw new Error("Invalid type of projection.");this.#C=t}get viewMatrix(){return this.#O(),this.#A}get projMatrix(){return this.#L(),this.#F}#O(){a(this.#A),function(e,i,s,o){var r,n,c,h,l,m,f,u,g,v,p=i[0],d=i[1],w=i[2],_=o[0],x=o[1],M=o[2],b=s[0],j=s[1],U=s[2];Math.abs(p-b)<t&&Math.abs(d-j)<t&&Math.abs(w-U)<t?a(e):(f=p-b,u=d-j,g=w-U,r=x*(g*=v=1/Math.hypot(f,u,g))-M*(u*=v),n=M*(f*=v)-_*g,c=_*u-x*f,(v=Math.hypot(r,n,c))?(r*=v=1/v,n*=v,c*=v):(r=0,n=0,c=0),h=u*c-g*n,l=g*r-f*c,m=f*n-u*r,(v=Math.hypot(h,l,m))?(h*=v=1/v,l*=v,m*=v):(h=0,l=0,m=0),e[0]=r,e[1]=h,e[2]=f,e[3]=0,e[4]=n,e[5]=l,e[6]=u,e[7]=0,e[8]=c,e[9]=m,e[10]=g,e[11]=0,e[12]=-(r*p+n*d+c*w),e[13]=-(h*p+l*d+m*w),e[14]=-(f*p+u*d+g*w),e[15]=1)}(this.#A,this.camPosition,this.lookDirection,this.upDirection)}#L(){a(this.#F),"perspective"===this.#C?function(t,e,i,s,a){var o,r=1/Math.tan(e/2);t[0]=r/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=a&&a!==1/0?(o=1/(s-a),t[10]=(a+s)*o,t[14]=2*a*s*o):(t[10]=-1,t[14]=-2*s)}(this.#F,this.fovy,this.aspect,this.near,this.far):function(t,e,i,s,a,o,r){var n=1/(e-i),c=1/(s-a),h=1/(o-r);t[0]=-2*n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*h,t[11]=0,t[12]=(e+i)*n,t[13]=(a+s)*c,t[14]=(r+o)*h,t[15]=1}(this.#F,this.left*this.aspect,this.right*this.aspect,this.bottom,this.top,this.left,this.right)}get viewProjection(){return this.#O(),this.#L(),a(this.#P),r(this.#P,this.#F,this.#A),this.#P}}class b{ambColor=[0,0,0];ambK=3;difColor=[.3,.3,.3];difK=4;espColor=[1,1,1];espK=3;espExp=20;pos;constructor(t){this.pos=t}createUniforms(t){t.setUniformValue("amb_c",this.ambColor,"3fv"),t.setUniformValue("amb_k",this.ambK,"1f"),t.setUniformValue("dif_c",this.difColor,"3fv"),t.setUniformValue("dif_k",this.difK,"1f"),t.setUniformValue("esp_c",this.espColor,"3fv"),t.setUniformValue("esp_k",this.espK,"1f"),t.setUniformValue("esp_p",this.espExp,"1f")}}class j{#R=[];#I;#k;get camera(){return this.#k}constructor(t,e=[0,0,0,1]){if(t instanceof WebGL2RenderingContext){if(t.viewport(0,0,t.canvas.width,t.canvas.height),!e||!e.length||4!==e.length)throw new Error("The clear color need to be a array with 4 floats");t.clearColor(0,0,0,1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),this.gl=t}}createCamera(t){this.#k=new M(t)}createLight(t){this.#I=new b(t)}appendElement(...t){t.forEach((t=>{if(!t.draw)throw new Error("Element need to have a draw function");this.#R.push(t),this.#I&&t instanceof h&&this.#I.createUniforms(t)}))}draw(){for(let t of this.#R)t.draw(this.#k)}}class U{#D;#B;#Y;#X=4.5;#N=!1;static async build(t){const e=new U;return await e.init(t),e}async init(t){this.gl=t.getContext("webgl2"),await this.#G(),await this.#W()}async#G(){this.#D=new j(this.gl);const t=new l;await t.init(this.gl,"./assets/menu/fundo.jpg");const e=new l;await e.init(this.gl,"./assets/menu/logo_war.png");const i=new l;await i.init(this.gl,"./assets/menu/play_button.png");const s=new l;await s.init(this.gl,"./assets/menu/settings_button.png");const a=new l;await a.init(this.gl,"./assets/menu/max_button.png"),t.scaleY=1.85,e.scale=[.35,.56],i.scale=[.15,.26],s.scale=[.046,.08],a.scale=[.046,.08],e.positionY=.25,i.positionY=-.55,s.positionX=.9,s.positionY=.8,this.#D.appendElement(t,e,i,s),this.gl.canvas.addEventListener("click",(t=>{const e=U.mapClickInCanvas(t.clientX,t.clientY,this.gl.canvas);i.pointCollision(...e)&&(this.#N=!0)}))}async#W(){const t=new V;await t.init(this.gl);const e=new S;await e.init(this.gl);const i=new E;await i.init(this.gl);const s=await v.loadMeshFromObj("./assets/meshes/south_america/brasil.obj",this.gl,w,_);s.scale=[this.#X,this.#X,1];const a=await v.loadMeshFromObj("./assets/meshes/south_america/argentina.obj",this.gl,w,_);a.scale=[this.#X,this.#X,1];const o=await v.loadMeshFromObj("./assets/meshes/south_america/chile.obj",this.gl,w,_);o.scale=[this.#X,this.#X,1];const r=await v.loadMeshFromObj("./assets/meshes/south_america/venezuela.obj",this.gl,w,_);r.scale=[this.#X,this.#X,1];const n=await v.loadMeshFromObj("./assets/meshes/north_america/mexico.obj",this.gl,w,_);n.scale=[this.#X,this.#X,1];const c=await v.loadMeshFromObj("./assets/meshes/north_america/california.obj",this.gl,w,_);c.scale=[this.#X,this.#X,1];const h=await v.loadMeshFromObj("./assets/meshes/north_america/nova_york.obj",this.gl,w,_);h.scale=[this.#X,this.#X,1];const l=await v.loadMeshFromObj("./assets/meshes/north_america/ottawa.obj",this.gl,w,_);l.scale=[this.#X,this.#X,1];const m=await v.loadMeshFromObj("./assets/meshes/north_america/labrador.obj",this.gl,w,_);m.scale=[this.#X,this.#X,1];const f=await v.loadMeshFromObj("./assets/meshes/north_america/vancouver.obj",this.gl,w,_);f.scale=[this.#X,this.#X,1];const u=await v.loadMeshFromObj("./assets/meshes/north_america/alaska.obj",this.gl,w,_);u.scale=[this.#X,this.#X,1];const g=await v.loadMeshFromObj("./assets/meshes/north_america/mackenzie.obj",this.gl,w,_);g.scale=[this.#X,this.#X,1];const p=await v.loadMeshFromObj("./assets/meshes/north_america/groelandia.obj",this.gl,w,_);p.scale=[this.#X,this.#X,1];const d=await v.loadMeshFromObj("./assets/meshes/africa/africa_sul.obj",this.gl,w,_);d.scale=[this.#X,this.#X,1];const M=await v.loadMeshFromObj("./assets/meshes/africa/argelia.obj",this.gl,w,_);M.scale=[this.#X,this.#X,1];const b=await v.loadMeshFromObj("./assets/meshes/africa/congo.obj",this.gl,w,_);b.scale=[this.#X,this.#X,1];const y=await v.loadMeshFromObj("./assets/meshes/africa/egito.obj",this.gl,w,_);y.scale=[this.#X,this.#X,1];const A=await v.loadMeshFromObj("./assets/meshes/africa/madagascar.obj",this.gl,w,_);A.scale=[this.#X,this.#X,1];const F=await v.loadMeshFromObj("./assets/meshes/africa/sudao.obj",this.gl,w,_);F.scale=[this.#X,this.#X,1];const P=await v.loadMeshFromObj("./assets/meshes/oceania/australia.obj",this.gl,w,_);P.scale=[this.#X,this.#X,1];const C=await v.loadMeshFromObj("./assets/meshes/oceania/borneu.obj",this.gl,w,_);C.scale=[this.#X,this.#X,1];const O=await v.loadMeshFromObj("./assets/meshes/oceania/nova_guine.obj",this.gl,w,_);O.scale=[this.#X,this.#X,1];const L=await v.loadMeshFromObj("./assets/meshes/oceania/sumatra.obj",this.gl,w,_);L.scale=[this.#X,this.#X,1];const R=await v.loadMeshFromObj("./assets/meshes/asia/aral.obj",this.gl,w,_);R.scale=[this.#X,this.#X,1];const I=await v.loadMeshFromObj("./assets/meshes/asia/china.obj",this.gl,w,_);I.scale=[this.#X,this.#X,1];const k=await v.loadMeshFromObj("./assets/meshes/asia/dudinka.obj",this.gl,w,_);k.scale=[this.#X,this.#X,1];const D=await v.loadMeshFromObj("./assets/meshes/asia/india.obj",this.gl,w,_);D.scale=[this.#X,this.#X,1];const B=await v.loadMeshFromObj("./assets/meshes/asia/japao.obj",this.gl,w,_);B.scale=[this.#X,this.#X,1];const Y=await v.loadMeshFromObj("./assets/meshes/asia/mongolia.obj",this.gl,w,_);Y.scale=[this.#X,this.#X,1];const X=await v.loadMeshFromObj("./assets/meshes/asia/omek.obj",this.gl,w,_);X.scale=[this.#X,this.#X,1];const N=await v.loadMeshFromObj("./assets/meshes/asia/oriente_medio.obj",this.gl,w,_);N.scale=[this.#X,this.#X,1];const G=await v.loadMeshFromObj("./assets/meshes/asia/siberia.obj",this.gl,w,_);G.scale=[this.#X,this.#X,1];const W=await v.loadMeshFromObj("./assets/meshes/asia/tchita.obj",this.gl,w,_);W.scale=[this.#X,this.#X,1];const z=await v.loadMeshFromObj("./assets/meshes/asia/vietna.obj",this.gl,w,_);z.scale=[this.#X,this.#X,1];const K=await v.loadMeshFromObj("./assets/meshes/asia/vladvostok.obj",this.gl,w,_);K.scale=[this.#X,this.#X,1];const H=await v.loadMeshFromObj("./assets/meshes/europa/alemanha.obj",this.gl,w,_);H.scale=[this.#X,this.#X,1];const q=await v.loadMeshFromObj("./assets/meshes/europa/franca.obj",this.gl,w,_);q.scale=[this.#X,this.#X,1];const $=await v.loadMeshFromObj("./assets/meshes/europa/inglaterra.obj",this.gl,w,_);$.scale=[this.#X,this.#X,1];const J=await v.loadMeshFromObj("./assets/meshes/europa/islandia.obj",this.gl,w,_);J.scale=[this.#X,this.#X,1];const Q=await v.loadMeshFromObj("./assets/meshes/europa/moscou.obj",this.gl,w,_);Q.scale=[this.#X,this.#X,1];const Z=await v.loadMeshFromObj("./assets/meshes/europa/polonia.obj",this.gl,w,_);Z.scale=[this.#X,this.#X,1];const tt=await v.loadMeshFromObj("./assets/meshes/europa/suecia.obj",this.gl,w,_);tt.scale=[this.#X,this.#X,1],this.#B=new j(this.gl),this.#B.createCamera(T),this.#B.camera.camPosition[2]=1.8,this.#B.camera.camPosition[1]=-.3,this.#B.createLight([1,0,.3]),this.#Y=new j(this.gl);const et=new x;await et.init(this.gl),await et.update((t=>{t instanceof CanvasRenderingContext2D&&(t.fillStyle="white",t.ellipse(500,500,400,500,0,0,2*Math.PI),t.lineWidth=100,t.stroke(),t.font="600px Arial",t.fillText("1",320,600))}),this.gl),et.scale=[.1,.1],et.positionY=.2,this.#B.appendElement(s,a,o,r,n,c,h,l,m,f,u,g,p,d,M,b,y,A,F,P,C,O,L,R,I,k,D,B,Y,X,N,G,W,z,K,H,q,$,J,Q,Z,tt),this.#Y.appendElement(t,e,i),s.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),s.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),s.setUniformValue("color",[0,0,1,1],"4fv"),a.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),a.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),a.setUniformValue("color",[0,0,1,1],"4fv"),o.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),o.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),o.setUniformValue("color",[0,0,1,1],"4fv"),r.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),r.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),r.setUniformValue("color",[0,0,1,1],"4fv"),n.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),n.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),n.setUniformValue("color",[0,0,1,1],"4fv"),c.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),c.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),c.setUniformValue("color",[0,0,1,1],"4fv"),h.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),h.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),h.setUniformValue("color",[0,0,1,1],"4fv"),l.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),l.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),l.setUniformValue("color",[0,0,1,1],"4fv"),m.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),m.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),m.setUniformValue("color",[0,0,1,1],"4fv"),f.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),f.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),f.setUniformValue("color",[0,0,1,1],"4fv"),u.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),u.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),u.setUniformValue("color",[0,0,1,1],"4fv"),g.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),g.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),g.setUniformValue("color",[0,0,1,1],"4fv"),p.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),p.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),p.setUniformValue("color",[0,0,1,1],"4fv"),d.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),d.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),d.setUniformValue("color",[0,0,1,1],"4fv"),M.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),M.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),M.setUniformValue("color",[0,0,1,1],"4fv"),b.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),b.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),b.setUniformValue("color",[0,0,1,1],"4fv"),y.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),y.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),y.setUniformValue("color",[0,0,1,1],"4fv"),A.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),A.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),A.setUniformValue("color",[0,0,1,1],"4fv"),F.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),F.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),F.setUniformValue("color",[0,0,1,1],"4fv"),P.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),P.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),P.setUniformValue("color",[0,0,1,1],"4fv"),C.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),C.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),C.setUniformValue("color",[0,0,1,1],"4fv"),O.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),O.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),O.setUniformValue("color",[0,0,1,1],"4fv"),L.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),L.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),L.setUniformValue("color",[0,0,1,1],"4fv"),R.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),R.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),R.setUniformValue("color",[0,0,1,1],"4fv"),I.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),I.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),I.setUniformValue("color",[0,0,1,1],"4fv"),k.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),k.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),k.setUniformValue("color",[0,0,1,1],"4fv"),D.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),D.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),D.setUniformValue("color",[0,0,1,1],"4fv"),B.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),B.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),B.setUniformValue("color",[0,0,1,1],"4fv"),Y.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),Y.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),Y.setUniformValue("color",[0,0,1,1],"4fv"),X.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),X.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),X.setUniformValue("color",[0,0,1,1],"4fv"),N.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),N.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),N.setUniformValue("color",[0,0,1,1],"4fv"),G.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),G.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),G.setUniformValue("color",[0,0,1,1],"4fv"),W.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),W.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),W.setUniformValue("color",[0,0,1,1],"4fv"),z.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),z.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),z.setUniformValue("color",[0,0,1,1],"4fv"),K.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),K.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),K.setUniformValue("color",[0,0,1,1],"4fv"),H.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),H.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),H.setUniformValue("color",[0,0,1,1],"4fv"),q.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),q.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),q.setUniformValue("color",[0,0,1,1],"4fv"),$.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),$.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),$.setUniformValue("color",[0,0,1,1],"4fv"),J.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),J.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),J.setUniformValue("color",[0,0,1,1],"4fv"),Q.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),Q.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),Q.setUniformValue("color",[0,0,1,1],"4fv"),Z.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),Z.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),Z.setUniformValue("color",[0,0,1,1],"4fv"),tt.setUniformValue("view",this.#B.camera.viewMatrix,"Matrix4fv"),tt.setUniformValue("projection",this.#B.camera.projMatrix,"Matrix4fv"),tt.setUniformValue("color",[0,0,1,1],"4fv"),this.gl.canvas.addEventListener("click",(t=>{if(!this.#N)return;const e=U.mapClickInCanvas(t.clientX,t.clientY,this.gl.canvas);a.pointCollision(...e)&&alert("argentina")}))}draw(){this.#N?(this.#B.draw(),this.#Y.draw()):this.#D.draw()}run(){const t=()=>{this.draw(),requestAnimationFrame(t)};t()}static mapClickInCanvas(t,e,i){const s=[t-i.offsetLeft-i.width/2,i.height/2-(e-i.offsetTop)];return[2*s[0]/i.width,2*s[1]/i.height]}}class V{async init(t){this.settingsButton=new l,await this.settingsButton.init(t,"./assets/menu/settings_button.png"),this.settingsButton.scale=[.046,.08],V.setInitialPosition(.9,.8,.2,this.settingsButton),this.card_button=new l,await this.card_button.init(t,"./assets/game/card_button.png"),this.card_button.scale=[.08,.15],V.setInitialPosition(.76,-.85,.2,this.card_button),this.objective_button=new l,await this.objective_button.init(t,"./assets/game/objective_button.png"),this.objective_button.scale=[.065,.11],V.setInitialPosition(.92,-.85,.2,this.objective_button),this.current_player=new l,await this.current_player.init(t,"./assets/game/current_player.png"),this.current_player.scale=[.4,.6],V.setInitialPosition(0,-.85,.2,this.current_player),this.show_players=new l,await this.show_players.init(t,"./assets/game/show_players.png"),this.show_players.scale=[.065,.115],V.setInitialPosition(-.92,-.85,.2,this.show_players)}static setInitialPosition(t,e,i,s){s.positionX=t,s.positionY=e,s.depth=i}moveAll(t){this.card_button.positionY+=t,this.objective_button._tex.positionY+=t,this.current_player.positionY+=t}draw(t){this.settingsButton.draw(t),this.card_button.draw(t),this.objective_button.draw(t),this.current_player.draw(t),this.show_players.draw(t)}}class S{async init(t){this.show_cards=new l,await this.show_cards.init(t,"./assets/game/show_cards.png"),this.show_cards.scale=[.4,.7],S.setInitialPosition(this.show_cards.positionX,-1.85,.3,this.show_cards),this.cancel_button=new l,await this.cancel_button.init(t,"./assets/game/cancel_button.png"),this.cancel_button.scale=[.046,.083],S.setInitialPosition(-.34,-1.81,.4,this.cancel_button),this.ok_button=new l,await this.ok_button.init(t,"./assets/game/ok_button.png"),this.ok_button.scale=[.046,.083],S.setInitialPosition(.34,-1.81,.4,this.ok_button),this.cards_info=new l,await this.cards_info.init(t,"assets/game/cards_info.png"),this.cards_info.scale=[.2,.35],S.setInitialPosition(.832+1,this.cards_info.positionY,.3,this.cards_info)}static setInitialPosition(t,e,i,s){s.positionX=t,s.positionY=e,s.depth=i}moveAll(t,e){this.show_cards.positionY+=e,this.cancel_button.positionY+=e,this.ok_button.positionY+=e,this.cards_info.positionX+=t}draw(t){this.show_cards.draw(t),this.cancel_button.draw(t),this.ok_button.draw(t),this.cards_info.draw(t)}}class E{async init(t){this.fortify=new l,await this.fortify.init(t,"./assets/game/fortify.png"),this.fortify.scale=[.4,.7],E.setInitialPosition(this.fortify.positionX,-1.825,.3,this.fortify),this.cancel_button=new l,await this.cancel_button.init(t,"./assets/game/cancel_button.png"),this.cancel_button.scale=[.046,.083],E.setInitialPosition(-.34,-1.81,.4,this.cancel_button),this.ok_button=new l,await this.ok_button.init(t,"./assets/game/ok_button.png"),this.ok_button.scale=[.046,.083],E.setInitialPosition(.34,-1.81,.4,this.ok_button),this.plus_button=new l,await this.plus_button.init(t,"./assets/game/plus_button.png"),this.plus_button.scale=[.046,.083],E.setInitialPosition(.168,-.86-1,.4,this.plus_button),this.minus_button=new l,await this.minus_button.init(t,"./assets/game/minus_button.png"),this.minus_button.scale=[.046,.083],E.setInitialPosition(-.168,-.86-1,.4,this.minus_button)}static setInitialPosition(t,e,i,s){s.positionX=t,s.positionY=e,s.depth=i}moveAll(t){this.fortify.positionY+=t,this.cancel_button.positionY+=t,this.ok_button.positionY+=t,this.plus_button.positionY+=t,this.minus_button.positionY+=t}draw(t){this.fortify.draw(t),this.cancel_button.draw(t),this.ok_button.draw(t),this.plus_button.draw(t),this.minus_button.draw(t)}}const T=document.querySelector("#game-screen");U.build(T).then((t=>{t.run()}))})();
//# sourceMappingURL=main.bundle.js.map